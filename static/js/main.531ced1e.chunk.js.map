{"version":3,"sources":["i18next/en/index.ts","i18next/ko/index.ts","i18next/index.ts","utils/network.ts","networks/Api.ts","utils/storage.ts","model/address.ts","model/keystore.ts","utils/transaction.ts","redux/asset/assetReducer.ts","redux/asset/assetActions.ts","redux/chain/chainReducer.ts","redux/chain/chainActions.ts","redux/account/accountActions.ts","redux/wallet/walletActions.ts","components/AddressContainer/AddressContainer.tsx","components/PayTxHistory/PayTxItem/PayTxItem.tsx","components/PayTxHistory/PayTxHistory.tsx","components/TooltipLabel/index.tsx","components/ValidationInput/ValidationInput.tsx","components/Account/SendAsset/CCCReceiverContainer/CCCReceiverItem/CCCReceiverItem.tsx","components/Account/SendAsset/CCCReceiverContainer/CCCReceiverContainer.tsx","components/Account/SendAsset/SendCCC.tsx","components/Account/Account.tsx","utils/ImageLoader/ImageLoader.tsx","components/AddressList/AddressItem/AddressItem.tsx","components/AddressList/AddressList.tsx","utils/metadata.ts","components/AssetTxHistory/AssetTxItem/AssetTxItemEntity/index.tsx","components/AssetTxHistory/AssetTxItem/AssetTxItem.tsx","components/AssetTxHistory/AssetTxHistory.tsx","components/AssetDetail/AssetDetail.tsx","components/AssetList/AssetItem/AssetItem.tsx","components/AssetList/SendAsset/ReceiverContainer/ReceiverItem/ReceiverItem.tsx","components/AssetList/SendAsset/ReceiverContainer/ReceiverContainer.tsx","redux/global/globalActions.ts","components/AssetList/SendAsset/SendAsset.tsx","components/AssetList/AssetList.tsx","components/CreateWallet/CreateWallet.tsx","components/CreateWallet/ConfirmBackupPhrase/ConfirmBackupPhrase.tsx","components/CreateWallet/InputPassphrase/InputPassphrase.tsx","components/CreateWallet/ShowBackupPhrase/ShowBackupPhrase.tsx","components/Footer/index.tsx","components/ExportBackupPopup/ExportBackupPopup.tsx","components/Header/MenuButton/MenuButton.tsx","components/Header/NetworkButton/NetworkButton.tsx","components/Header/WalletSaver/index.tsx","components/Header/Header.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/MintAsset/index.tsx","components/NotFound/NotFound.tsx","components/PrivateRoute/PrivateRoute.tsx","components/RestoreWallet/RestoreWallet.tsx","components/SelectKeyFile/SelectKeyFile.tsx","components/App/App.tsx","redux/account/accountReducer.ts","redux/global/globalReducer.ts","redux/wallet/walletReducer.ts","redux/index.ts","registerServiceWorker.ts","index.tsx","components/Header/NetworkButton/img/mainnet.svg","components/Header/NetworkButton/img/testnet.svg","components/AddressContainer/img/copy-hover.svg","components/AddressContainer/img/copy.svg","components/PayTxHistory/img/cautiondisabled.svg","components/ValidationInput/img/icons-check.svg","components/ValidationInput/img/icons-error.svg","components/Account/SendAsset/img/check_icon.svg","components/AddressList/AddressItem/img/copy-hover.svg","components/AddressList/AddressItem/img/copy.svg","components/AssetTxHistory/img/cautiondisabled.svg","components/AssetList/img/cautiondisabled.svg","components/AssetList/SendAsset/img/check_icon.svg","components/Footer/img/facebook.svg","components/Footer/img/github.svg","components/Footer/img/gitter.svg","components/Footer/img/medium.svg","components/Footer/img/telegram.svg","components/Footer/img/twitter.svg","components/Header/img/logo.svg","components/Login/img/logo-vertical.svg","components/MintAsset/img/check_icon.svg","components/SelectKeyFile/img/logo-vertical.svg","components/SelectKeyFile/img/plus-hover.svg","components/SelectKeyFile/img/plus-standard.svg","components/SelectKeyFile/img/restore-hover.svg","components/SelectKeyFile/img/restore-standard.svg"],"names":["create","confirm","mnemonic","seed","select","main","mint","restore","send","asset","ccc","welcome","backup","i18next","use","languageDetector","initReactI18next","init","fallbackLng","detection","order","lookupQuerystring","lookupLocalStorage","caches","excludeCacheFor","resources","en","ko","getIndexerHost","networkId","server","indexer","getExplorerHost","getCodeChainHost","chain","cc","tc","sc","wc","getRequest","url","a","axios","get","response","status","data","Error","statusText","body","post","getAggsUTXOList","address","apiHost","aggsUTXOList","Promise","all","map","aggsUTXO","getAssetByAssetType","H160","assetType","assetScheme","value","getPlatformAccount","balance","U64","seq","getUTXOListByAssetType","sendTxToGateway","tx","gatewayURl","postRequest","getPendingTransactions","transactions","transaction","type","transferAsset","outputs","output","getTxsByAddress","page","itemsPerPage","query","localstorageKeyOfPlatform","localstorageKeyOfAsset","networkIdKey","passphraseKey","getStorageKeyOfPlatform","getStorageKeyOfAsset","getPlatformKeys","platformKeysString","localStorage","getItem","JSON","parse","e","console","log","getAssetKeys","assetKeysString","clearWalletKeys","_","each","network","removeItem","clearPassphrase","sessionStorage","savePlatformKeys","platformKeys","setItem","stringify","saveAssetKeys","assetKeys","netowrkId","AddressType","cryptoKey","savePassphrase","passphrase","encryptedKey","CryptoJS","AES","encrypt","toString","isAssetAddress","isPlatformAddress","globalCCKey","dbType","getCCKey","CCKey","clearKeystore","ccKey","clear","createSeed","hdwseed","seedLength","getFirstSeedHash","getSeedHashes","seedHashes","exportMnemonic","seedHash","importMnemonic","isKeystoreExisted","exist","process","CI","platformAddressPath","assetAddressPath","restoringCheckingRange","getPlatformAddressPath","index","getAssetAddressPath","restorePlatformAddresses","currentPath","platformAddresses","getPublicKeyFromSeed","path","platformPubkey","key","blake160","PlatformAddress","fromAccountId","account","eq","lastValidPlatfromPathIndex","push","Platform","pathIndex","retValue","slice","retKeys","createPlatformAddress","savedPlatformKeys","newPathIndex","length","last","createAssetAddress","savedAssetKeys","assetPubKey","AssetTransferAddress","fromTypeAndPayload","Asset","checkPassphrase","restoreAssetAddresses","assetAddresses","lastValidAssetPathIndex","storedPlatformKeys","storedAssetKeys","platformKeyMapping","reduce","memo","storedPlatformKey","assetKeyMapping","storedAssetKey","keyStore","LocalKeyStore","platform","sdk","SDK","core","createMintAssetTransaction","scheme","shardId","metadata","name","description","icon_url","iconURL","supply","recipient","rpc","getSeq","feePayer","newSeq","filter","t","getSignerAddress","signTransaction","fee","signedTransaction","TxUtil","getAggsAsset","mintAsset","inputQuantities","outputQuantities","burnQuantities","filteredInputs","inputs","input","prevOut","owner","filteredBurns","burns","burn","filteredOutputs","results","filteredInput","before","newObject","plus","quantity","filteredBurn","filteredOutput","values","getAggsQuark","txList","pay","receiver","signer","createMintAssetTx","ActionType","assetInitState","UTXOList","availableAssets","getIdForCacheUTXO","cacheAssetScheme","CacheAssetScheme","cacheAggsUTXOList","CacheAggsUTXOList","cacheUTXOList","CacheUTXOList","cacheAvailableAssets","CacheAvailableAssets","setFetchingAssetScheme","SetFetchingAssetScheme","setFetchingAggsUTXOList","SetFetchingAggsUTXOList","setFetchingUTXOList","SetFetchingUTXOList","fetchAggsUTXOListIfNeed","dispatch","getState","cachedAggsUTXOList","assetReducer","isFetching","updatedAt","Date","showLoading","globalReducer","UTXOResponse","u","setTimeout","calculateAvailableAssets","hideLoading","addressUTXOListObj","pendingTxListObj","chainReducer","pendingTxList","txListObject","addressUTXOList","txHashList","hash","validPendingTxList","pendingTx","includes","aggregatedPendingAsset","flatMap","addressConfirmedUTXO","quantities","totalAssetQuantity","lt","minus","availableAssetsValue","fetchAssetSchemeIfNeed","cachedAssetScheme","responseAssetScheme","fetchUTXOListIfNeed","id","cachedUTXOList","UTXOListResponse","fetchAvailableAssets","chainActions","fetchPendingTxListIfNeed","fetchTxListIfNeed","chainInitState","bestBlockNumber","undefined","txListById","pendingTxListById","getIdByAddressAssetType","checkingIndexingFuncForSendingTx","cachePendingTxList","CachePendingTxList","setFetchingPendingTxList","SetFetchingPendingTxList","cachedPendingTxList","assetActions","accountActions","calculateAvailableQuark","params","force","cachedTxList","SetFetchingTxList","CacheTxList","fetchTxListByAssetTypeIfNeed","cachedTxListById","SetFetchingTxListById","CacheTxListById","sendSignedTransaction","observePlatformAddress","resolve","reject","setInterval","find","fetchAvailableQuark","clearInterval","error","sendTransactionByGateway","assetAddress","gatewayURL","unsignedHash","setFetchingAccount","SetFetchingAccount","updateAccount","UpdateAccount","fetchAccountIfNeed","cachedAccount","accountReducer","accounts","accountResponse","txListObj","accountObj","aggrPendingQuark","availableQuark","UpdateAvailableQuark","amount","updateWalletPlatformAddresses","UpdateWalletPlatformAddresses","updateWalletAssetAddresses","UpdateWalletAssetAddresses","walletReducer","SetLoadingAssetAddresses","isLoading","SetLoadingPlatformAddresses","toast","position","POSITION","BOTTOM_CENTER","autoClose","closeButton","hideProgressBar","newAddresses","AddressContainer","props","hoverCopyBtn","setState","isCopyHovering","outCopyBtn","handleCopyAddress","info","state","this","backButtonPath","addressIndex","className","Link","to","icon","size","i18nKey","text","onCopy","src","copyBtnHover","copyBtn","alt","onMouseOver","onMouseOut","onBlur","React","Component","withTranslation","PayTxItem","isPending","timestamp","aggrTx","moment","unix","format","target","rel","href","gte","toLocaleString","PayTxHistory","handlePageChange","pageNumber","activePage","fetchAll","Empty","pendingTimestamp","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","itemClass","linkClass","prevPageText","nextPageText","firstPageText","lastPageText","connect","TooltipLabel","uniqueId","closeTooltip","tooltipOpen","toggleTooltip","makeId","possible","i","charAt","Math","floor","random","document","addEventListener","removeEventListener","tooltip","Tooltip","trigger","isOpen","toggle","ValidationInput","isFocus","placeholder","labelText","isValid","reverse","showValidation","disable","decimalScale","Label","for","autoComplete","disabled","thousandSeparator","onFocus","onBlurCapture","onValueChange","v","IconCheck","IconError","CCCReceiverItem","handleBlurAddressInput","onAddressValidationCheck","handleBlurAmountInput","onAmountValidationCheck","handleBlurFeeInput","onFeeValidationCheck","handleMaxValueClick","onAmountChange","remainingAmount","handleChangeAddressInput","event","onAddressChange","handleChangedAmountInput","handleChangeFeeInput","onFeeChange","isAddressValid","isAmountValid","addressError","amountError","isFeeValid","feeError","onClick","MinimumFee","CCCReceiverContainer","calculateRemainingCCCString","totalAmount","remainingCCC","gt","handleAddressValidationCheck","myAddress","fromString","handleAmountValidationCheck","cccString","amountCCC","BigNumber","isNaN","amountFee","handleFeeValidationCheck","feeString","minimum","handleAddressChange","handleAmountChange","handleFeeChange","handleSubmit","preventDefault","onSubmit","isSending","SendCCC","updateWindowDimensions","window","innerWidth","addModalOpenClass","removeModalOpenClass","createPayTransaction","signedTx","isSent","onClose","CheckIcon","color","ownProps","Account","refresher","openSendingCCC","scrollTo","sendingCCC","handleCloseSendingCCC","match","fetchWalletFromStorageIfNeed","aa","walletActions","Identicon","require","sha256","ImageLoader","prop","requestUrl","getDefaultImage","update","identiconData","hex","fallback","isAssetImage","host","style","verticalAlign","width","height","onError","AddressItem","handleClick","walletAddress","history","withRouter","AddressList","createWalletPlatformAddress","createWalletAssetAddress","Container","Row","Col","md","lg","xl","isLoadingAssetAddresses","isLoadingPlatformAddresses","actions","parseMetadata","AssetTxItemEntity","renderQuantity","AssetTxItem","assetHistory","AssetTxHistory","AssetDetail","availableAsset","approver","toFormat","AssetItem","onSelect","handleClickInfo","isSelected","ReceiverItem","handleRemove","onRemove","handleBlurQuantityInput","onQuantityValidationCheck","onQuantityChange","remainingAsset","handleChangeQuantitiesInput","isQuantityValid","quantityError","hideCancel","ReceiverContainer","handleChangeFeePayer","selectFeePayer","handleChangeMemo","checkMemo","isMemoValid","memoError","checkFeeValidation","availableQuarkList","handleChangeFee","handleRemoveReceiver","myIndex","receivers","receiversExceptIndex","clone","pullAt","handleAddReceiver","calculateRemainingAsset","totalQuantity","currentTotal","addressValidations","handleQuantityValidationCheck","quantityString","quantityValidations","lte","newIndex","newReceivers","handleQuantityChange","returnValue","r","payer","nextProps","isSendingTx","defaultValue","pa","SendAsset","selectedAssetType","sumOfSendingAsset","m","inputUTXO","inputUTXOSum","utxo","inputAssets","fromJSON","lockScriptHash","parameters","tracker","transactionTracker","transactionOutputIndex","orderHash","createTransferInput","outputData","refundAmount","o","AssetTransferOutput","transferTx","createTransferAssetTransaction","_A","signTransactionInput","message","Metadata","gateway","isSentTx","AssetList","handleSendAssetClose","handleSelectAsset","PageState","clearData","ClearData","login","Login","logout","Logout","updateNetworkId","WalletActions","ClearWalletAddresses","UpdateNetwork","ConfirmBackupPhrase","indexToString","selectedPhraseIndex","suffledPhrases","toggleSelectPhrase","selectedPhrasesIndex","sp","shuffle","phrases","onConfirm","join","partial","isEqual","InputPassphrase","handleTOCClick","hasAgreeTOC","checked","handlePPClick","hasAgreePP","handleOnFormSubmit","username","checkUsernameValid","checkPassphraseValid","checkPassphraseConfirm","isSubmitted","passphraseError","isPassphraseValid","passphraseConfirm","passphraseConfirmError","isPassphraseConfirmValid","isUsernameValid","usernameError","handlePassphraseInput","handlePassphraseConfirmInput","handleUsernameInput","Form","htmlFor","ShowBackupPhrase","handleCopyPhrase","CreateWallet","handleSubmitPassphraseInput","mnemonicString","split","currentPage","showSecretPhrase","handleSubmitShowPhrase","confirmSecretPhrase","handleConfirmPhrase","inputPassPhrase","range","globalActions","Footer","onLanguageChange","lang","i18n","changeLanguage","facebook","github","gitter","twitter","medium","telegram","language","ExportBackupPopup","handleButtonClick","handlePassphrase","isValidPassphrase","checkPhrase","backupPhraseString","revealBackupPhrase","Modal","centered","ModalHeader","ModalBody","Button","MenuButton","handleSignout","openExportPopup","exportPopupOpen","popoverOpen","toggleExportPopup","Popover","placement","PopoverBody","NetworkButton","chagneNetworkId","currentNetworkId","replace","getNetworkNameById","MainNet","TestNet","WalletSaver","timer","handleClickOutside","resetTimer","handleTouchOutside","handleKeyDown","startTimer","clearTimer","clearTimeout","Header","Logo","LoginForm","onSignIn","handleOnChagne","handleOnChangePassphrase","handleSignIn","redirectToReferrer","savedNetworkId","savedPassphrase","decrypt","enc","Utf8","getPassphrase","from","location","pathname","Redirect","MintAsset","handleChangeSelectAddress","selectedAddress","checkNameValidation","trim","isNameValid","nameError","checkSupplyValidation","isSupplyValid","supplyError","amountSupply","handleNameChange","handleDescriptionChange","handleIconURLChange","handleSupplyChange","backgroundImage","NotFound","PrivateRoute","checkLogin","isKeyExisted","component","rest","Route","render","RestoreWallet","secretPhrase","splitPassphrases","handleChangeSecretPhraseInput","SelectKeyFile","handleImportButtonHover","isImportBtnHover","handleImportButtopOut","handleCreateButtonHover","isCreateBtnHover","handleCreateButtonOut","onClickRestore","onClickCreateWallet","onMouseEnter","onMouseLeave","CreateNewWalletIconHover","CreateNewWalletIcon","ImportKeyIconHover","ImportKeyIcon","library","add","faPlus","faTrashAlt","faFileDownload","faBars","faChevronLeft","faArrowAltCircleDown","faPlusCircle","faTimes","faInfoCircle","faArrowLeft","faCircle","faEllipsisH","faArrowCircleRight","faArrowCircleDown","faExchangeAlt","faCopy","faArrowRight","faRedoAlt","faExclamationCircle","faQuestionCircle","faAngleRight","faAngleDoubleRight","faAngleLeft","faAngleDoubleLeft","faLock","App","appRef","createRef","basename","ref","Switch","exact","accountInitState","globalInitState","walletInitState","appReducer","combineReducers","action","currentAssetScheme","currentAggsUTXOList","currentUTXO","currentPendingTxList","UpdateBestBlockNumber","SetFetchingBestBlockNumber","currentTxList","loadingBar","loadingBarReducer","rootReducer","Boolean","hostname","REACT_APP_BUILD_TARGET","store","Store","portName","middleware","thunk","logger","storeWithMiddleware","applyMiddlewareChrome","ready","then","ReactDOM","getElementById","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.531ced1e.chunk.js","sourcesContent":["import asset from \"./asset.json\";\nimport backup from \"./backup.json\";\nimport create_confirm from \"./create/confirm.json\";\nimport create_mnemonic from \"./create/mnemonic.json\";\nimport create_seed from \"./create/seed.json\";\nimport create_select from \"./create/select.json\";\nimport main from \"./main.json\";\nimport mint from \"./mint.json\";\nimport restore from \"./restore.json\";\nimport send_asset from \"./send/asset.json\";\nimport send_ccc from \"./send/ccc.json\";\nimport welcome from \"./welcome.json\";\n\nexport default {\n    create: {\n        confirm: create_confirm,\n        mnemonic: create_mnemonic,\n        seed: create_seed,\n        select: create_select\n    },\n    main,\n    mint,\n    restore,\n    send: {\n        asset: send_asset,\n        ccc: send_ccc\n    },\n    welcome,\n    asset,\n    backup\n};\n","import asset from \"./asset.json\";\nimport backup from \"./backup.json\";\nimport create_confirm from \"./create/confirm.json\";\nimport create_mnemonic from \"./create/mnemonic.json\";\nimport create_seed from \"./create/seed.json\";\nimport create_select from \"./create/select.json\";\nimport main from \"./main.json\";\nimport mint from \"./mint.json\";\nimport restore from \"./restore.json\";\nimport send_asset from \"./send/asset.json\";\nimport send_ccc from \"./send/ccc.json\";\nimport welcome from \"./welcome.json\";\n\nexport default {\n    create: {\n        confirm: create_confirm,\n        mnemonic: create_mnemonic,\n        seed: create_seed,\n        select: create_select\n    },\n    main,\n    mint,\n    restore,\n    send: {\n        asset: send_asset,\n        ccc: send_ccc\n    },\n    welcome,\n    asset,\n    backup\n};\n","import i18next from \"i18next\";\nimport languageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport en from \"./en\";\nimport ko from \"./ko\";\n\ni18next\n    .use(languageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: \"en\",\n        detection: {\n            order: [\"querystring\", \"localStorage\"],\n\n            lookupQuerystring: \"lang\",\n            lookupLocalStorage: \"i18nextLang\",\n\n            caches: [\"localStorage\"],\n            excludeCacheFor: [\"cimode\"]\n        },\n        resources: {\n            en,\n            ko\n        }\n    });\n\nexport default i18next;\n","import { NetworkId } from \"codechain-sdk/lib/core/types\";\n\nexport function getNetworkNameById(networkId: NetworkId) {\n    switch (networkId) {\n        case \"cc\":\n            return \"MAINNET\";\n        case \"tc\":\n            return \"HUSKY\";\n        case \"sc\":\n            return \"SALUKI\";\n        case \"wc\":\n            return \"TESTNET\";\n    }\n    throw new Error(\"Unknown networkId\");\n}\n\nexport function getIndexerHost(networkId: NetworkId) {\n    return server.indexer[networkId];\n}\n\nexport function getExplorerHost(networkId: NetworkId) {\n    return server.indexer[networkId];\n}\n\nexport function getCodeChainHost(networkId: NetworkId) {\n    return server.chain[networkId];\n}\n\nconst server = {\n    indexer: {\n        cc: \"https://explorer.codechain.io\",\n        tc: \"https://husky.codechain.io/explorer\",\n        sc: \"https://saluki.codechain.io/explorer\",\n        wc: \"https://corgi.codechain.io/explorer\"\n    },\n    chain: {\n        cc: \"https://rpc.codechain.io\",\n        tc: \"http://52.79.108.1:8080\",\n        sc: \"http://52.78.210.78:8080\",\n        wc: \"https://corgi-rpc.codechain.io\"\n    }\n};\n","import axios from \"axios\";\nimport {\n    AggsUTXODoc,\n    AssetSchemeDoc,\n    TransactionDoc,\n    UTXODoc\n} from \"codechain-indexer-types\";\nimport { H160, Transaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { NetworkId } from \"codechain-sdk/lib/core/types\";\nimport { PlatformAccount } from \"../model/address\";\nimport { getIndexerHost } from \"../utils/network\";\n\nasync function getRequest<T>(url: string) {\n    const response = await axios.get<T>(url);\n    if (response.status >= 200 && response.status < 300) {\n        return response.data;\n    }\n    throw new Error(response.statusText);\n}\n\nasync function postRequest<T>(url: string, body: any) {\n    const response = await axios.post<T>(url, body);\n    if (response.status >= 200 && response.status < 300) {\n        return response.data;\n    }\n    throw new Error(response.statusText);\n}\n\nexport async function getAggsUTXOList(\n    address: string,\n    networkId: NetworkId\n): Promise<AggsUTXODoc[]> {\n    const apiHost = getIndexerHost(networkId);\n    const aggsUTXOList = await getRequest<AggsUTXODoc[]>(\n        `${apiHost}/api/aggs-utxo?address=${address}`\n    );\n    // FIXME: https://github.com/CodeChain-io/codechain-indexer/issues/59\n    return Promise.all(\n        aggsUTXOList.map(async (aggsUTXO: any) => {\n            const assetScheme = await getAssetByAssetType(\n                new H160(aggsUTXO.assetType),\n                networkId\n            );\n            aggsUTXO.assetScheme = assetScheme;\n            return aggsUTXO;\n        })\n    );\n}\n\nexport async function getAssetByAssetType(\n    assetType: H160,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    return getRequest<AssetSchemeDoc>(\n        `${apiHost}/api/asset-scheme/${assetType.value}`\n    );\n}\n\nexport async function getPlatformAccount(\n    address: string,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    const response = await getRequest<{ balance: string; seq: string }>(\n        `${apiHost}/api/account/${address}`\n    );\n\n    if (response) {\n        return {\n            balance: new U64(response.balance),\n            seq: new U64(response.seq)\n        } as PlatformAccount;\n    } else {\n        return {\n            balance: new U64(0),\n            seq: new U64(0)\n        } as PlatformAccount;\n    }\n}\n\nexport async function getUTXOListByAssetType(\n    address: string,\n    assetType: H160,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    return await getRequest<UTXODoc[]>(\n        `${apiHost}/api/utxo?assetType=${\n            assetType.value\n        }&address=${address}&itemsPerPage=100&page=1`\n    );\n}\n\nexport function sendTxToGateway(tx: Transaction, gatewayURl: string) {\n    return postRequest<void>(`${gatewayURl}`, {\n        tx\n    });\n}\n\nexport async function getPendingTransactions(\n    address: string,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    const transactions = await getRequest<TransactionDoc[]>(\n        `${apiHost}/api/pending-tx?page=1&itemsPerPage=100&address=${address}`\n    );\n\n    // FIXME: This is temporary code. https://github.com/CodeChain-io/codechain-indexer/issues/5\n    await Promise.all(\n        transactions.map(async transaction => {\n            if (transaction.type === \"transferAsset\") {\n                await Promise.all(\n                    transaction.transferAsset.outputs.map(async output => {\n                        const assetScheme: any = await getRequest<\n                            AssetSchemeDoc\n                        >(`${apiHost}/api/asset-scheme/${output.assetType}`);\n                        output.assetScheme = assetScheme;\n                    })\n                );\n            }\n        })\n    );\n    return transactions;\n}\n\nexport async function getTxsByAddress(\n    address: string,\n    page: number,\n    itemsPerPage: number,\n    networkId: NetworkId,\n    assetType?: H160\n) {\n    const apiHost = getIndexerHost(networkId);\n    let query = `${apiHost}/api/tx?address=${address}&page=${page}&itemsPerPage=${itemsPerPage}`;\n    if (assetType) {\n        query += `&assetType=${assetType.value}`;\n    }\n    const transactions = await getRequest<TransactionDoc[]>(query);\n\n    // FIXME: This is temporary code. https://github.com/CodeChain-io/codechain-indexer/issues/5\n    await Promise.all(\n        transactions.map(async transaction => {\n            if (transaction.type === \"transferAsset\") {\n                await Promise.all(\n                    transaction.transferAsset.outputs.map(async output => {\n                        const assetScheme: any = await getRequest<\n                            AssetSchemeDoc\n                        >(`${apiHost}/api/asset-scheme/${output.assetType}`);\n                        output.assetScheme = assetScheme;\n                    })\n                );\n            }\n        })\n    );\n    return transactions;\n}\n","import CryptoJS from \"crypto-js\";\nimport _ from \"lodash\";\nimport { AddressType, NetworkId } from \"../model/address\";\n\nconst localstorageKeyOfPlatform = \"platformKeys\";\nconst localstorageKeyOfAsset = \"assetKeys\";\nconst networkIdKey = \"netowrkId\";\nconst passphraseKey = \"authKey\";\nexport interface StoredKey {\n    pathIndex: number;\n    type: AddressType;\n    key: string;\n}\n\nfunction getStorageKeyOfPlatform(networkId: NetworkId) {\n    return `${localstorageKeyOfPlatform}_${networkId}`;\n}\n\nfunction getStorageKeyOfAsset(networkId: NetworkId) {\n    return `${localstorageKeyOfAsset}_${networkId}`;\n}\n\nexport function getPlatformKeys(networkId: NetworkId): StoredKey[] | null {\n    const platformKeysString = localStorage.getItem(\n        getStorageKeyOfPlatform(networkId)\n    );\n    if (platformKeysString) {\n        try {\n            return JSON.parse(platformKeysString);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return null;\n}\n\nexport function getAssetKeys(networkId: NetworkId): StoredKey[] | null {\n    const assetKeysString = localStorage.getItem(\n        getStorageKeyOfAsset(networkId)\n    );\n    if (assetKeysString) {\n        try {\n            return JSON.parse(assetKeysString);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return null;\n}\n\nexport function clearWalletKeys() {\n    _.each([\"cc\", \"tc\", \"wc\", \"sc\"], network => {\n        localStorage.removeItem(getStorageKeyOfAsset(network as NetworkId));\n        localStorage.removeItem(getStorageKeyOfPlatform(network as NetworkId));\n    });\n}\n\nexport function clearPassphrase() {\n    sessionStorage.removeItem(passphraseKey);\n}\n\nexport function saveNetworkId(netowrkId: NetworkId) {\n    sessionStorage.setItem(networkIdKey, netowrkId);\n}\n\nexport function getNetworkId(): NetworkId {\n    return sessionStorage.getItem(networkIdKey) as NetworkId;\n}\n\nexport function savePlatformKeys(\n    platformKeys: StoredKey[],\n    networkId: NetworkId\n) {\n    localStorage.setItem(\n        getStorageKeyOfPlatform(networkId),\n        JSON.stringify(platformKeys)\n    );\n}\n\nexport function saveAssetKeys(assetKeys: StoredKey[], netowrkId: NetworkId) {\n    localStorage.setItem(\n        getStorageKeyOfAsset(netowrkId),\n        JSON.stringify(assetKeys)\n    );\n}\n\nconst cryptoKey = \"secret key\";\nexport function savePassphrase(passphrase: string) {\n    const encryptedKey = CryptoJS.AES.encrypt(passphrase, cryptoKey).toString();\n    sessionStorage.setItem(passphraseKey, encryptedKey);\n}\n\nexport function getPassphrase() {\n    const encryptedKey = sessionStorage.getItem(passphraseKey);\n    if (encryptedKey) {\n        return CryptoJS.AES.decrypt(encryptedKey, cryptoKey).toString(\n            CryptoJS.enc.Utf8\n        );\n    }\n    return null;\n}\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\n\nexport type NetworkId = \"cc\" | \"tc\" | \"sc\" | \"wc\";\n\nexport interface WalletAddress {\n    index: number;\n    type: AddressType;\n    address: string;\n}\n\nexport enum AddressType {\n    Platform,\n    Asset\n}\n\nexport interface PlatformAccount {\n    balance: U64;\n    seq: U64;\n}\n\nexport function isAssetAddress(address: string) {\n    return address[2] === \"a\";\n}\n\nexport function isPlatformAddress(address: string) {\n    return address[2] === \"c\";\n}\n","import { CCKey } from \"codechain-keystore\";\nimport {\n    AssetTransferAddress,\n    PlatformAddress\n} from \"codechain-sdk/lib/core/classes\";\nimport { blake160 } from \"codechain-sdk/lib/utils\";\nimport _ from \"lodash\";\nimport { getAggsUTXOList, getPlatformAccount } from \"../networks/Api\";\nimport {\n    getAssetKeys,\n    getPlatformKeys,\n    saveAssetKeys,\n    savePlatformKeys,\n    StoredKey\n} from \"../utils/storage\";\nimport { AddressType, NetworkId, WalletAddress } from \"./address\";\n\nlet dbType = \"persistent\";\nif (process.env.CI) {\n    dbType = \"in-memory\";\n}\n\nlet globalCCKey: CCKey;\nexport async function getCCKey() {\n    if (!globalCCKey) {\n        globalCCKey = await CCKey.create({ dbType });\n    }\n    return globalCCKey;\n}\n\nexport async function clearKeystore() {\n    const ccKey = await getCCKey();\n    await ccKey.clear();\n}\n\nexport async function createSeed(passphrase: string) {\n    const ccKey = await getCCKey();\n    return await ccKey.hdwseed.createSeed({ passphrase, seedLength: 128 });\n}\n\nexport async function getFirstSeedHash() {\n    const ccKey = await getCCKey();\n    const seedHashes = await ccKey.hdwseed.getSeedHashes();\n    return seedHashes[0];\n}\n\nexport async function exportMnemonic(passphrase: string) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const mnemonic = await ccKey.hdwseed.exportMnemonic({\n        seedHash,\n        passphrase\n    });\n    return mnemonic;\n}\n\nexport async function importMnemonic(mnemonic: string, passphrase: string) {\n    const ccKey = await getCCKey();\n    await ccKey.hdwseed.importMnemonic({ mnemonic, passphrase });\n}\n\nexport async function isKeystoreExisted() {\n    return CCKey.exist({ dbType });\n}\n\n// m / purpose' / coin_type' / account' / change / address_index\nconst platformAddressPath = \"m/44'/3276/0'/0/\";\nconst assetAddressPath = \"m/44'/3276/1'/0/\";\nconst restoringCheckingRange = 10;\n\nexport function getPlatformAddressPath(index: number) {\n    return platformAddressPath + index;\n}\n\nexport function getAssetAddressPath(index: number) {\n    return assetAddressPath + index;\n}\n\nexport async function restorePlatformAddresses(\n    passphrase: string,\n    networkId: NetworkId\n): Promise<WalletAddress[]> {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    let currentPath = 0;\n    const platformAddresses: WalletAddress[] = [];\n    const platformKeys: StoredKey[] = [];\n    let lastValidPlatfromPathIndex: number | undefined | null;\n    while (currentPath < restoringCheckingRange) {\n        const platformPubkey = await ccKey.hdwseed.getPublicKeyFromSeed({\n            seedHash,\n            path: platformAddressPath + currentPath,\n            passphrase\n        });\n        const key = blake160(platformPubkey);\n        const address = PlatformAddress.fromAccountId(key, {\n            networkId\n        }).value;\n        const account = await getPlatformAccount(address, networkId);\n        if (!account.seq.eq(0) || !account.balance.eq(0)) {\n            lastValidPlatfromPathIndex = currentPath;\n        }\n        platformAddresses.push({\n            index: currentPath,\n            address,\n            type: AddressType.Platform\n        });\n        platformKeys.push({\n            pathIndex: currentPath,\n            type: AddressType.Platform,\n            key\n        });\n        currentPath += 1;\n    }\n    let retValue: WalletAddress[];\n    let retKeys: StoredKey[];\n    if (lastValidPlatfromPathIndex == null) {\n        retValue = platformAddresses.slice(0, 1);\n        retKeys = platformKeys.slice(0, 1);\n    } else {\n        retValue = platformAddresses.slice(0, lastValidPlatfromPathIndex + 1);\n        retKeys = platformKeys.slice(0, lastValidPlatfromPathIndex + 1);\n    }\n    savePlatformKeys(retKeys, networkId);\n    return retValue;\n}\n\nexport async function createPlatformAddress(\n    passphrase: string,\n    networkId: NetworkId\n) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const savedPlatformKeys = getPlatformKeys(networkId);\n    let newPathIndex;\n    if (savedPlatformKeys && savedPlatformKeys.length > 0) {\n        newPathIndex = _.last(savedPlatformKeys)!.pathIndex + 1;\n    } else {\n        newPathIndex = 0;\n    }\n    const platformPubkey = await ccKey.hdwseed.getPublicKeyFromSeed({\n        seedHash,\n        path: platformAddressPath + newPathIndex,\n        passphrase\n    });\n    const key = blake160(platformPubkey);\n    if (savedPlatformKeys && savedPlatformKeys.length > 0) {\n        savePlatformKeys(\n            [\n                ...savedPlatformKeys,\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    } else {\n        savePlatformKeys(\n            [\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    }\n    const address = PlatformAddress.fromAccountId(key, {\n        networkId\n    }).value;\n    return {\n        index: newPathIndex,\n        address,\n        type: AddressType.Platform\n    };\n}\n\nexport async function createAssetAddress(\n    passphrase: string,\n    networkId: NetworkId\n) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const savedAssetKeys = getAssetKeys(networkId);\n    let newPathIndex;\n    if (savedAssetKeys && savedAssetKeys.length > 0) {\n        newPathIndex = _.last(savedAssetKeys)!.pathIndex + 1;\n    } else {\n        newPathIndex = 0;\n    }\n    const assetPubKey = await ccKey.hdwseed.getPublicKeyFromSeed({\n        seedHash,\n        path: assetAddressPath + newPathIndex,\n        passphrase\n    });\n    const key = blake160(assetPubKey);\n    if (savedAssetKeys && savedAssetKeys.length > 0) {\n        saveAssetKeys(\n            [\n                ...savedAssetKeys,\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    } else {\n        saveAssetKeys(\n            [\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    }\n    const address = AssetTransferAddress.fromTypeAndPayload(1, key, {\n        networkId\n    }).value;\n    return {\n        index: newPathIndex,\n        address,\n        type: AddressType.Asset\n    };\n}\n\nexport async function checkPassphrase(passphrase: string) {\n    const ccKey = await getCCKey();\n    const seedHashes = await ccKey.hdwseed.getSeedHashes();\n    const seedHash = seedHashes[0];\n    try {\n        await ccKey.hdwseed.exportMnemonic({ seedHash, passphrase });\n        return true;\n    } catch (e) {\n        console.log(e);\n    }\n    return false;\n}\n\nexport async function restoreAssetAddresses(\n    passphrase: string,\n    networkId: NetworkId\n): Promise<WalletAddress[]> {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    let currentPath = 0;\n    const assetAddresses: WalletAddress[] = [];\n    const assetKeys: StoredKey[] = [];\n    let lastValidAssetPathIndex: number | undefined | null;\n    while (currentPath < restoringCheckingRange) {\n        const assetPubKey = await ccKey.hdwseed.getPublicKeyFromSeed({\n            seedHash,\n            path: assetAddressPath + currentPath,\n            passphrase\n        });\n        const key = blake160(assetPubKey);\n        const address = AssetTransferAddress.fromTypeAndPayload(1, key, {\n            networkId\n        }).value;\n        const aggsUTXO = await getAggsUTXOList(address, networkId);\n        if (aggsUTXO.length !== 0) {\n            lastValidAssetPathIndex = currentPath;\n        }\n        assetAddresses.push({\n            index: currentPath,\n            address,\n            type: AddressType.Asset\n        });\n        assetKeys.push({\n            type: AddressType.Asset,\n            pathIndex: currentPath,\n            key\n        });\n        currentPath += 1;\n    }\n\n    let retValue: WalletAddress[];\n    let retKeys: StoredKey[];\n    if (lastValidAssetPathIndex == null) {\n        retValue = assetAddresses.slice(0, 1);\n        retKeys = assetKeys.slice(0, 1);\n    } else {\n        retValue = assetAddresses.slice(0, lastValidAssetPathIndex + 1);\n        retKeys = assetKeys.slice(0, lastValidAssetPathIndex + 1);\n    }\n    saveAssetKeys(retKeys, networkId);\n    return retValue;\n}\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { NetworkId } from \"../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../model/keystore\";\nimport { getCodeChainHost } from \"./network\";\nimport { getAssetKeys, getPlatformKeys } from \"./storage\";\n\nfunction getAggsQuark(address: string, txList: TransactionDoc[]) {\n    return _.reduce(\n        txList,\n        (memo, tx: TransactionDoc) => {\n            let output = new U64(0);\n            let input = new U64(0);\n            if (tx.type === \"pay\") {\n                const quantity = tx.pay.quantity;\n                if (tx.pay.receiver === address) {\n                    output = U64.plus(output, quantity);\n                }\n                if (tx.signer === address) {\n                    input = U64.plus(input, quantity);\n                }\n            }\n            if (tx.signer === address) {\n                const fee = tx.fee;\n                input = U64.plus(input, fee);\n            }\n            return {\n                input: U64.plus(memo.input, input),\n                output: U64.plus(memo.output, output)\n            };\n        },\n        {\n            input: new U64(0),\n            output: new U64(0)\n        }\n    );\n}\n\nfunction getAggsAsset(\n    address: string,\n    transaction: TransactionDoc\n): {\n    assetType: string;\n    inputQuantities: U64;\n    outputQuantities: U64;\n    burnQuantities: U64;\n}[] {\n    if (transaction.type === \"mintAsset\") {\n        if (transaction.mintAsset.recipient === address) {\n            return [\n                {\n                    assetType: transaction.mintAsset.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(transaction.mintAsset.supply),\n                    burnQuantities: new U64(0)\n                }\n            ];\n        } else {\n            return [];\n        }\n    } else if (transaction.type === \"transferAsset\") {\n        const filteredInputs = _.filter(\n            transaction.transferAsset.inputs,\n            input => input.prevOut.owner === address\n        );\n\n        const filteredBurns = _.filter(\n            transaction.transferAsset.burns,\n            burn => burn.prevOut.owner === address\n        );\n\n        const filteredOutputs = _.filter(\n            transaction.transferAsset.outputs,\n            output => output.owner === address\n        );\n        const results: {\n            [assetType: string]: {\n                assetType: string;\n                inputQuantities: U64;\n                outputQuantities: U64;\n                burnQuantities: U64;\n            };\n        } = {};\n        _.each(filteredInputs, filteredInput => {\n            if (results[filteredInput.prevOut.assetType]) {\n                const before = results[filteredInput.prevOut.assetType];\n                const newObject = {\n                    ...before,\n                    inputQuantities: U64.plus(\n                        before.inputQuantities,\n                        filteredInput.prevOut.quantity\n                    )\n                };\n                results[filteredInput.prevOut.assetType] = newObject;\n            } else {\n                results[filteredInput.prevOut.assetType] = {\n                    assetType: filteredInput.prevOut.assetType,\n                    inputQuantities: new U64(filteredInput.prevOut.quantity),\n                    outputQuantities: new U64(0),\n                    burnQuantities: new U64(0)\n                };\n            }\n        });\n        _.each(filteredBurns, filteredBurn => {\n            if (results[filteredBurn.prevOut.assetType]) {\n                const before = results[filteredBurn.prevOut.assetType];\n                const newObject = {\n                    ...before,\n                    burnQuantities: U64.plus(\n                        before.burnQuantities,\n                        filteredBurn.prevOut.quantity\n                    )\n                };\n                results[filteredBurn.prevOut.assetType] = newObject;\n            } else {\n                results[filteredBurn.prevOut.assetType] = {\n                    assetType: filteredBurn.prevOut.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(0),\n                    burnQuantities: new U64(filteredBurn.prevOut.quantity)\n                };\n            }\n        });\n        _.each(filteredOutputs, filteredOutput => {\n            if (results[filteredOutput.assetType]) {\n                const before = results[filteredOutput.assetType];\n                const newObject = {\n                    ...before,\n                    outputQuantities: U64.plus(\n                        before.outputQuantities,\n                        filteredOutput.quantity\n                    )\n                };\n                results[filteredOutput.assetType] = newObject;\n            } else {\n                results[filteredOutput.assetType] = {\n                    assetType: filteredOutput.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(filteredOutput.quantity),\n                    burnQuantities: new U64(0)\n                };\n            }\n        });\n        return _.values(results);\n    }\n    return [];\n}\n\nasync function createMintAssetTx(data: {\n    name: string;\n    supply: U64;\n    iconURL?: string;\n    description?: string;\n    recipient: string;\n    networkId: NetworkId;\n    feePayer: string;\n    fee: U64;\n    passphrase: string;\n}) {\n    const ccKey = await getCCKey();\n    const storedPlatformKeys = getPlatformKeys(data.networkId);\n    const storedAssetKeys = getAssetKeys(data.networkId);\n    const seedHash = await getFirstSeedHash();\n    const platformKeyMapping = _.reduce(\n        storedPlatformKeys,\n        (memo, storedPlatformKey) => {\n            return {\n                ...memo,\n                [storedPlatformKey.key]: {\n                    seedHash,\n                    path: getPlatformAddressPath(storedPlatformKey.pathIndex)\n                }\n            };\n        },\n        {}\n    );\n    const assetKeyMapping = _.reduce(\n        storedAssetKeys,\n        (memo, storedAssetKey) => {\n            return {\n                ...memo,\n                [storedAssetKey.key]: {\n                    seedHash,\n                    path: getAssetAddressPath(storedAssetKey.pathIndex)\n                }\n            };\n        },\n        {}\n    );\n    const keyStore = new LocalKeyStore(ccKey, {\n        platform: platformKeyMapping,\n        asset: assetKeyMapping\n    });\n\n    const sdk = new SDK({\n        server: getCodeChainHost(data.networkId),\n        networkId: data.networkId\n    });\n    const tx = sdk.core.createMintAssetTransaction({\n        scheme: {\n            shardId: 0,\n            metadata: JSON.stringify({\n                name: data.name,\n                description: data.description,\n                icon_url: data.iconURL\n            }),\n            supply: data.supply\n        },\n        recipient: data.recipient\n    });\n\n    const seq = await sdk.rpc.chain.getSeq(data.feePayer);\n\n    const { transactions } = await sdk.rpc.chain.getPendingTransactions();\n    const newSeq =\n        seq +\n        transactions.filter(\n            t =>\n                t.getSignerAddress({ networkId: data.networkId }).toString() ===\n                data.feePayer\n        ).length;\n\n    const signedTransaction = await sdk.key.signTransaction(tx, {\n        account: data.feePayer,\n        keyStore,\n        fee: data.fee,\n        seq: newSeq,\n        passphrase: data.passphrase\n    });\n    return signedTransaction;\n}\n\nexport const TxUtil = { getAggsAsset, getAggsQuark, createMintAssetTx };\n","import { AggsUTXODoc, AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { Action, ActionType } from \"./assetActions\";\n\nexport interface AssetState {\n    assetScheme: {\n        [assetType: string]: {\n            data?: AssetSchemeDoc;\n            isFetching: boolean;\n        } | null;\n    };\n    aggsUTXOList: {\n        [address: string]: {\n            data?: AggsUTXODoc[] | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n    UTXOList: {\n        [id: string]: {\n            data?: UTXODoc[] | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n    availableAssets: {\n        [address: string]:\n            | {\n                  assetType: string;\n                  quantities: U64;\n              }[]\n            | null;\n    };\n}\n\nexport const assetInitState: AssetState = {\n    assetScheme: {},\n    aggsUTXOList: {},\n    UTXOList: {},\n    availableAssets: {}\n};\n\nexport const getIdForCacheUTXO = (address: string, assetType: H160) => {\n    return `${address}-${assetType.value}`;\n};\n\nexport const assetReducer = (state = assetInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.CacheAssetScheme: {\n            const assetType = action.data.assetType;\n            const currentAssetScheme = {\n                data: action.data.assetScheme,\n                isFetching: false\n            };\n            const assetScheme = {\n                ...state.assetScheme,\n                [assetType]: currentAssetScheme\n            };\n            return {\n                ...state,\n                assetScheme\n            };\n        }\n        case ActionType.SetFetchingAssetScheme: {\n            const assetType = action.data.assetType;\n            const currentAssetScheme = {\n                ...state.assetScheme[assetType],\n                isFetching: true\n            };\n            const assetScheme = {\n                ...state.assetScheme,\n                [assetType]: currentAssetScheme\n            };\n            return {\n                ...state,\n                assetScheme\n            };\n        }\n        case ActionType.SetFetchingAggsUTXOList: {\n            const address = action.data.address;\n            const currentAggsUTXOList = {\n                ...state.aggsUTXOList[address],\n                isFetching: true\n            };\n            const aggsUTXOList = {\n                ...state.aggsUTXOList,\n                [address]: currentAggsUTXOList\n            };\n            return {\n                ...state,\n                aggsUTXOList\n            };\n        }\n        case ActionType.CacheAggsUTXOList: {\n            const address = action.data.address;\n            const currentAggsUTXOList = {\n                data: action.data.aggsUTXOList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const aggsUTXOList = {\n                ...state.aggsUTXOList,\n                [address]: currentAggsUTXOList\n            };\n            return {\n                ...state,\n                aggsUTXOList\n            };\n        }\n        case ActionType.CacheUTXOList: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdForCacheUTXO(address, assetType);\n            const currentUTXO = {\n                data: action.data.UTXOList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const UTXOList = {\n                ...state.UTXOList,\n                [id]: currentUTXO\n            };\n            return {\n                ...state,\n                UTXOList\n            };\n        }\n        case ActionType.SetFetchingUTXOList: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdForCacheUTXO(address, assetType);\n            const currentUTXO = {\n                ...state.UTXOList[id],\n                isFetching: true\n            };\n            const UTXOList = {\n                ...state.UTXOList,\n                [id]: currentUTXO\n            };\n            return {\n                ...state,\n                UTXOList\n            };\n        }\n        case ActionType.CacheAvailableAssets: {\n            const address = action.data.address;\n            const availableAssets = {\n                ...state.availableAssets,\n                [address]: action.data.availableAssets\n            };\n            return {\n                ...state,\n                availableAssets\n            };\n        }\n    }\n    return state;\n};\n","import { AggsUTXODoc, AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport {\n    getAggsUTXOList,\n    getAssetByAssetType,\n    getUTXOListByAssetType\n} from \"../../networks/Api\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport chainActions from \"../chain/chainActions\";\nimport { getIdForCacheUTXO } from \"./assetReducer\";\n\nexport type Action =\n    | CacheAssetScheme\n    | CacheAggsUTXOList\n    | SetFetchingAggsUTXOList\n    | SetFetchingAssetScheme\n    | CacheUTXOList\n    | SetFetchingUTXOList\n    | CacheAvailableAssets;\n\nexport enum ActionType {\n    CacheAssetScheme = \"CacheAssetScheme\",\n    CacheAggsUTXOList = \"CacheAggsUTXOList\",\n    SetFetchingAggsUTXOList = \"SetFetchingAggsUTXOList\",\n    SetFetchingAssetScheme = \"SetFetchingAssetScheme\",\n    SetFetchingUTXOList = \"SetFetchingUTXOList\",\n    CacheUTXOList = \"CacheUTXOList\",\n    CacheAvailableAssets = \"CacheAvailableAssets\"\n}\n\nexport interface CacheAssetScheme {\n    type: ActionType.CacheAssetScheme;\n    data: {\n        assetType: string;\n        assetScheme: AssetSchemeDoc;\n    };\n}\n\nexport interface CacheAggsUTXOList {\n    type: ActionType.CacheAggsUTXOList;\n    data: {\n        address: string;\n        aggsUTXOList: AggsUTXODoc[];\n    };\n}\n\nexport interface SetFetchingAggsUTXOList {\n    type: ActionType.SetFetchingAggsUTXOList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingAssetScheme {\n    type: ActionType.SetFetchingAssetScheme;\n    data: {\n        assetType: string;\n    };\n}\n\nexport interface SetFetchingUTXOList {\n    type: ActionType.SetFetchingUTXOList;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheUTXOList {\n    type: ActionType.CacheUTXOList;\n    data: {\n        address: string;\n        assetType: H160;\n        UTXOList: UTXODoc[];\n    };\n}\n\nexport interface CacheAvailableAssets {\n    type: ActionType.CacheAvailableAssets;\n    data: {\n        address: string;\n        availableAssets: {\n            assetType: string;\n            quantities: U64;\n        }[];\n    };\n}\n\nconst cacheAssetScheme = (\n    assetType: H160,\n    assetScheme: AssetSchemeDoc\n): CacheAssetScheme => ({\n    type: ActionType.CacheAssetScheme,\n    data: {\n        assetType: assetType.value,\n        assetScheme\n    }\n});\n\nconst cacheAggsUTXOList = (\n    address: string,\n    aggsUTXOList: AggsUTXODoc[]\n): CacheAggsUTXOList => ({\n    type: ActionType.CacheAggsUTXOList,\n    data: {\n        address,\n        aggsUTXOList\n    }\n});\n\nconst cacheUTXOList = (\n    address: string,\n    assetType: H160,\n    UTXOList: UTXODoc[]\n): CacheUTXOList => ({\n    type: ActionType.CacheUTXOList,\n    data: {\n        address,\n        assetType,\n        UTXOList\n    }\n});\n\nconst cacheAvailableAssets = (\n    address: string,\n    availableAssets: {\n        assetType: string;\n        quantities: U64;\n    }[]\n): CacheAvailableAssets => ({\n    type: ActionType.CacheAvailableAssets,\n    data: {\n        address,\n        availableAssets\n    }\n});\n\nconst setFetchingAssetScheme = (assetType: H160): SetFetchingAssetScheme => ({\n    type: ActionType.SetFetchingAssetScheme,\n    data: {\n        assetType: assetType.value\n    }\n});\n\nconst setFetchingAggsUTXOList = (address: string): SetFetchingAggsUTXOList => ({\n    type: ActionType.SetFetchingAggsUTXOList,\n    data: {\n        address\n    }\n});\n\nconst setFetchingUTXOList = (\n    address: string,\n    assetType: H160\n): SetFetchingUTXOList => ({\n    type: ActionType.SetFetchingUTXOList,\n    data: {\n        address,\n        assetType\n    }\n});\n\nconst fetchAssetSchemeIfNeed = (assetType: H160) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAssetScheme = getState().assetReducer.assetScheme[\n            assetType.value\n        ];\n        if (cachedAssetScheme && cachedAssetScheme.isFetching) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAssetScheme(assetType));\n            const networkId = getState().globalReducer.networkId;\n            const responseAssetScheme = await getAssetByAssetType(\n                assetType,\n                networkId\n            );\n            dispatch(cacheAssetScheme(assetType, responseAssetScheme));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAggsUTXOListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAggsUTXOList = getState().assetReducer.aggsUTXOList[\n            address\n        ];\n        if (cachedAggsUTXOList && cachedAggsUTXOList.isFetching) {\n            return;\n        }\n        if (\n            cachedAggsUTXOList &&\n            cachedAggsUTXOList.updatedAt &&\n            +new Date() - cachedAggsUTXOList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAggsUTXOList(address));\n            const networkId = getState().globalReducer.networkId;\n            const UTXOResponse = await getAggsUTXOList(address, networkId);\n            dispatch(cacheAggsUTXOList(address, UTXOResponse));\n\n            _.each(UTXOResponse, (u: any) => {\n                dispatch(\n                    cacheAssetScheme(new H160(u.assetType), u.assetScheme)\n                );\n            });\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                dispatch(calculateAvailableAssets(address));\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchUTXOListIfNeed = (address: string, assetType: H160) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const id = getIdForCacheUTXO(address, assetType);\n        const UTXOList = getState().assetReducer.UTXOList[id];\n        const cachedUTXOList = UTXOList && UTXOList[assetType.value];\n        if (cachedUTXOList && cachedUTXOList.isFetching) {\n            return;\n        }\n        if (\n            cachedUTXOList &&\n            cachedUTXOList.updatedAt &&\n            +new Date() - cachedUTXOList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingUTXOList(address, assetType));\n            const networkId = getState().globalReducer.networkId;\n            const UTXOListResponse = await getUTXOListByAssetType(\n                address,\n                assetType,\n                networkId\n            );\n            dispatch(cacheUTXOList(address, assetType, UTXOListResponse));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAvailableAssets = (address: string) => {\n    return async (dispatch: ThunkDispatch<ReducerConfigure, void, Action>) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n        dispatch(chainActions.fetchTxListIfNeed(address));\n        dispatch(fetchAggsUTXOListIfNeed(address));\n    };\n};\n\nconst calculateAvailableAssets = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const addressUTXOListObj = getState().assetReducer.aggsUTXOList[\n            address\n        ];\n        const pendingTxListObj = getState().chainReducer.pendingTxList[address];\n        const txListObject = getState().chainReducer.txList[address];\n\n        const addressUTXOList = addressUTXOListObj && addressUTXOListObj.data;\n        const pendingTxList = pendingTxListObj && pendingTxListObj.data;\n        const txList = txListObject && txListObject.data;\n\n        if (!addressUTXOList || !pendingTxList || !txList) {\n            return;\n        }\n\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        const aggregatedPendingAsset = _.flatMap(\n            validPendingTxList,\n            pendingTx => {\n                return TxUtil.getAggsAsset(address, pendingTx);\n            }\n        );\n\n        const availableAssets: {\n            [assetType: string]: {\n                assetType: string;\n                quantities: U64;\n            };\n        } = {};\n\n        _.each(addressUTXOList, addressConfirmedUTXO => {\n            availableAssets[addressConfirmedUTXO.assetType] = {\n                assetType: addressConfirmedUTXO.assetType,\n                quantities: new U64(addressConfirmedUTXO.totalAssetQuantity)\n            };\n        });\n        _.each(aggregatedPendingAsset, asset => {\n            if (\n                asset.outputQuantities.lt(\n                    U64.plus(asset.inputQuantities, asset.burnQuantities)\n                )\n            ) {\n                const quantity = U64.minus(\n                    U64.plus(asset.inputQuantities, asset.burnQuantities),\n                    asset.outputQuantities\n                );\n                if (!availableAssets[asset.assetType]) {\n                    availableAssets[asset.assetType] = {\n                        assetType: asset.assetType,\n                        quantities: new U64(0)\n                    };\n                }\n                availableAssets[asset.assetType] = {\n                    ...availableAssets[asset.assetType],\n                    quantities: U64.minus(\n                        availableAssets[asset.assetType].quantities,\n                        quantity\n                    )\n                };\n            }\n        });\n        const availableAssetsValue = _.filter(\n            _.values(availableAssets),\n            asset => !asset.quantities.eq(0)\n        );\n        dispatch(cacheAvailableAssets(address, availableAssetsValue));\n    };\n};\n\nexport default {\n    cacheAssetScheme,\n    fetchAggsUTXOListIfNeed,\n    fetchAssetSchemeIfNeed,\n    fetchUTXOListIfNeed,\n    calculateAvailableAssets,\n    fetchAvailableAssets\n};\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { H160 } from \"codechain-sdk/lib/core/classes\";\nimport { Action, ActionType } from \"./chainActions\";\n\nexport interface ChainState {\n    pendingTxList: {\n        [address: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    txList: {\n        [address: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    pendingTxListById: {\n        [id: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    txListById: {\n        [id: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    bestBlockNumber?: {\n        data?: number | null;\n        isFetching: boolean;\n        updatedAt?: number | null;\n    } | null;\n}\n\nexport const chainInitState: ChainState = {\n    pendingTxList: {},\n    txList: {},\n    bestBlockNumber: undefined,\n    txListById: {},\n    pendingTxListById: {}\n};\n\nexport const getIdByAddressAssetType = (address: string, assetType: H160) => {\n    return `${address}-${assetType.value}`;\n};\n\nexport const chainReducer = (\n    state = chainInitState,\n    action: Action\n): ChainState => {\n    switch (action.type) {\n        case ActionType.CachePendingTxList: {\n            const address = action.data.address;\n            const currentPendingTxList = {\n                data: action.data.pendingTxList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const pendingTxList = {\n                ...state.pendingTxList,\n                [address]: currentPendingTxList\n            };\n            return {\n                ...state,\n                pendingTxList\n            };\n        }\n        case ActionType.SetFetchingPendingTxList: {\n            const address = action.data.address;\n            const currentPendingTxList = {\n                ...state.pendingTxList[address],\n                isFetching: true\n            };\n            const pendingTxList = {\n                ...state.pendingTxList,\n                [address]: currentPendingTxList\n            };\n            return {\n                ...state,\n                pendingTxList\n            };\n        }\n        case ActionType.UpdateBestBlockNumber: {\n            return {\n                ...state,\n                bestBlockNumber: {\n                    data: action.data.bestBlockNumber,\n                    updatedAt: +new Date(),\n                    isFetching: false\n                }\n            };\n        }\n        case ActionType.SetFetchingBestBlockNumber: {\n            return {\n                ...state,\n                bestBlockNumber: {\n                    ...state.bestBlockNumber,\n                    isFetching: true\n                }\n            };\n        }\n        case ActionType.CacheTxList: {\n            const address = action.data.address;\n            const currentTxList = {\n                data: action.data.txList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const txList = {\n                ...state.txList,\n                [address]: currentTxList\n            };\n            return {\n                ...state,\n                txList\n            };\n        }\n        case ActionType.SetFetchingTxList: {\n            const address = action.data.address;\n            const currentTxList = {\n                ...state.txList[address],\n                isFetching: true\n            };\n            const txList = {\n                ...state.txList,\n                [address]: currentTxList\n            };\n            return {\n                ...state,\n                txList\n            };\n        }\n        case ActionType.SetFetchingTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            const currentTxList = {\n                ...state.txListById[id],\n                isFetching: true\n            };\n            const txListById = {\n                ...state.txListById,\n                [id]: currentTxList\n            };\n            return {\n                ...state,\n                txListById\n            };\n        }\n        case ActionType.CacheTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            const currentTxList = {\n                data: action.data.txList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const txListById = {\n                ...state.txListById,\n                [id]: currentTxList\n            };\n            return {\n                ...state,\n                txListById\n            };\n        }\n    }\n    return state;\n};\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport {\n    H160,\n    SignedTransaction,\n    Transaction\n} from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { isAssetAddress, isPlatformAddress } from \"../../model/address\";\nimport {\n    getPendingTransactions,\n    getTxsByAddress,\n    sendTxToGateway\n} from \"../../networks/Api\";\nimport { getCodeChainHost } from \"../../utils/network\";\nimport accountActions from \"../account/accountActions\";\nimport assetActions from \"../asset/assetActions\";\nimport { getIdByAddressAssetType } from \"./chainReducer\";\n\nexport type Action =\n    | CachePendingTxList\n    | CacheTxList\n    | SetFetchingPendingTxList\n    | SetFetchingTxList\n    | UpdateBestBlockNumber\n    | SetFetchingBestBlockNumber\n    | SetFetchingTxListById\n    | CacheTxListById;\n\nexport enum ActionType {\n    CachePendingTxList = \"CachePendingTxList\",\n    CacheTxList = \"CacheTxList\",\n    SetFetchingPendingTxList = \"SetFetchingPendingTxList\",\n    UpdateBestBlockNumber = \"UpdateBestBlockNumber\",\n    SetFetchingBestBlockNumber = \"SetFetchingBestBlockNumber\",\n    SetFetchingTxList = \"SetFetchingTxList\",\n    SetFetchingTxListById = \"SetFetchingTxListById\",\n    CacheTxListById = \"CacheTxListById\"\n}\n\nexport interface SetFetchingTxListById {\n    type: ActionType.SetFetchingTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheTxListById {\n    type: ActionType.CacheTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n        txList: TransactionDoc[];\n    };\n}\n\nexport interface CachePendingTxList {\n    type: ActionType.CachePendingTxList;\n    data: {\n        address: string;\n        pendingTxList: TransactionDoc[];\n    };\n}\n\nexport interface CacheTxList {\n    type: ActionType.CacheTxList;\n    data: {\n        address: string;\n        txList: TransactionDoc[];\n    };\n}\n\nexport interface SetFetchingPendingTxList {\n    type: ActionType.SetFetchingPendingTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingTxList {\n    type: ActionType.SetFetchingTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface UpdateBestBlockNumber {\n    type: ActionType.UpdateBestBlockNumber;\n    data: {\n        bestBlockNumber: number;\n    };\n}\n\nexport interface SetFetchingBestBlockNumber {\n    type: ActionType.SetFetchingBestBlockNumber;\n}\n\nconst cachePendingTxList = (\n    address: string,\n    pendingTxList: TransactionDoc[]\n): CachePendingTxList => ({\n    type: ActionType.CachePendingTxList,\n    data: {\n        address,\n        pendingTxList\n    }\n});\n\nconst setFetchingPendingTxList = (\n    address: string\n): SetFetchingPendingTxList => ({\n    type: ActionType.SetFetchingPendingTxList,\n    data: {\n        address\n    }\n});\n\nconst fetchPendingTxListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedPendingTxList = getState().chainReducer.pendingTxList[\n            address\n        ];\n        if (cachedPendingTxList && cachedPendingTxList.isFetching) {\n            return;\n        }\n        if (\n            cachedPendingTxList &&\n            cachedPendingTxList.updatedAt &&\n            +new Date() - cachedPendingTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingPendingTxList(address));\n            const networkId = getState().globalReducer.networkId;\n            const pendingTxList = await getPendingTransactions(\n                address,\n                networkId\n            );\n            dispatch(cachePendingTxList(address, pendingTxList));\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                if (isAssetAddress(address)) {\n                    dispatch(assetActions.calculateAvailableAssets(address));\n                } else if (isPlatformAddress(address)) {\n                    dispatch(accountActions.calculateAvailableQuark(address));\n                }\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchTxListIfNeed = (\n    address: string,\n    params?: { page?: number; itemsPerPage?: number; force: boolean }\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const { page = 1, itemsPerPage = 10, force = false } = params || {};\n        const cachedTxList = getState().chainReducer.txList[address];\n        if (!force && cachedTxList && cachedTxList.isFetching) {\n            return;\n        }\n        if (\n            !force &&\n            cachedTxList &&\n            cachedTxList.updatedAt &&\n            +new Date() - cachedTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch({\n                type: ActionType.SetFetchingTxList,\n                data: {\n                    address\n                }\n            });\n            const networkId = getState().globalReducer.networkId;\n            const txList = await getTxsByAddress(\n                address,\n                page,\n                itemsPerPage,\n                networkId\n            );\n            dispatch({\n                type: ActionType.CacheTxList,\n                data: {\n                    address,\n                    txList\n                }\n            });\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                if (isAssetAddress(address)) {\n                    dispatch(assetActions.calculateAvailableAssets(address));\n                } else if (isPlatformAddress(address)) {\n                    dispatch(accountActions.calculateAvailableQuark(address));\n                }\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst sendSignedTransaction = (\n    address: string,\n    signedTransaction: SignedTransaction,\n    observePlatformAddress?: string | null\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const networkId = getState().globalReducer.networkId;\n                const sdk = new SDK({\n                    server: getCodeChainHost(networkId),\n                    networkId\n                });\n                await sdk.rpc.chain.sendSignedTransaction(signedTransaction);\n                checkingIndexingFuncForSendingTx = setInterval(() => {\n                    dispatch(fetchPendingTxListIfNeed(address));\n                    dispatch(fetchTxListIfNeed(address));\n                    const pendingTxList = getState().chainReducer.pendingTxList[\n                        address\n                    ];\n                    const txList = getState().chainReducer.txList[address];\n                    if (\n                        (pendingTxList &&\n                            pendingTxList.data &&\n                            _.find(\n                                pendingTxList.data,\n                                tx => tx.hash === signedTransaction.hash().value\n                            )) ||\n                        (txList &&\n                            txList.data &&\n                            _.find(\n                                txList.data,\n                                tx => tx.hash === signedTransaction.hash().value\n                            ))\n                    ) {\n                        if (isAssetAddress(address)) {\n                            dispatch(\n                                assetActions.fetchAvailableAssets(address)\n                            );\n                        } else if (isPlatformAddress(address)) {\n                            dispatch(\n                                accountActions.fetchAvailableQuark(address)\n                            );\n                        }\n                        if (observePlatformAddress) {\n                            dispatch(\n                                accountActions.fetchAvailableQuark(\n                                    observePlatformAddress\n                                )\n                            );\n                        }\n                        clearInterval(checkingIndexingFuncForSendingTx);\n                        resolve();\n                    }\n                }, 1000);\n            } catch (e) {\n                reject(e);\n                console.error(e);\n            }\n        });\n    };\n};\n\nlet checkingIndexingFuncForSendingTx: NodeJS.Timer;\nconst sendTransactionByGateway = (\n    assetAddress: string,\n    transaction: Transaction,\n    gatewayURL: string\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                await sendTxToGateway(transaction, gatewayURL);\n                checkingIndexingFuncForSendingTx = setInterval(() => {\n                    dispatch(fetchPendingTxListIfNeed(assetAddress));\n                    dispatch(fetchTxListIfNeed(assetAddress));\n                    const pendingTxList = getState().chainReducer.pendingTxList[\n                        assetAddress\n                    ];\n                    const txList = getState().chainReducer.txList[assetAddress];\n                    if (\n                        (pendingTxList &&\n                            pendingTxList.data &&\n                            _.find(\n                                pendingTxList.data,\n                                tx =>\n                                    tx.hash === transaction.unsignedHash().value\n                            )) ||\n                        (txList &&\n                            txList.data &&\n                            _.find(\n                                txList.data,\n                                tx =>\n                                    tx.hash === transaction.unsignedHash().value\n                            ))\n                    ) {\n                        dispatch(\n                            assetActions.fetchAvailableAssets(assetAddress)\n                        );\n                        clearInterval(checkingIndexingFuncForSendingTx);\n                        resolve();\n                    }\n                }, 1000);\n            } catch (e) {\n                reject(e);\n                console.error(e);\n            }\n        });\n    };\n};\n\nconst fetchTxListByAssetTypeIfNeed = (\n    address: string,\n    assetType: H160,\n    params?: { page?: number; itemsPerPage?: number; force: boolean }\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const { page = 1, itemsPerPage = 10, force = false } = params || {};\n        const id = getIdByAddressAssetType(address, assetType);\n        const cachedTxListById = getState().chainReducer.txListById[id];\n        if (!force && cachedTxListById && cachedTxListById.isFetching) {\n            return;\n        }\n        if (\n            !force &&\n            cachedTxListById &&\n            cachedTxListById.updatedAt &&\n            +new Date() - cachedTxListById.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch({\n                type: ActionType.SetFetchingTxListById,\n                data: {\n                    address,\n                    assetType\n                }\n            });\n            const networkId = getState().globalReducer.networkId;\n            const txList = await getTxsByAddress(\n                address,\n                page,\n                itemsPerPage,\n                networkId,\n                assetType\n            );\n            dispatch({\n                type: ActionType.CacheTxListById,\n                data: {\n                    address,\n                    assetType,\n                    txList\n                }\n            });\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport default {\n    fetchPendingTxListIfNeed,\n    fetchTxListIfNeed,\n    fetchTxListByAssetTypeIfNeed,\n    sendSignedTransaction,\n    sendTransactionByGateway\n};\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { PlatformAccount } from \"../../model/address\";\nimport { getPlatformAccount } from \"../../networks/Api\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport chainActions from \"../chain/chainActions\";\n\nexport type Action = UpdateAvailableQuark | UpdateAccount | SetFetchingAccount;\n\nexport enum ActionType {\n    UpdateAvailableQuark = \"UpdateAvailableQuark\",\n    UpdateAccount = \"UpdateAccount\",\n    SetFetchingAccount = \"SetFetchingAccount\"\n}\n\nexport interface UpdateAvailableQuark {\n    type: ActionType.UpdateAvailableQuark;\n    data: {\n        address: string;\n        amount: U64;\n    };\n}\n\nexport interface UpdateAccount {\n    type: ActionType.UpdateAccount;\n    data: {\n        address: string;\n        account: PlatformAccount;\n    };\n}\n\nconst setFetchingAccount = (address: string): SetFetchingAccount => ({\n    type: ActionType.SetFetchingAccount,\n    data: {\n        address\n    }\n});\n\nconst updateAccount = (\n    address: string,\n    account: PlatformAccount\n): UpdateAccount => ({\n    type: ActionType.UpdateAccount,\n    data: {\n        address,\n        account\n    }\n});\n\nconst fetchAccountIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAccount = getState().accountReducer.accounts[address];\n        if (cachedAccount && cachedAccount.isFetching) {\n            return;\n        }\n        if (\n            cachedAccount &&\n            cachedAccount.updatedAt &&\n            +new Date() - cachedAccount.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAccount(address));\n            const networkId = getState().globalReducer.networkId;\n            const accountResponse = await getPlatformAccount(\n                address,\n                networkId\n            );\n            dispatch(updateAccount(address, accountResponse));\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                dispatch(calculateAvailableQuark(address));\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAvailableQuark = (address: string) => {\n    return (dispatch: ThunkDispatch<ReducerConfigure, void, Action>) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n        dispatch(chainActions.fetchTxListIfNeed(address));\n        dispatch(fetchAccountIfNeed(address));\n    };\n};\n\nexport interface SetFetchingAccount {\n    type: ActionType.SetFetchingAccount;\n    data: {\n        address: string;\n    };\n}\n\nconst calculateAvailableQuark = (address: string) => {\n    return (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const txListObj = getState().chainReducer.txList[address];\n        const accountObj = getState().accountReducer.accounts[address];\n        const pendingTxListObj = getState().chainReducer.pendingTxList[address];\n        const txList = txListObj && txListObj.data;\n        const account = accountObj && accountObj.data;\n        const pendingTxList = pendingTxListObj && pendingTxListObj.data;\n        if (!txList || !account || !pendingTxList) {\n            return;\n        }\n\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        const aggrPendingQuark = TxUtil.getAggsQuark(\n            address,\n            validPendingTxList\n        );\n        const availableQuark = U64.minus(\n            account.balance,\n            aggrPendingQuark.input\n        );\n        dispatch({\n            type: ActionType.UpdateAvailableQuark,\n            data: {\n                address,\n                amount: availableQuark\n            }\n        });\n    };\n};\n\nexport default {\n    calculateAvailableQuark,\n    fetchAccountIfNeed,\n    fetchAvailableQuark\n};\n","import {\n    AssetTransferAddress,\n    PlatformAddress\n} from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { toast } from \"react-toastify\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { AddressType, WalletAddress } from \"../../model/address\";\nimport {\n    createAssetAddress,\n    createPlatformAddress,\n    restoreAssetAddresses,\n    restorePlatformAddresses\n} from \"../../model/keystore\";\nimport { getAssetKeys, getPlatformKeys } from \"../../utils/storage\";\n\nexport type Action =\n    | UpdateWalletPlatformAddresses\n    | UpdateWalletAssetAddresses\n    | ClearWalletAddresses\n    | SetLoadingAssetAddresses\n    | SetLoadingPlatformAddresses;\n\nexport enum ActionType {\n    UpdateWalletPlatformAddresses = \"UpdateWalletPlatformAddresses\",\n    UpdateWalletAssetAddresses = \"UpdateWalletAssetAddresses\",\n    ClearWalletAddresses = \"ClearWalletAddresses\",\n    SetLoadingPlatformAddresses = \"SetLoadingPlatformAddresses\",\n    SetLoadingAssetAddresses = \"SetLoadingAssetAddresses\"\n}\n\nexport interface UpdateWalletPlatformAddresses {\n    type: ActionType.UpdateWalletPlatformAddresses;\n    data: {\n        platformAddresses: WalletAddress[];\n    };\n}\n\nexport interface UpdateWalletAssetAddresses {\n    type: ActionType.UpdateWalletAssetAddresses;\n    data: {\n        assetAddresses: WalletAddress[];\n    };\n}\n\nexport interface ClearWalletAddresses {\n    type: ActionType.ClearWalletAddresses;\n}\n\nexport interface SetLoadingAssetAddresses {\n    type: ActionType.SetLoadingAssetAddresses;\n    data: {\n        isLoading: boolean;\n    };\n}\n\nexport interface SetLoadingPlatformAddresses {\n    type: ActionType.SetLoadingPlatformAddresses;\n    data: {\n        isLoading: boolean;\n    };\n}\n\nconst updateWalletPlatformAddresses = (\n    platformAddresses: WalletAddress[]\n): UpdateWalletPlatformAddresses => ({\n    type: ActionType.UpdateWalletPlatformAddresses,\n    data: {\n        platformAddresses\n    }\n});\n\nconst updateWalletAssetAddresses = (\n    assetAddresses: WalletAddress[]\n): UpdateWalletAssetAddresses => ({\n    type: ActionType.UpdateWalletAssetAddresses,\n    data: {\n        assetAddresses\n    }\n});\n\nconst fetchWalletFromStorageIfNeed = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch(showLoading() as any);\n        const networkId = getState().globalReducer.networkId;\n        const passphrase = getState().globalReducer.passphrase!;\n        if (!getState().walletReducer.assetAddresses) {\n            const savedAssetKeys = getAssetKeys(networkId);\n            let assetAddresses;\n            if (savedAssetKeys) {\n                assetAddresses = _.map(savedAssetKeys, key => {\n                    const address = AssetTransferAddress.fromTypeAndPayload(\n                        1,\n                        key.key,\n                        {\n                            networkId\n                        }\n                    ).value;\n                    return {\n                        index: key.pathIndex,\n                        address,\n                        type: AddressType.Asset\n                    };\n                });\n            } else {\n                dispatch({\n                    type: ActionType.SetLoadingAssetAddresses,\n                    data: {\n                        isLoading: true\n                    }\n                });\n                assetAddresses = await restoreAssetAddresses(\n                    passphrase,\n                    networkId\n                );\n                dispatch({\n                    type: ActionType.SetLoadingAssetAddresses,\n                    data: {\n                        isLoading: false\n                    }\n                });\n            }\n            dispatch(updateWalletAssetAddresses(assetAddresses));\n        }\n        if (!getState().walletReducer.platformAddresses) {\n            const savedPlatformKeys = getPlatformKeys(networkId);\n            let platformAddresses;\n            if (savedPlatformKeys) {\n                platformAddresses = _.map(savedPlatformKeys, key => {\n                    const address = PlatformAddress.fromAccountId(key.key, {\n                        networkId\n                    }).value;\n                    return {\n                        index: key.pathIndex,\n                        address,\n                        type: AddressType.Platform\n                    };\n                });\n            } else {\n                dispatch({\n                    type: ActionType.SetLoadingPlatformAddresses,\n                    data: {\n                        isLoading: true\n                    }\n                });\n                platformAddresses = await restorePlatformAddresses(\n                    passphrase,\n                    networkId\n                );\n                dispatch({\n                    type: ActionType.SetLoadingPlatformAddresses,\n                    data: {\n                        isLoading: false\n                    }\n                });\n            }\n            dispatch(updateWalletPlatformAddresses(platformAddresses));\n        }\n        dispatch(hideLoading() as any);\n    };\n};\n\nconst createWalletPlatformAddress = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const networkId = getState().globalReducer.networkId;\n        const platformAddresses = getState().walletReducer.platformAddresses;\n        if (platformAddresses && platformAddresses.length >= 10) {\n            toast.error(\"Sorry, you can make up to 10 addresses.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        const passphrase = getState().globalReducer.passphrase!;\n        const newAddresses = await createPlatformAddress(passphrase, networkId);\n        if (platformAddresses) {\n            dispatch(\n                updateWalletPlatformAddresses([\n                    ...platformAddresses,\n                    newAddresses\n                ])\n            );\n        } else {\n            dispatch(updateWalletPlatformAddresses([newAddresses]));\n        }\n    };\n};\n\nconst createWalletAssetAddress = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const networkId = getState().globalReducer.networkId;\n        const assetAddresses = getState().walletReducer.assetAddresses;\n        if (assetAddresses && assetAddresses.length >= 10) {\n            toast.error(\"Sorry, you can make up to 10 addresses.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        const passphrase = getState().globalReducer.passphrase!;\n        const newAddresses = await createAssetAddress(passphrase, networkId);\n        if (assetAddresses) {\n            dispatch(\n                updateWalletAssetAddresses([...assetAddresses, newAddresses])\n            );\n        } else {\n            dispatch(updateWalletAssetAddresses([newAddresses]));\n        }\n    };\n};\n\nexport default {\n    fetchWalletFromStorageIfNeed,\n    createWalletAssetAddress,\n    createWalletPlatformAddress\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport QRCode from \"qrcode.react\";\nimport React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport MediaQuery from \"react-responsive\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport copyBtnHover from \"./img/copy-hover.svg\";\nimport copyBtn from \"./img/copy.svg\";\n\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport \"./AddressContainer.css\";\n\ninterface Props {\n    address: string;\n    backButtonPath: string;\n    addressIndex?: number | null;\n}\n\ninterface State {\n    isCopyHovering: boolean;\n}\n\nclass AddressContainer extends React.Component<Props & WithTranslation, State> {\n    public constructor(props: Props & WithTranslation) {\n        super(props);\n        this.state = {\n            isCopyHovering: false\n        };\n    }\n    public render() {\n        const { address, backButtonPath, addressIndex } = this.props;\n        const { isCopyHovering } = this.state;\n        return (\n            <div className=\"Address-container d-flex align-items-center\">\n                <Link to={backButtonPath}>\n                    <FontAwesomeIcon className=\"back-btn\" icon=\"arrow-left\" />\n                </Link>\n                <div className=\"qr-container\">\n                    <QRCode value={address} size={57} />\n                </div>\n                <div className=\"ml-3 name-address-container\">\n                    <h2 className=\"mb-0\">\n                        <Trans\n                            i18nKey=\"main:address\"\n                            values={{\n                                index:\n                                    addressIndex != null ? addressIndex + 1 : \"\"\n                            }}\n                        />\n                    </h2>\n                    <span className=\"mono address-text mr-3\">\n                        <MediaQuery query=\"(max-width: 768px)\">\n                            {address.slice(0, 8)}\n                            ...\n                            {address.slice(address.length - 8, address.length)}\n                        </MediaQuery>\n                        <MediaQuery query=\"(min-width: 769px)\">\n                            {address}\n                        </MediaQuery>\n                    </span>\n                    <CopyToClipboard\n                        text={address}\n                        onCopy={this.handleCopyAddress}\n                    >\n                        <img\n                            className=\"copy-btn\"\n                            src={isCopyHovering ? copyBtnHover : copyBtn}\n                            alt={\"copy\"}\n                            onMouseOver={this.hoverCopyBtn}\n                            onMouseOut={this.outCopyBtn}\n                            onBlur={this.outCopyBtn}\n                        />\n                    </CopyToClipboard>\n                </div>\n            </div>\n        );\n    }\n\n    private hoverCopyBtn = () => {\n        this.setState({ isCopyHovering: true });\n    };\n\n    private outCopyBtn = () => {\n        this.setState({ isCopyHovering: false });\n    };\n\n    private handleCopyAddress = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(AddressContainer);\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport MediaQuery from \"react-responsive\";\nimport { NetworkId } from \"../../../model/address\";\nimport { getExplorerHost } from \"../../../utils/network\";\nimport { TxUtil } from \"../../../utils/transaction\";\nimport \"./PayTxItem.css\";\n\ninterface Props {\n    tx: TransactionDoc;\n    isPending: boolean;\n    timestamp: number;\n    address: string;\n    networkId: NetworkId;\n}\nclass PayTxItem extends React.Component<Props & WithTranslation, any> {\n    public render() {\n        const { tx, address, networkId, isPending, timestamp } = this.props;\n        const aggrTx = TxUtil.getAggsQuark(address, [tx]);\n        return (\n            <div className=\"d-flex Pay-tx-item align-items-center\">\n                <div className=\"date-container number\">\n                    <MediaQuery query=\"(max-width: 768px)\">\n                        {moment.unix(timestamp).format(\"MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                    <MediaQuery query=\"(min-width: 769px)\">\n                        {moment.unix(timestamp).format(\"YYYY-MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                </div>\n                <div className=\"pay-info-container\">\n                    <a\n                        className=\"mono transaction-hash\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`${getExplorerHost(networkId)}/tx/${tx.hash}`}\n                    >\n                        0x\n                        {tx.hash}\n                    </a>\n                </div>\n                <div className=\"balance-container number\">\n                    <span>\n                        {aggrTx.output.gte(aggrTx.input)\n                            ? `+${U64.minus(\n                                  aggrTx.output,\n                                  aggrTx.input\n                              ).toLocaleString()}`\n                            : `-${U64.minus(\n                                  aggrTx.input,\n                                  aggrTx.output\n                              ).toLocaleString()}`}{\" \"}\n                        CCC\n                    </span>\n                </div>\n                <div className=\"status-container\">\n                    {isPending ? (\n                        <span className=\"pending\">\n                            <Trans i18nKey=\"main:pending\" />\n                        </span>\n                    ) : (\n                        <span className=\"confirmed\">\n                            <Trans i18nKey=\"main:confirmed\" />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\nexport default withTranslation()(PayTxItem);\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TransactionDoc } from \"codechain-indexer-types\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport Pagination from \"react-js-pagination\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport Empty from \"./img/cautiondisabled.svg\";\nimport \"./PayTxHistory.css\";\nimport PayTxItem from \"./PayTxItem/PayTxItem\";\n\ninterface OwnProps {\n    address: string;\n}\n\ninterface StateProps {\n    pendingTxList?: TransactionDoc[] | null;\n    txList?: TransactionDoc[] | null;\n    networkId: NetworkId;\n}\n\ninterface State {\n    activePage: number;\n}\n\ninterface DispatchProps {\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchTxListIfNeed: (address: string, page: number) => void;\n}\n\ntype Props = WithTranslation & StateProps & OwnProps & DispatchProps;\n\nclass PayTxHistory extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            activePage: 1\n        };\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const { pendingTxList, txList, address, networkId } = this.props;\n        if (!pendingTxList || !txList) {\n            return <div>Loading...</div>;\n        }\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        return (\n            <div className=\"Asset-tx-history\">\n                {validPendingTxList.length + txList.length === 0 && (\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div>\n                            <div className=\"text-center mt-3\">\n                                <img src={Empty} alt={\"empty\"} />\n                            </div>\n                            <div className=\"mt-3 empty\">\n                                <Trans i18nKey=\"send:ccc.recent.empty\" />\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {_.map(validPendingTxList, pendingTx => (\n                    <PayTxItem\n                        key={pendingTx.hash}\n                        tx={pendingTx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={true}\n                        timestamp={pendingTx.pendingTimestamp!}\n                    />\n                ))}\n                {_.map(txList, tx => (\n                    <PayTxItem\n                        key={tx.hash}\n                        tx={tx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={false}\n                        timestamp={tx.timestamp!}\n                    />\n                ))}\n                {(this.state.activePage > 1 || txList.length > 0) && (\n                    <div className=\"pagination-container\">\n                        <Pagination\n                            activePage={this.state.activePage}\n                            itemsCountPerPage={10}\n                            totalItemsCount={\n                                (this.state.activePage - 1) * 10 +\n                                (txList.length + 1)\n                            }\n                            pageRangeDisplayed={5}\n                            onChange={this.handlePageChange}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            prevPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            nextPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            firstPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            lastPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n    private handlePageChange = (pageNumber: number) => {\n        const { address, fetchTxListIfNeed } = this.props;\n        this.setState({ activePage: pageNumber });\n        fetchTxListIfNeed(address, pageNumber);\n    };\n\n    private init = async () => {\n        this.fetchAll();\n    };\n\n    private fetchAll = () => {\n        const {\n            address,\n            fetchPendingTxListIfNeed,\n            fetchTxListIfNeed\n        } = this.props;\n        const { activePage } = this.state;\n        fetchPendingTxListIfNeed(address);\n        fetchTxListIfNeed(address, activePage);\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { address } = props;\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const txList = state.chainReducer.txList[address];\n    const networkId = state.globalReducer.networkId;\n    return {\n        pendingTxList: pendingTxList && pendingTxList.data,\n        txList: txList && txList.data,\n        networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchTxListIfNeed: (address: string, page: number) => {\n        dispatch(\n            chainActions.fetchTxListIfNeed(address, {\n                page,\n                itemsPerPage: 10,\n                force: true\n            })\n        );\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(PayTxHistory));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { Tooltip } from \"reactstrap\";\nimport \"./index.css\";\n\ninterface OwnProps {\n    tooltip: string;\n}\n\ninterface State {\n    tooltipOpen: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass TooltipLabel extends React.Component<Props, State> {\n    public uniqueId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = { tooltipOpen: false };\n        this.uniqueId = this.makeId(10);\n    }\n\n    public componentDidMount() {\n        document.addEventListener(\"mousedown\", this.closeTooltip);\n        document.addEventListener(\"touchend\", this.closeTooltip);\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.closeTooltip);\n        document.removeEventListener(\"touchend\", this.closeTooltip);\n    }\n\n    public render() {\n        const { t, tooltip } = this.props;\n        return (\n            <div className=\"Tooltip-label\">\n                <span\n                    key=\"tooltip-text\"\n                    className=\"ml-1\"\n                    id={`tooltip-${this.uniqueId}`}\n                >\n                    <FontAwesomeIcon\n                        icon=\"question-circle\"\n                        className=\"question-circle\"\n                    />\n                </span>\n                <Tooltip\n                    trigger=\"click\"\n                    key=\"tooltip-object\"\n                    position=\"right\"\n                    isOpen={this.state.tooltipOpen}\n                    target={`tooltip-${this.uniqueId}`}\n                    toggle={this.toggleTooltip}\n                >\n                    {t(tooltip)}\n                </Tooltip>\n            </div>\n        );\n    }\n\n    private closeTooltip = () => {\n        this.setState({\n            tooltipOpen: false\n        });\n    };\n\n    private toggleTooltip = () => {\n        this.setState({\n            tooltipOpen: !this.state.tooltipOpen\n        });\n    };\n\n    private makeId = (length: number) => {\n        let text = \"\";\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(\n                Math.floor(Math.random() * possible.length)\n            );\n        }\n\n        return text;\n    };\n}\n\nexport default withTranslation()(TooltipLabel);\n","import React from \"react\";\nimport NumberFormat from \"react-number-format\";\nimport { Label } from \"reactstrap\";\nimport TooltipLabel from \"../TooltipLabel\";\nimport IconCheck from \"./img/icons-check.svg\";\nimport IconError from \"./img/icons-error.svg\";\nimport \"./ValidationInput.css\";\n\ninterface Props {\n    placeholder?: string;\n    className?: string;\n    error?: string | null;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    value: string | number;\n    type?: string;\n    labelText?: string;\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    isValid?: boolean;\n    showValidation: boolean;\n    reverse?: boolean;\n    disable?: boolean;\n    decimalScale?: number;\n    tooltip?: string;\n}\ninterface State {\n    isFocus: boolean;\n}\nexport default class ValidationInput extends React.Component<Props, State> {\n    public uniqueId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = { isFocus: false };\n        this.uniqueId = this.makeId(10);\n    }\n    public render() {\n        const {\n            onChange,\n            value,\n            placeholder,\n            className,\n            type,\n            labelText,\n            error,\n            onBlur,\n            isValid,\n            reverse,\n            showValidation,\n            disable,\n            decimalScale,\n            tooltip\n        } = this.props;\n        const { isFocus } = this.state;\n        return (\n            <div className={`Validation-input ${className} mb-4`}>\n                {labelText && [\n                    <Label\n                        key=\"label\"\n                        for={`id-${this.uniqueId}`}\n                        className={`mb-0 label-text ${reverse && \"reverse\"}`}\n                    >\n                        {labelText}\n                    </Label>,\n                    tooltip && <TooltipLabel tooltip={tooltip} key=\"tooltip\" />\n                ]}\n                {type === \"number\" ? (\n                    <NumberFormat\n                        value={value}\n                        decimalScale={decimalScale}\n                        autoComplete=\"off\"\n                        className={`form-control ${reverse &&\n                            \"reverse\"} ${showValidation && \"validation-form\"}`}\n                        id={`id-${this.uniqueId}`}\n                        placeholder={placeholder}\n                        // onChange={onChange}\n                        onBlur={onBlur}\n                        disabled={disable}\n                        thousandSeparator={true}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onFocus={() => {\n                            this.setState({ isFocus: true });\n                        }}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onBlurCapture={() => {\n                            this.setState({ isFocus: false });\n                        }}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onValueChange={values => {\n                            const { value: v } = values;\n                            if (onChange && isFocus) {\n                                onChange({ target: { value: v } } as any);\n                            }\n                        }}\n                    />\n                ) : (\n                    <input\n                        autoComplete=\"off\"\n                        type={`${type || \"text\"}`}\n                        className={`form-control ${reverse &&\n                            \"reverse\"} ${showValidation && \"validation-form\"}`}\n                        id={`id-${this.uniqueId}`}\n                        placeholder={placeholder}\n                        value={value}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        disabled={disable}\n                    />\n                )}\n                {isValid && (\n                    <img\n                        className=\"valid-icon animated fadeIn\"\n                        src={IconCheck}\n                        alt={\"check\"}\n                    />\n                )}\n                {error && (\n                    <img\n                        className=\"error-icon animated fadeIn\"\n                        src={IconError}\n                        alt={\"error\"}\n                    />\n                )}\n                {error && (\n                    <span className=\"error-text animated fadeIn\">{error}</span>\n                )}\n            </div>\n        );\n    }\n\n    private makeId = (length: number) => {\n        let text = \"\";\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(\n                Math.floor(Math.random() * possible.length)\n            );\n        }\n\n        return text;\n    };\n}\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport ValidationInput from \"../../../../ValidationInput/ValidationInput\";\nimport \"./CCCReceiverItem.css\";\n\ninterface OwnProps {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    remainingAmount: string;\n    fee: string;\n    onAddressChange: (address: string) => void;\n    onAmountChange: (quantity: string) => void;\n    onAddressValidationCheck: () => void;\n    onAmountValidationCheck: () => void;\n    onFeeValidationCheck: () => void;\n    onFeeChange: (quantity: string) => void;\n    isAddressValid?: boolean;\n    isAmountValid?: boolean;\n    addressError?: string;\n    amountError?: string;\n    feeError?: string;\n    isFeeValid?: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass CCCReceiverItem extends React.Component<Props> {\n    public render() {\n        const {\n            t,\n            receiver,\n            isAddressValid,\n            isAmountValid,\n            addressError,\n            amountError,\n            fee,\n            isFeeValid,\n            feeError\n        } = this.props;\n        return (\n            <div className=\"CCCReceiver-item animated fadeIn\">\n                <ValidationInput\n                    value={receiver.address}\n                    onChange={this.handleChangeAddressInput}\n                    labelText={t(\"send:ccc.receiver.label\")}\n                    placeholder={t(\"send:ccc.receiver.placeholder\")}\n                    showValidation={true}\n                    isValid={isAddressValid}\n                    onBlur={this.handleBlurAddressInput}\n                    error={addressError}\n                />\n                <div className=\"d-flex align-items-end\">\n                    <ValidationInput\n                        value={receiver.quantity}\n                        onChange={this.handleChangedAmountInput}\n                        labelText={t(\"send:ccc.amount.label\")}\n                        placeholder={t(\"send:ccc.amount.placeholder\")}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isAmountValid}\n                        onBlur={this.handleBlurAmountInput}\n                        error={amountError}\n                        decimalScale={0}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary max-btn\"\n                        onClick={this.handleMaxValueClick}\n                    >\n                        <Trans i18nKey=\"main:max\" />\n                    </button>\n                </div>\n                <div>\n                    <ValidationInput\n                        value={fee}\n                        onChange={this.handleChangeFeeInput}\n                        labelText={t(\"send:ccc.fee.label\")}\n                        placeholder={`100 (CCC)`}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isFeeValid}\n                        tooltip=\"send:ccc.fee.tooltip\"\n                        onBlur={this.handleBlurFeeInput}\n                        error={feeError}\n                        decimalScale={0}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private handleBlurAddressInput = () => {\n        const { onAddressValidationCheck } = this.props;\n        onAddressValidationCheck();\n    };\n\n    private handleBlurAmountInput = () => {\n        const { onAmountValidationCheck } = this.props;\n        onAmountValidationCheck();\n    };\n\n    private handleBlurFeeInput = () => {\n        const { onFeeValidationCheck } = this.props;\n        onFeeValidationCheck();\n    };\n\n    private handleMaxValueClick = () => {\n        const { onAmountChange, remainingAmount } = this.props;\n        onAmountChange(remainingAmount);\n    };\n\n    private handleChangeAddressInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onAddressChange } = this.props;\n        onAddressChange(event.target.value);\n    };\n\n    private handleChangedAmountInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onAmountChange } = this.props;\n        onAmountChange(event.target.value);\n    };\n\n    private handleChangeFeeInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onFeeChange } = this.props;\n        onFeeChange(event.target.value);\n    };\n}\n\nexport default withTranslation()(CCCReceiverItem);\n","import BigNumber from \"bignumber.js\";\nimport { PlatformAddress, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./CCCReceiverContainer.css\";\nimport CCCReceiverItem from \"./CCCReceiverItem/CCCReceiverItem\";\n\ninterface State {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    fee: string;\n    isAddressValid?: boolean;\n    addressError?: string;\n    isAmountValid?: boolean;\n    amountError?: string;\n    isFeeValid?: boolean;\n    feeError?: string;\n}\n\ninterface OwnProps {\n    address: string;\n    totalAmount: U64;\n    isSending: boolean;\n    onSubmit: (receiver: { address: string; quantity: U64 }, fee: U64) => void;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nconst MinimumFee = 100;\n\nclass CCCReceiverContainer extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            receiver: {\n                address: \"\",\n                quantity: \"\"\n            },\n            fee: `${MinimumFee}`,\n            isFeeValid: undefined,\n            feeError: undefined,\n            isAddressValid: undefined,\n            addressError: undefined,\n            isAmountValid: undefined,\n            amountError: undefined\n        };\n    }\n    public render() {\n        const {\n            receiver,\n            isAddressValid,\n            addressError,\n            isAmountValid,\n            amountError,\n            isFeeValid,\n            feeError,\n            fee\n        } = this.state;\n        const { isSending } = this.props;\n        return (\n            <div className=\"CCCReceiver-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"receivers\">\n                        <CCCReceiverItem\n                            fee={fee}\n                            receiver={receiver}\n                            onAddressChange={this.handleAddressChange}\n                            onAmountChange={this.handleAmountChange}\n                            onFeeChange={this.handleFeeChange}\n                            remainingAmount={this.calculateRemainingCCCString()}\n                            onAddressValidationCheck={\n                                this.handleAddressValidationCheck\n                            }\n                            onAmountValidationCheck={\n                                this.handleAmountValidationCheck\n                            }\n                            onFeeValidationCheck={this.handleFeeValidationCheck}\n                            isAddressValid={isAddressValid}\n                            isAmountValid={isAmountValid}\n                            addressError={addressError}\n                            amountError={amountError}\n                            feeError={feeError}\n                            isFeeValid={isFeeValid}\n                        />\n                    </div>\n                    <div className=\"mt-5\">\n                        <button\n                            disabled={isSending}\n                            type=\"submit\"\n                            className=\"btn btn-primary square w-100 send-btn\"\n                        >\n                            <Trans i18nKey=\"send:ccc.button\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    private calculateRemainingCCCString = () => {\n        const { totalAmount } = this.props;\n        const { fee } = this.state;\n        const remainingCCC = totalAmount.value.minus(fee);\n        if (remainingCCC.gt(0)) {\n            return remainingCCC.toString();\n        } else {\n            return \"0\";\n        }\n    };\n\n    private handleAddressValidationCheck = () => {\n        const { receiver } = this.state;\n        const { t, address: myAddress } = this.props;\n        const address = receiver.address;\n        if (address === \"\") {\n            this.setState({\n                isAddressValid: false,\n                addressError: t(\"send:ccc.error.address.required\")\n            });\n            return false;\n        }\n        if (address === myAddress) {\n            this.setState({\n                isAddressValid: false,\n                addressError: t(\"send:ccc.error.address.not_equal\")\n            });\n            return false;\n        }\n        if (address) {\n            try {\n                PlatformAddress.fromString(address);\n                this.setState({\n                    isAddressValid: true,\n                    addressError: undefined\n                });\n                return true;\n            } catch (e) {\n                // nothing\n            }\n        }\n        this.setState({\n            isAddressValid: false,\n            addressError: t(\"send:ccc.error.address.invalid\")\n        });\n        return false;\n    };\n\n    private handleAmountValidationCheck = () => {\n        const { receiver, fee } = this.state;\n        const { t, totalAmount } = this.props;\n        const cccString = receiver.quantity;\n        if (cccString === \"\") {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.required\")\n            });\n            return false;\n        }\n        console.log(cccString);\n        const amountCCC = new BigNumber(cccString);\n        if (amountCCC.isNaN()) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.invalid\")\n            });\n            return false;\n        }\n        if (amountCCC.lt(1)) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.minimum\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountCCC.plus(amountFee).gt(totalAmount.value)) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.not_enough\")\n            });\n            return false;\n        }\n        this.setState({\n            isAmountValid: true,\n            amountError: undefined\n        });\n        return true;\n    };\n\n    private handleFeeValidationCheck = () => {\n        const { receiver, fee } = this.state;\n        const { t, totalAmount } = this.props;\n        const feeString = fee;\n        if (feeString === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(feeString);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.minimum\", {\n                    minimum: MinimumFee\n                })\n            });\n            return false;\n        }\n        const amountCCC = new BigNumber(\n            receiver.quantity === \"\" ? \"0\" : receiver.quantity\n        );\n        if (amountCCC.plus(amountFee).gt(totalAmount.value)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.not_enough\")\n            });\n            return false;\n        }\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleAddressChange = (address: string) => {\n        const { receiver } = this.state;\n        this.setState({\n            receiver: {\n                address,\n                quantity: receiver.quantity\n            },\n            addressError: undefined,\n            isAddressValid: undefined\n        });\n    };\n\n    private handleAmountChange = (quantity: string) => {\n        const { receiver } = this.state;\n        this.setState({\n            receiver: {\n                address: receiver.address,\n                quantity\n            },\n            amountError: undefined,\n            isAmountValid: undefined\n        });\n    };\n\n    private handleFeeChange = (amount: string) => {\n        this.setState({\n            fee: amount,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { receiver, fee } = this.state;\n\n        if (!this.handleAmountValidationCheck()) {\n            return;\n        }\n\n        if (!this.handleAddressValidationCheck()) {\n            return;\n        }\n\n        if (!this.handleFeeValidationCheck()) {\n            return;\n        }\n\n        const amountCCC = new BigNumber(receiver.quantity);\n        const amountFee = new BigNumber(fee);\n        this.props.onSubmit(\n            {\n                address: receiver.address,\n                quantity: new U64(amountCCC)\n            },\n            new U64(amountFee)\n        );\n    };\n}\n\nexport default withTranslation()(CCCReceiverContainer);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { SDK } from \"codechain-sdk\";\nimport { SignedTransaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../../../model/keystore\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport accountActions from \"../../../redux/account/accountActions\";\nimport chainActions from \"../../../redux/chain/chainActions\";\nimport { getCodeChainHost } from \"../../../utils/network\";\nimport { getAssetKeys, getPlatformKeys } from \"../../../utils/storage\";\nimport CCCReceiverContainer from \"./CCCReceiverContainer/CCCReceiverContainer\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport \"./SendCCC.css\";\n\ninterface OwnProps {\n    address: string;\n    onClose: () => void;\n}\n\ninterface StateProps {\n    availableQuark?: U64 | null;\n    networkId: NetworkId;\n    passphrase: string;\n}\n\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction\n    ) => Promise<unknown>;\n}\n\ninterface State {\n    isSending: boolean;\n    isSent: boolean;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass SendCCC extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isSending: false,\n            isSent: false\n        };\n    }\n    public render() {\n        const { onClose, availableQuark, address } = this.props;\n        const { isSending, isSent } = this.state;\n        if (!availableQuark) {\n            return (\n                <div>\n                    <div className=\"Send-CCC\">\n                        <div className=\"loading-container\" />\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className=\"Send-CCC animated fadeIn\">\n                <div className=\"cancel-icon-container\" onClick={onClose}>\n                    <FontAwesomeIcon className=\"cancel-icon\" icon=\"times\" />\n                </div>\n                <h2 className=\"title\">\n                    <Trans i18nKey=\"send:ccc.title\" />\n                </h2>\n                {isSent ? (\n                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                        <div className=\"text-center\">\n                            <div>\n                                <img src={CheckIcon} alt={\"check\"} />\n                            </div>\n                            <div className=\"mt-3\">\n                                <span>\n                                    <Trans i18nKey=\"send:ccc.complete\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className=\"d-flex align-items-center balance-container mb-4\">\n                            <div className=\"mr-auto balance-text\">\n                                <Trans i18nKey=\"send:ccc.balance\" />\n                            </div>\n                            <span className=\"amount number\">\n                                {availableQuark.toLocaleString()} CCC\n                            </span>\n                        </div>\n                        <CCCReceiverContainer\n                            address={address}\n                            onSubmit={this.handleSubmit}\n                            totalAmount={availableQuark}\n                            isSending={isSending}\n                        />\n                    </div>\n                )}\n                {isSending && (\n                    <div className=\"sending-panel d-flex align-items-center justify-content-center\">\n                        <Spinner name=\"line-scale\" color=\"white\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    public updateWindowDimensions = () => {\n        if (window.innerWidth <= 872) {\n            this.addModalOpenClass();\n        } else {\n            this.removeModalOpenClass();\n        }\n    };\n\n    public async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.removeModalOpenClass();\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    private addModalOpenClass = () => {\n        document.body.className = \"modal-open\";\n    };\n\n    private removeModalOpenClass = () => {\n        document.body.className = \"\";\n    };\n\n    private init = () => {\n        const { address, fetchAvailableQuark } = this.props;\n        fetchAvailableQuark(address);\n    };\n\n    private handleSubmit = async (\n        receiver: {\n            address: string;\n            quantity: U64;\n        },\n        fee: U64\n    ) => {\n        const { networkId, address, passphrase } = this.props;\n        const sdk = new SDK({\n            server: getCodeChainHost(networkId),\n            networkId\n        });\n\n        const tx = sdk.core.createPayTransaction({\n            recipient: receiver.address,\n            quantity: receiver.quantity\n        });\n\n        const ccKey = await getCCKey();\n\n        const storedPlatformKeys = getPlatformKeys(networkId);\n        const storedAssetKeys = getAssetKeys(networkId);\n        const seedHash = await getFirstSeedHash();\n\n        const platformKeyMapping = _.reduce(\n            storedPlatformKeys,\n            (memo, storedPlatformKey) => {\n                return {\n                    ...memo,\n                    [storedPlatformKey.key]: {\n                        seedHash,\n                        path: getPlatformAddressPath(\n                            storedPlatformKey.pathIndex\n                        )\n                    }\n                };\n            },\n            {}\n        );\n\n        const assetKeyMapping = _.reduce(\n            storedAssetKeys,\n            (memo, storedAssetKey) => {\n                return {\n                    ...memo,\n                    [storedAssetKey.key]: {\n                        seedHash,\n                        path: getAssetAddressPath(storedAssetKey.pathIndex)\n                    }\n                };\n            },\n            {}\n        );\n\n        const keyStore = new LocalKeyStore(ccKey, {\n            platform: platformKeyMapping,\n            asset: assetKeyMapping\n        });\n        const seq = await sdk.rpc.chain.getSeq(address);\n        const { transactions } = await sdk.rpc.chain.getPendingTransactions();\n        const newSeq =\n            seq +\n            transactions.filter(\n                t => t.getSignerAddress({ networkId }).toString() === address\n            ).length;\n        const signedTx = await sdk.key.signTransaction(tx, {\n            account: address,\n            keyStore,\n            fee,\n            seq: newSeq,\n            passphrase\n        });\n        this.setState({ isSending: true });\n        try {\n            await this.props.sendSignedTransaction(address, signedTx);\n            this.setState({ isSent: true });\n        } catch (e) {\n            toast.error(\"Server is not responding.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            console.error(e);\n        }\n        this.setState({ isSending: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const { address } = ownProps;\n    const availableQuark = state.accountReducer.availableQuark[address];\n    const networkId = state.globalReducer.networkId;\n    const passphrase = state.globalReducer.passphrase!;\n    return {\n        availableQuark,\n        networkId,\n        passphrase\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(address, signedTransaction)\n        );\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(SendCCC));\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"../../redux\";\nimport accountActions from \"../../redux/account/accountActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport PayTxHistory from \"../PayTxHistory/PayTxHistory\";\nimport \"./Account.css\";\nimport SendCCC from \"./SendAsset/SendCCC\";\n\ninterface OwnProps {\n    match: match<{ address: string }>;\n}\n\ninterface StateProps {\n    availableQuark?: U64 | null;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ninterface State {\n    sendingCCC: boolean;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass Account extends React.Component<Props, State> {\n    private refresher: any;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            sendingCCC: false\n        };\n    }\n    public componentWillReceiveProps(props: Props) {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            match: {\n                params: { address: nextAddress }\n            }\n        } = props;\n        if (nextAddress !== address) {\n            this.init();\n        }\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    public render() {\n        const {\n            availableQuark,\n            match: {\n                params: { address }\n            },\n            addressIndex\n        } = this.props;\n        const { sendingCCC } = this.state;\n        if (!availableQuark) {\n            return null;\n        }\n        return (\n            <div className=\"Account animated fadeIn\">\n                <div className=\"d-flex\">\n                    <div className=\"left-panel mx-auto\">\n                        <AddressContainer\n                            address={address}\n                            backButtonPath=\"/\"\n                            addressIndex={addressIndex}\n                        />\n                        <div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"element-title\">\n                                    <Trans i18nKey=\"send:ccc.balance\" />\n                                </h4>\n                                <div className=\"ccc-text number\">\n                                    <span className=\"mr-2\">\n                                        {availableQuark.toLocaleString()}\n                                    </span>\n                                    <span>CCC</span>\n                                </div>\n                                <div className=\"mt-4\">\n                                    <button\n                                        className=\"btn btn-primary square reverse send-btn mr-3 mb-3\"\n                                        onClick={this.openSendingCCC}\n                                        disabled={sendingCCC}\n                                    >\n                                        <Trans i18nKey=\"send:ccc.button\" />\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"element-container\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:ccc.recent.title\" />\n                                </h4>\n                                <PayTxHistory address={address} />\n                            </div>\n                        </div>\n                    </div>\n                    {sendingCCC && (\n                        <div className=\"right-container\">\n                            <div className=\"right-panel\">\n                                <SendCCC\n                                    address={address}\n                                    onClose={this.handleCloseSendingCCC}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    private openSendingCCC = () => {\n        window.scrollTo(0, 0);\n        this.setState({ sendingCCC: true });\n    };\n\n    private handleCloseSendingCCC = () => {\n        this.setState({\n            sendingCCC: false\n        });\n    };\n\n    private init = async () => {\n        this.clearInterval();\n        this.refresher = setInterval(() => {\n            this.fetchAll();\n        }, 10000);\n        this.fetchAll();\n    };\n    private clearInterval = () => {\n        if (this.refresher) {\n            clearInterval(this.refresher);\n        }\n    };\n    private fetchAll = async () => {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        this.props.fetchAvailableQuark(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const {\n        match: {\n            params: { address }\n        }\n    } = props;\n    const availableQuark = state.accountReducer.availableQuark[address];\n    const assetAddress = _.find(\n        state.walletReducer.platformAddresses,\n        aa => aa.address === address\n    );\n    return {\n        availableQuark,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(Account));\n","import React from \"react\";\nimport { NetworkId } from \"../../model/address\";\nimport { getIndexerHost } from \"../network\";\nconst Identicon = require(\"identicon.js\");\nconst sha256 = require(\"js-sha256\");\n\ninterface Props {\n    data: string;\n    className?: string;\n    size: number;\n    isAssetImage: boolean;\n    networkId: NetworkId;\n}\ninterface State {\n    requestUrl?: string;\n}\n\nexport class ImageLoader extends React.Component<Props, State> {\n    constructor(prop: Props) {\n        super(prop);\n        let requestUrl;\n        if (prop.isAssetImage) {\n            const host = getIndexerHost(prop.networkId || \"cc\");\n            requestUrl = `${host}/api/asset-image/${prop.data}`;\n        } else {\n            requestUrl = this.getDefaultImage();\n        }\n        this.state = {\n            requestUrl\n        };\n    }\n\n    public render() {\n        const { className, size } = this.props;\n        const { requestUrl } = this.state;\n\n        return (\n            <img\n                className={className}\n                style={{ verticalAlign: \"middle\", width: size, height: size }}\n                src={requestUrl}\n                alt={\"loader\"}\n                onError={this.fallback}\n            />\n        );\n    }\n\n    private getDefaultImage = () => {\n        const hash = sha256.create();\n        hash.update(this.props.data);\n        const identiconData = new Identicon(\n            hash.hex(),\n            this.props.size\n        ).toString();\n        return `data:image/png;base64,${identiconData}`;\n    };\n\n    private fallback = () => {\n        this.setState({ requestUrl: this.getDefaultImage() });\n    };\n}\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AddressType, NetworkId, WalletAddress } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport \"./AddressItem.css\";\n\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport accountActions from \"../../../redux/account/accountActions\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport copyBtnHover from \"./img/copy-hover.svg\";\nimport copyBtn from \"./img/copy.svg\";\n\ninterface OwnProps {\n    walletAddress: WalletAddress;\n    className?: string | null;\n}\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    fetchAvailableAssets: (address: string) => void;\n}\ninterface StateProps {\n    availableQuark?: U64 | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n}\ninterface State {\n    isCopyHovering: boolean;\n}\n\ntype Props = WithTranslation &\n    RouteComponentProps &\n    OwnProps &\n    DispatchProps &\n    StateProps;\n\nclass AddressItem extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isCopyHovering: false\n        };\n    }\n    public componentDidMount() {\n        const {\n            walletAddress,\n            fetchAvailableQuark,\n            fetchAvailableAssets\n        } = this.props;\n        if (walletAddress.type === AddressType.Platform) {\n            fetchAvailableQuark(walletAddress.address);\n        }\n        if (walletAddress.type === AddressType.Asset) {\n            fetchAvailableAssets(walletAddress.address);\n        }\n    }\n    public render() {\n        const {\n            walletAddress,\n            className,\n            availableQuark,\n            availableAssets,\n            networkId\n        } = this.props;\n        const { isCopyHovering } = this.state;\n        return (\n            <div\n                className={`Address-item animated fadeIn ${className}`}\n                onClick={this.handleClick}\n            >\n                <div\n                    className={`item-body ${\n                        walletAddress.type === AddressType.Platform\n                            ? \"platform-type\"\n                            : \"asset-type\"\n                    }`}\n                >\n                    <div>\n                        <p className=\"address-name mb-0\">\n                            <Trans\n                                i18nKey=\"main:address\"\n                                values={{\n                                    index: walletAddress.index + 1\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <span className=\"address-text mono\">\n                        {walletAddress.address.slice(0, 10)}\n                        ...\n                        {walletAddress.address.slice(\n                            walletAddress.address.length - 10,\n                            walletAddress.address.length\n                        )}\n                    </span>\n                    <CopyToClipboard\n                        text={walletAddress.address}\n                        onCopy={this.handleCopyAddress}\n                    >\n                        <img\n                            className=\"ml-3\"\n                            src={isCopyHovering ? copyBtnHover : copyBtn}\n                            alt={\"copy\"}\n                            onMouseOver={this.hoverCopyBtn}\n                            onMouseOut={this.outCopyBtn}\n                        />\n                    </CopyToClipboard>\n                </div>\n                {walletAddress.type === AddressType.Platform && (\n                    <div className=\"platform-account\">\n                        {availableQuark ? (\n                            <span className=\"number balance\">\n                                {availableQuark.toLocaleString()} CCC\n                            </span>\n                        ) : (\n                            <span className=\"number balance\">\n                                <Trans i18nKey=\"main:address_loading\" />\n                            </span>\n                        )}\n                    </div>\n                )}\n                {walletAddress.type === AddressType.Asset && (\n                    <div className=\"platform-account\">\n                        {availableAssets ? (\n                            availableAssets.length > 0 ? (\n                                [\n                                    availableAssets.slice(0, 3).map(a => (\n                                        <div\n                                            className=\"asset-image\"\n                                            key={a.assetType}\n                                        >\n                                            <ImageLoader\n                                                isAssetImage={true}\n                                                data={a.assetType}\n                                                size={37}\n                                                networkId={networkId}\n                                            />\n                                        </div>\n                                    )),\n                                    availableAssets.length > 3 && (\n                                        <span key=\"others\" className=\"balance\">\n                                            + {availableAssets.length - 3}\n                                        </span>\n                                    )\n                                ]\n                            ) : (\n                                <span className=\"balance\">\n                                    <Trans i18nKey=\"main:asset.no_asset\" />\n                                </span>\n                            )\n                        ) : (\n                            <span className=\"number balance\">\n                                <Trans i18nKey=\"main:address_loading\" />\n                            </span>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n    private handleClick = () => {\n        const { walletAddress, history } = this.props;\n        const { isCopyHovering } = this.state;\n        if (isCopyHovering) {\n            return;\n        }\n        if (walletAddress.type === AddressType.Platform) {\n            history.push(`/${walletAddress.address}/account`);\n        } else {\n            history.push(`/${walletAddress.address}/assets`);\n        }\n    };\n    private hoverCopyBtn = () => {\n        this.setState({ isCopyHovering: true });\n    };\n    private outCopyBtn = () => {\n        this.setState({ isCopyHovering: false });\n    };\n    private handleCopyAddress = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { walletAddress } = props;\n    const availableQuark =\n        state.accountReducer.availableQuark[walletAddress.address];\n    const availableAssets =\n        state.assetReducer.availableAssets[walletAddress.address];\n    return {\n        availableQuark,\n        availableAssets,\n        networkId: state.globalReducer.networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(withTranslation()(AddressItem)));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport actions from \"../../redux/wallet/walletActions\";\nimport AddressItem from \"./AddressItem/AddressItem\";\nimport \"./AddressList.css\";\n\ninterface StateProps {\n    platformAddresses?: WalletAddress[] | null;\n    assetAddresses?: WalletAddress[] | null;\n    networkId: NetworkId;\n    isLoadingAssetAddresses?: boolean | null;\n    isLoadingPlatformAddresses?: boolean | null;\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    createWalletAssetAddress: () => void;\n    createWalletPlatformAddress: () => void;\n}\ntype Props = WithTranslation & StateProps & DispatchProps;\n\nclass AddressList extends React.Component<Props> {\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n    }\n    public componentWillReceiveProps(props: Props) {\n        const { networkId } = this.props;\n        const { networkId: nextNetworkId } = props;\n        if (networkId !== nextNetworkId) {\n            this.props.fetchWalletFromStorageIfNeed();\n        }\n    }\n    public render() {\n        const { platformAddresses, assetAddresses, networkId } = this.props;\n        return (\n            <div className=\"Address-list animated fadeIn\">\n                <Container>\n                    <div className=\"asset-address-container mb-5\">\n                        <div className=\"deco asset-title-deco\" />\n                        <h5 className=\"mb-1\">\n                            <Trans i18nKey=\"main:asset.title\" />\n                        </h5>\n                        <div className=\"mb-4 address-description\">\n                            <span>\n                                <Trans i18nKey=\"main:asset.detail\" />\n                            </span>\n                        </div>\n                        <Row className=\"address-item-container\">\n                            {_.map(assetAddresses, (address, index: number) => (\n                                <Col md={6} lg={4} xl={3} key={index}>\n                                    <AddressItem walletAddress={address} />\n                                </Col>\n                            ))}\n                            <Col md={6} lg={4} xl={3}>\n                                {!assetAddresses ? (\n                                    <div className=\"restoring\">\n                                        <Trans i18nKey=\"main:asset.restore\" />\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div\n                                            onClick={this.createAssetAddress}\n                                            className=\"add-address-btn d-flex align-items-center justify-content-center\"\n                                        >\n                                            <Trans i18nKey=\"main:asset.add\" />\n                                            <FontAwesomeIcon\n                                                className=\"ml-2\"\n                                                icon=\"plus-circle\"\n                                            />\n                                        </div>\n                                        {assetAddresses.length > 0 && (\n                                            <Link to=\"/mint\">\n                                                <div className=\"mint-asset-btn d-flex align-items-center justify-content-center\">\n                                                    <Trans i18nKey=\"main:asset.mint\" />\n                                                </div>\n                                            </Link>\n                                        )}\n                                    </div>\n                                )}\n                            </Col>\n                        </Row>\n                    </div>\n                    <hr />\n                    <div className=\"platform-address-container\">\n                        <div className=\"deco platform-title-deco\" />\n                        <h5 className=\"mb-1\">\n                            <Trans i18nKey=\"main:ccc.title\" />\n                        </h5>\n                        <div className=\"mb-4 address-description\">\n                            <span>\n                                <Trans i18nKey=\"main:ccc.detail\" />\n                            </span>\n                        </div>\n                        <Row className=\"address-item-container\">\n                            {_.map(\n                                platformAddresses,\n                                (address, index: number) => (\n                                    <Col md={6} lg={4} xl={3} key={index}>\n                                        <AddressItem walletAddress={address} />\n                                    </Col>\n                                )\n                            )}\n                            <Col md={6} lg={4} xl={3}>\n                                {!platformAddresses ? (\n                                    <div className=\"restoring\">\n                                        <Trans i18nKey=\"main:ccc.restore\" />\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div\n                                            onClick={this.createPlatformAddress}\n                                            className=\"add-address-btn d-flex align-items-center justify-content-center\"\n                                        >\n                                            <Trans i18nKey=\"main:ccc.add\" />\n                                            <FontAwesomeIcon\n                                                className=\"ml-2\"\n                                                icon=\"plus-circle\"\n                                            />\n                                        </div>\n                                        {platformAddresses.length > 0 &&\n                                            (networkId === \"wc\" && (\n                                                <a\n                                                    href=\"https://corgi.codechain.io/faucet\"\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                >\n                                                    <div className=\"buy-CCC-btn d-flex align-items-center justify-content-center\">\n                                                        <Trans i18nKey=\"main:ccc.faucet\" />\n                                                    </div>\n                                                </a>\n                                            ))}\n                                    </div>\n                                )}\n                            </Col>\n                        </Row>\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n    private createPlatformAddress = async () => {\n        const { createWalletPlatformAddress } = this.props;\n        createWalletPlatformAddress();\n    };\n\n    private createAssetAddress = async () => {\n        const { createWalletAssetAddress } = this.props;\n        createWalletAssetAddress();\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    platformAddresses: state.walletReducer.platformAddresses,\n    assetAddresses: state.walletReducer.assetAddresses,\n    networkId: state.globalReducer.networkId,\n    isLoadingAssetAddresses: state.walletReducer.isLoadingAssetAddresses,\n    isLoadingPlatformAddresses: state.walletReducer.isLoadingPlatformAddresses\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(actions.fetchWalletFromStorageIfNeed());\n    },\n    createWalletPlatformAddress: () => {\n        dispatch(actions.createWalletPlatformAddress());\n    },\n    createWalletAssetAddress: () => {\n        dispatch(actions.createWalletAssetAddress());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AddressList));\n","export const parseMetadata = (metadata: string): Metadata => {\n    try {\n        return JSON.parse(metadata);\n    } catch {\n        return {};\n    }\n};\n\nexport interface Metadata {\n    name?: string;\n    description?: string;\n    icon_url?: string;\n    gateway?: { url?: string };\n}\n","import { AssetSchemeDoc, TransactionDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport MediaQuery from \"react-responsive\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../../model/address\";\nimport { ReducerConfigure } from \"../../../../redux\";\nimport assetActions from \"../../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../../../utils/metadata\";\nimport { getExplorerHost } from \"../../../../utils/network\";\n\ninterface OwnProps {\n    index: number;\n    timestamp: number;\n    networkId: NetworkId;\n    tx: TransactionDoc;\n    isPending: boolean;\n    history: {\n        assetType: string;\n        inputQuantities: U64;\n        outputQuantities: U64;\n        burnQuantities: U64;\n    };\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\nclass AssetTxItemEntity extends React.Component<Props, any> {\n    public componentDidMount() {\n        this.props.fetchAssetSchemeIfNeed(\n            new H160(this.props.history.assetType)\n        );\n    }\n    public render() {\n        const {\n            history,\n            timestamp,\n            networkId,\n            tx,\n            isPending,\n            assetScheme,\n            t\n        } = this.props;\n\n        let metadata;\n        if (assetScheme) {\n            metadata = parseMetadata(assetScheme.metadata);\n        }\n        return (\n            <div className=\"d-flex Asset-tx-item align-items-center\">\n                <div className=\"date-container number\">\n                    <MediaQuery query=\"(max-width: 768px)\">\n                        {moment.unix(timestamp).format(\"MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                    <MediaQuery query=\"(min-width: 769px)\">\n                        {moment.unix(timestamp).format(\"YYYY-MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                </div>\n                <div className=\"asset-info-container\">\n                    <div className=\"d-flex\">\n                        <ImageLoader\n                            className=\"asset-image mr-2\"\n                            data={history.assetType}\n                            size={18}\n                            isAssetImage={true}\n                            networkId={networkId}\n                        />\n                        <span className=\"asset-name\">\n                            {(metadata && metadata.name) ||\n                                `0x${history.assetType}`}\n                        </span>\n                    </div>\n                    <a\n                        className=\"mono transaction-hash\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`${getExplorerHost(networkId)}/tx/${tx.hash}`}\n                    >\n                        0x\n                        {tx.hash}\n                    </a>\n                    {tx.type === \"transferAsset\" &&\n                        tx.transferAsset.metadata &&\n                        tx.transferAsset.metadata !== \"\" && (\n                            <div className=\"memo-container\">\n                                <span className=\"memo-text\">\n                                    {t(\"main:memo\")}:{\" \"}\n                                    {tx.transferAsset.metadata}\n                                </span>\n                            </div>\n                        )}\n                </div>\n                <div className=\"balance-container number\">\n                    {this.renderQuantity(history)}\n                </div>\n                <div className=\"status-container\">\n                    {isPending ? (\n                        <span className=\"pending\">\n                            <Trans i18nKey=\"main:pending\" />\n                        </span>\n                    ) : (\n                        <span className=\"confirmed\">\n                            <Trans i18nKey=\"main:confirmed\" />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    private renderQuantity = (history: {\n        assetType: string;\n        inputQuantities: U64;\n        outputQuantities: U64;\n        burnQuantities: U64;\n    }) => {\n        if (\n            history.outputQuantities.gt(\n                U64.plus(history.inputQuantities, history.burnQuantities)\n            )\n        ) {\n            const quantity = U64.minus(\n                history.outputQuantities,\n                U64.plus(history.inputQuantities, history.burnQuantities)\n            );\n            return `+${quantity.toLocaleString()}`;\n        } else {\n            const quantity = U64.minus(\n                U64.plus(history.inputQuantities, history.burnQuantities),\n                history.outputQuantities\n            );\n            return `-${quantity.toLocaleString()}`;\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const assetScheme =\n        state.assetReducer.assetScheme[ownProps.history.assetType];\n    return {\n        assetScheme: assetScheme && assetScheme.data\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetTxItemEntity));\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { NetworkId } from \"../../../model/address\";\nimport { TxUtil } from \"../../../utils/transaction\";\nimport \"./AssetTxItem.css\";\nimport AssetTxItemEntity from \"./AssetTxItemEntity\";\n\ninterface Props {\n    tx: TransactionDoc;\n    isPending: boolean;\n    timestamp: number;\n    address: string;\n    networkId: NetworkId;\n}\n\nexport default class AssetTxItem extends React.Component<Props, any> {\n    public render() {\n        const { tx, address, networkId, isPending, timestamp } = this.props;\n        const assetHistory = TxUtil.getAggsAsset(address, tx);\n        return _.map(assetHistory, (history, index) => (\n            <AssetTxItemEntity\n                key={`${history.assetType}-${index}`}\n                tx={tx}\n                history={history}\n                index={index}\n                timestamp={timestamp}\n                isPending={isPending}\n                networkId={networkId}\n            />\n        ));\n    }\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TransactionDoc } from \"codechain-indexer-types\";\nimport { H160 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport Pagination from \"react-js-pagination\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport { getIdByAddressAssetType } from \"../../redux/chain/chainReducer\";\nimport \"./AssetTxHistory.css\";\nimport AssetTxItem from \"./AssetTxItem/AssetTxItem\";\nimport Empty from \"./img/cautiondisabled.svg\";\n\ninterface OwnProps {\n    address: string;\n    assetType?: H160;\n}\n\ninterface StateProps {\n    pendingTxList?: TransactionDoc[] | null;\n    txList?: TransactionDoc[] | null;\n    networkId: NetworkId;\n}\n\ninterface DispatchProps {\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchTxListIfNeed: (address: string, page: number) => void;\n    fetchTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160,\n        page: number\n    ) => void;\n}\n\ninterface State {\n    activePage: number;\n}\n\ntype Props = WithTranslation & StateProps & OwnProps & DispatchProps;\n\nclass AssetTxHistory extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            activePage: 1\n        };\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const { pendingTxList, txList, address, networkId } = this.props;\n        if (!pendingTxList || !txList) {\n            return <div>Loading...</div>;\n        }\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        return (\n            <div className=\"Asset-tx-history\">\n                {validPendingTxList.length + txList.length === 0 && (\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div>\n                            <div className=\"text-center mt-3\">\n                                <img src={Empty} alt={\"empty\"} />\n                            </div>\n                            <div className=\"mt-3 empty\">\n                                <Trans i18nKey=\"send:asset.recent.empty\" />\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {_.map(validPendingTxList, pendingTx => (\n                    <AssetTxItem\n                        key={pendingTx.hash}\n                        tx={pendingTx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={true}\n                        timestamp={pendingTx.pendingTimestamp!}\n                    />\n                ))}\n                {_.map(txList, tx => (\n                    <AssetTxItem\n                        key={tx.hash}\n                        tx={tx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={false}\n                        timestamp={tx.timestamp!}\n                    />\n                ))}\n                {(this.state.activePage > 1 || txList.length > 0) && (\n                    <div className=\"pagination-container\">\n                        <Pagination\n                            activePage={this.state.activePage}\n                            itemsCountPerPage={10}\n                            totalItemsCount={\n                                (this.state.activePage - 1) * 10 +\n                                (txList.length + 1)\n                            }\n                            pageRangeDisplayed={5}\n                            onChange={this.handlePageChange}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            prevPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            nextPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            firstPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            lastPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private handlePageChange = (pageNumber: number) => {\n        const {\n            address,\n            fetchTxListIfNeed,\n            fetchTxListByAssetTypeIfNeed,\n            assetType\n        } = this.props;\n        this.setState({ activePage: pageNumber });\n\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType, pageNumber);\n        } else {\n            fetchTxListIfNeed(address, pageNumber);\n        }\n    };\n\n    private init = async () => {\n        this.fetchAll();\n    };\n\n    private fetchAll = () => {\n        const {\n            address,\n            fetchPendingTxListIfNeed,\n            fetchTxListIfNeed,\n            assetType,\n            fetchTxListByAssetTypeIfNeed\n        } = this.props;\n        const { activePage } = this.state;\n        fetchPendingTxListIfNeed(address);\n\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType, activePage);\n        } else {\n            fetchTxListIfNeed(address, activePage);\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { address, assetType } = props;\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const txList = assetType\n        ? state.chainReducer.txListById[\n              getIdByAddressAssetType(address, assetType)\n          ]\n        : state.chainReducer.txList[address];\n    const networkId = state.globalReducer.networkId;\n    return {\n        pendingTxList: pendingTxList && pendingTxList.data,\n        txList: txList && txList.data,\n        networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchTxListIfNeed: (address: string, page: number) => {\n        dispatch(\n            chainActions.fetchTxListIfNeed(address, {\n                page,\n                itemsPerPage: 10,\n                force: true\n            })\n        );\n    },\n    fetchTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160,\n        page: number\n    ) => {\n        dispatch(\n            chainActions.fetchTxListByAssetTypeIfNeed(address, assetType, {\n                page,\n                itemsPerPage: 10,\n                force: true\n            })\n        );\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetTxHistory));\n","import BigNumber from \"bignumber.js\";\nimport { AssetSchemeDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Col, Row } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport assetActions from \"../../redux/asset/assetActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport { ImageLoader } from \"../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../utils/metadata\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport AssetTxHistory from \"../AssetTxHistory/AssetTxHistory\";\nimport \"./AssetDetail.css\";\n\ninterface OwnProps {\n    match: match<{ address: string; assetType: string }>;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n    networkId: NetworkId;\n    availableAsset?: {\n        assetType: string;\n        quantities: U64;\n    } | null;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\n\nclass AssetDetail extends React.Component<Props, any> {\n    public async componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const {\n            assetScheme,\n            match: {\n                params: { assetType, address }\n            },\n            networkId,\n            availableAsset,\n            addressIndex,\n            t\n        } = this.props;\n        if (!assetScheme || !availableAsset) {\n            return null;\n        }\n\n        const metadata = parseMetadata(assetScheme.metadata);\n        return (\n            <div className=\"Asset-detail d-flex animated fadeIn\">\n                <div className=\"panel mx-auto\">\n                    <AddressContainer\n                        address={address}\n                        backButtonPath={`/${address}/assets`}\n                        addressIndex={addressIndex}\n                    />\n                    <div className=\"detail-history-container\">\n                        <h4 className=\"mr-auto\">\n                            <Trans i18nKey={\"asset:title\"} />\n                        </h4>\n                        <div className=\"d-flex mt-4 mb-4 align-itmes-center\">\n                            <ImageLoader\n                                className=\"asset-image\"\n                                data={assetType}\n                                size={65}\n                                isAssetImage={true}\n                                networkId={networkId}\n                            />\n                            <div className=\"ml-4 name-quantity-container\">\n                                <h4 className=\"mb-0\">\n                                    {metadata.name || \"None\"}\n                                </h4>\n                                <div className=\"mono asset-type\">\n                                    0x\n                                    {new H160(assetType).value}\n                                </div>\n                                <div>\n                                    <span className=\"total-text mr-3\">\n                                        <Trans i18nKey={\"asset:total\"} />\n                                    </span>\n                                    <span className=\"quantity-text number\">\n                                        {availableAsset.quantities.toLocaleString()}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className=\"info-container\">\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey={\"asset:description\"} />\n                                </Col>\n                                <Col md={10}>\n                                    {metadata.description || t(\"asset:none\")}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey=\"asset:approver\" />\n                                </Col>\n                                <Col md={10}>\n                                    {assetScheme.approver || t(\"asset:none\")}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey=\"asset:total_supply\" />\n                                </Col>\n                                <Col md={10}>\n                                    {new BigNumber(\n                                        assetScheme.supply\n                                    ).toFormat()}\n                                </Col>\n                            </Row>\n                        </div>\n                        <h4 className=\"mb-3\">\n                            <Trans i18nKey=\"asset:recent_transactions\" />\n                        </h4>\n                        <AssetTxHistory\n                            address={address}\n                            assetType={new H160(assetType)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private init = () => {\n        const {\n            match: {\n                params: { assetType, address }\n            }\n        } = this.props;\n        this.props.fetchAssetSchemeIfNeed(new H160(assetType));\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const {\n        match: {\n            params: { assetType, address }\n        }\n    } = ownProps;\n    const assetScheme =\n        state.assetReducer.assetScheme[new H160(assetType).value];\n    const networkId = state.globalReducer.networkId;\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const availableAsset = _.find(\n        availableAssets,\n        asset => asset.assetType === new H160(assetType).value\n    );\n    const assetAddress = _.find(\n        state.walletReducer.assetAddresses,\n        aa => aa.address === address\n    );\n    return {\n        assetScheme: assetScheme && assetScheme.data,\n        networkId,\n        availableAsset,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetDetail));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { AssetSchemeDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../../utils/metadata\";\nimport \"./AssetItem.css\";\n\ninterface OwnProps {\n    assetType: string;\n    quantities: U64;\n    networkId: NetworkId;\n    address: string;\n\n    isSelected: boolean;\n    onSelect: (assetType: string) => void;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n}\n\ntype Props = RouteComponentProps & OwnProps & StateProps & DispatchProps;\n\nclass AssetItem extends React.Component<Props, any> {\n    public constructor(props: Props) {\n        super(props);\n    }\n    public componentDidMount() {\n        this.props.fetchAssetSchemeIfNeed(new H160(this.props.assetType));\n    }\n    public render() {\n        const {\n            assetType,\n            quantities,\n            networkId,\n            isSelected,\n            assetScheme\n        } = this.props;\n        let metadata;\n        if (assetScheme) {\n            metadata = parseMetadata(assetScheme.metadata);\n        }\n        return (\n            <div\n                onClick={this.handleClick}\n                className={`Asset-item animated-fadeIn ${isSelected &&\n                    \"selected\"}`}\n            >\n                <div className=\"d-flex align-items-center\">\n                    <div className=\"image-container\">\n                        <ImageLoader\n                            data={assetType}\n                            size={48}\n                            isAssetImage={true}\n                            networkId={networkId}\n                        />\n                    </div>\n                    <div className=\"name-container\">\n                        <span className=\"mb-0 asset-name\">\n                            {(metadata && metadata.name) ||\n                                `...${assetType.slice(\n                                    assetType.length - 8,\n                                    assetType.length\n                                )}`}\n                        </span>\n                    </div>\n                    <span className=\"mb-0 number asset-quantities\">\n                        {quantities.toLocaleString()}\n                    </span>\n                    <div onClick={this.handleClickInfo} className=\"info-icon\">\n                        <FontAwesomeIcon icon=\"info-circle\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private handleClick = () => {\n        const { assetType, onSelect } = this.props;\n        onSelect(assetType);\n    };\n\n    private handleClickInfo = () => {\n        const { assetType, address } = this.props;\n        this.props.history.push(`/${address}/${assetType}`);\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const assetScheme = state.assetReducer.assetScheme[ownProps.assetType];\n    return {\n        assetScheme: assetScheme && assetScheme.data\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(AssetItem));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport ValidationInput from \"../../../../ValidationInput/ValidationInput\";\n\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport \"./ReceiverItem.css\";\n\ninterface OwnProps {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    remainingAsset: U64;\n    onAddressChange: (index: number, address: string) => void;\n    onQuantityChange: (index: number, quantity: string) => void;\n    onAddressValidationCheck: (index: number) => void;\n    onQuantityValidationCheck: (index: number) => void;\n    isAddressValid?: boolean;\n    isQuantityValid?: boolean;\n    addressError?: string;\n    quantityError?: string;\n    index: number;\n    onRemove: (index: number) => void;\n    hideCancel?: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass ReceiverItem extends React.Component<Props> {\n    public render() {\n        const {\n            t,\n            receiver,\n            index,\n            isAddressValid,\n            isQuantityValid,\n            addressError,\n            quantityError,\n            hideCancel\n        } = this.props;\n        return (\n            <div className=\"Receiver-item animated fadeIn\">\n                <div className=\"d-flex align-items-end\">\n                    {!hideCancel && (\n                        <span className=\"mr-auto receiver-item-index\">\n                            {index + 1}\n                        </span>\n                    )}\n                    {!hideCancel && (\n                        <span\n                            className=\"receiver-item-cancel\"\n                            onClick={this.handleRemove}\n                        >\n                            {t(\"send:asset.remove\")}{\" \"}\n                            <FontAwesomeIcon icon=\"times\" />\n                        </span>\n                    )}\n                </div>\n                <ValidationInput\n                    value={receiver.address}\n                    onChange={this.handleChangeAddressInput}\n                    labelText={t(\"send:asset.receiver.label\")}\n                    placeholder={t(\"send:asset.receiver.placeholder\")}\n                    showValidation={true}\n                    isValid={isAddressValid}\n                    onBlur={this.handleBlurAddressInput}\n                    error={addressError}\n                />\n                <div className=\"d-flex align-items-end\">\n                    <ValidationInput\n                        value={receiver.quantity}\n                        onChange={this.handleChangeQuantitiesInput}\n                        labelText={t(\"send:asset.quantity.label\")}\n                        placeholder={t(\"send:asset.quantity.placeholder\")}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isQuantityValid}\n                        onBlur={this.handleBlurQuantityInput}\n                        error={quantityError}\n                        decimalScale={0}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary max-btn\"\n                        onClick={this.handleMaxValueClick}\n                    >\n                        <Trans i18nKey=\"main:max\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleRemove = () => {\n        const { index, onRemove } = this.props;\n        onRemove(index);\n    };\n\n    private handleBlurAddressInput = () => {\n        const { index, onAddressValidationCheck } = this.props;\n        onAddressValidationCheck(index);\n    };\n\n    private handleBlurQuantityInput = () => {\n        const { index, onQuantityValidationCheck } = this.props;\n        onQuantityValidationCheck(index);\n    };\n\n    private handleMaxValueClick = () => {\n        const { index, onQuantityChange, remainingAsset } = this.props;\n        onQuantityChange(index, remainingAsset.toString(10));\n    };\n\n    private handleChangeAddressInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { index, onAddressChange } = this.props;\n        onAddressChange(index, event.target.value);\n    };\n\n    private handleChangeQuantitiesInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { index, onQuantityChange } = this.props;\n        onQuantityChange(index, event.target.value);\n    };\n}\n\nexport default withTranslation()(ReceiverItem);\n","import BigNumber from \"bignumber.js\";\nimport { AssetTransferAddress, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { WalletAddress } from \"../../../../model/address\";\nimport { ReducerConfigure } from \"../../../../redux\";\nimport accountActions from \"../../../../redux/account/accountActions\";\nimport walletActions from \"../../../../redux/wallet/walletActions\";\nimport TooltipLabel from \"../../../TooltipLabel\";\nimport ValidationInput from \"../../../ValidationInput/ValidationInput\";\nimport \"./ReceiverContainer.css\";\nimport ReceiverItem from \"./ReceiverItem/ReceiverItem\";\n\ninterface State {\n    receivers: {\n        address: string;\n        quantity: string;\n    }[];\n    addressValidations: {\n        [index: number]:\n            | {\n                  isAddressValid?: boolean;\n                  addressError?: string;\n              }\n            | undefined;\n    };\n    quantityValidations: {\n        [index: number]:\n            | {\n                  isQuantityValid?: boolean;\n                  quantityError?: string;\n              }\n            | undefined;\n    };\n    fee: string;\n    feePayer?: string;\n    isFeeValid?: boolean;\n    feeError?: string;\n    memo: string;\n    memoError?: string;\n    isMemoValid?: boolean;\n}\n\ninterface OwnProps {\n    address: string;\n    totalQuantity: U64;\n    onSubmit: (\n        receivers: { address: string; quantity: U64 }[],\n        memo: string,\n        fee?: {\n            payer: string;\n            quantity: U64;\n        } | null\n    ) => void;\n    gatewayURL?: string | null;\n    isSendingTx: boolean;\n}\n\ninterface StateProps {\n    platformAddresses?: WalletAddress[] | null;\n    availableQuarkList: { [address: string]: U64 | null | undefined };\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    fetchAvailableQuark: (address: string) => void;\n}\n\ntype Props = WithTranslation & OwnProps & DispatchProps & StateProps;\n\nconst MinimumFee = 100;\nclass ReceiverContainer extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            receivers: [\n                {\n                    address: \"\",\n                    quantity: \"\"\n                }\n            ],\n            addressValidations: {},\n            quantityValidations: {},\n            fee: \"\",\n            feePayer: undefined,\n            isFeeValid: undefined,\n            feeError: undefined,\n            memo: \"\",\n            memoError: undefined,\n            isMemoValid: undefined\n        };\n    }\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n        if (this.props.platformAddresses) {\n            if (this.props.platformAddresses.length > 0) {\n                this.selectFeePayer(this.props.platformAddresses[0].address);\n            }\n        }\n    }\n    public componentWillUpdate(nextProps: Props) {\n        if (!this.props.platformAddresses && nextProps.platformAddresses) {\n            if (nextProps.platformAddresses) {\n                if (nextProps.platformAddresses.length > 0) {\n                    this.selectFeePayer(nextProps.platformAddresses[0].address);\n                }\n            }\n        }\n    }\n    public render() {\n        const {\n            receivers,\n            addressValidations,\n            quantityValidations,\n            fee,\n            feePayer,\n            isFeeValid,\n            feeError,\n            memo,\n            memoError,\n            isMemoValid\n        } = this.state;\n        const {\n            t,\n            platformAddresses,\n            gatewayURL,\n            availableQuarkList,\n            isSendingTx\n        } = this.props;\n        if (!platformAddresses) {\n            return <span>Loading...</span>;\n        }\n        return (\n            <div className=\"Receiver-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"receivers\">\n                        {_.map(receivers, (receiver, index) => (\n                            <ReceiverItem\n                                hideCancel={receivers.length === 1}\n                                key={`receiver-${index}`}\n                                receiver={receiver}\n                                onAddressChange={this.handleAddressChange}\n                                onQuantityChange={this.handleQuantityChange}\n                                remainingAsset={this.calculateRemainingAsset(\n                                    index\n                                )}\n                                index={index}\n                                onAddressValidationCheck={\n                                    this.handleAddressValidationCheck\n                                }\n                                onQuantityValidationCheck={\n                                    this.handleQuantityValidationCheck\n                                }\n                                isAddressValid={\n                                    addressValidations[index] &&\n                                    addressValidations[index]!.isAddressValid\n                                }\n                                isQuantityValid={\n                                    quantityValidations[index] &&\n                                    quantityValidations[index]!.isQuantityValid\n                                }\n                                addressError={\n                                    addressValidations[index] &&\n                                    addressValidations[index]!.addressError\n                                }\n                                quantityError={\n                                    quantityValidations[index] &&\n                                    quantityValidations[index]!.quantityError\n                                }\n                                onRemove={this.handleRemoveReceiver}\n                            />\n                        ))}\n                    </div>\n                    {receivers.length < 10 && (\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-primary add-receiver-btn\"\n                                onClick={this.handleAddReceiver}\n                            >\n                                <Trans i18nKey=\"send:asset.add\" />\n                            </button>\n                        </div>\n                    )}\n                    <div className=\"memo-container\">\n                        <ValidationInput\n                            labelText={t(\"send:asset.memo.label\")}\n                            value={memo}\n                            isValid={isMemoValid}\n                            error={memoError}\n                            showValidation={true}\n                            placeholder={t(\"send:asset.memo.placeholder\")}\n                            onBlur={this.checkMemo}\n                            onChange={this.handleChangeMemo}\n                        />\n                    </div>\n                    {gatewayURL == null && (\n                        <div className=\"d-flex fee-container\">\n                            <div className=\"fee-input-container\">\n                                <ValidationInput\n                                    value={fee}\n                                    onChange={this.handleChangeFee}\n                                    showValidation={true}\n                                    labelText={t(\"send:asset.fee.label\")}\n                                    type=\"number\"\n                                    decimalScale={0}\n                                    placeholder={\n                                        !feePayer\n                                            ? \"select payer\"\n                                            : !availableQuarkList[feePayer]\n                                            ? \"loading...\"\n                                            : \"100 (CCC)\"\n                                    }\n                                    tooltip=\"send:asset.fee.tooltip\"\n                                    disable={\n                                        feePayer == null ||\n                                        (feePayer != null &&\n                                            availableQuarkList[feePayer] ==\n                                                null)\n                                    }\n                                    onBlur={this.checkFeeValidation}\n                                    isValid={isFeeValid}\n                                    error={feeError}\n                                />\n                            </div>\n                            <div className=\"fee-payer-container\">\n                                <div className=\"payer-label\">\n                                    <Trans i18nKey=\"send:asset.payer.label\" />\n                                    <TooltipLabel tooltip=\"send:asset.payer.tooltip\" />\n                                </div>\n                                {platformAddresses.length === 0 ? (\n                                    <select\n                                        className=\"form-control\"\n                                        disabled={true}\n                                    >\n                                        <option>\n                                            {t(\"send:asset.payer.empty\")}\n                                        </option>\n                                    </select>\n                                ) : (\n                                    <div>\n                                        <select\n                                            className=\"form-control\"\n                                            value={feePayer}\n                                            defaultValue={\"default\"}\n                                            onChange={this.handleChangeFeePayer}\n                                        >\n                                            <option\n                                                value=\"default\"\n                                                disabled={true}\n                                            >\n                                                {t(\"send:asset.payer.select\")}\n                                            </option>\n                                            {_.map(platformAddresses, pa => (\n                                                <option\n                                                    value={pa.address}\n                                                    key={pa.address}\n                                                >\n                                                    CCC{\" \"}\n                                                    {t(\"main:address\", {\n                                                        index: pa.index + 1\n                                                    })}\n                                                </option>\n                                            ))}\n                                        </select>\n                                        {feePayer &&\n                                            availableQuarkList[feePayer] && (\n                                                <span className=\"available-ccc-text number pl-2 pr-2\">\n                                                    {availableQuarkList[\n                                                        feePayer\n                                                    ]!.toLocaleString()}\n                                                    CCC\n                                                </span>\n                                            )}\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"submit-btn-container\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary square w-100 send-btn\"\n                            disabled={isSendingTx}\n                        >\n                            <Trans i18nKey=\"send:asset.button\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    private handleChangeFeePayer = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.selectFeePayer(event.target.value);\n    };\n\n    private selectFeePayer = (address: string) => {\n        this.setState({\n            feePayer: address,\n            fee: `${MinimumFee}`,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n        this.props.fetchAvailableQuark(address);\n    };\n\n    private handleChangeMemo = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            memo: event.target.value\n        });\n    };\n\n    private checkMemo = () => {\n        const { t } = this.props;\n        const { memo } = this.state;\n        if (memo.length > 25) {\n            this.setState({\n                isMemoValid: false,\n                memoError: t(\"send:asset.error.memo.maximum\")\n            });\n            return false;\n        }\n        this.setState({\n            isMemoValid: true,\n            memoError: undefined\n        });\n        return true;\n    };\n\n    private checkFeeValidation = () => {\n        const { fee, feePayer } = this.state;\n        const { t, availableQuarkList } = this.props;\n\n        if (!feePayer) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.not_selected\")\n            });\n            return false;\n        }\n        const availableQuark = availableQuarkList[feePayer];\n        if (!availableQuark) {\n            throw Error(t(\"send:asset.error.fee.invalid_balance\"));\n        }\n        if (fee === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.minimum\", {\n                    minimum: MinimumFee\n                })\n            });\n            return false;\n        }\n\n        if (availableQuark.value.lt(amountFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.not_enough\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleChangeFee = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            fee: event.target.value\n        });\n    };\n\n    private handleRemoveReceiver = (myIndex: number) => {\n        const { receivers } = this.state;\n        const receiversExceptIndex = _.clone(receivers);\n        _.pullAt(receiversExceptIndex, myIndex);\n        this.setState({\n            receivers: receiversExceptIndex\n        });\n    };\n\n    private handleAddReceiver = () => {\n        this.setState({\n            receivers: [...this.state.receivers, { address: \"\", quantity: \"\" }]\n        });\n    };\n\n    private calculateRemainingAsset = (myIndex: number) => {\n        const { receivers } = this.state;\n        const { totalQuantity } = this.props;\n        const receiversExceptIndex = _.clone(receivers);\n        _.pullAt(receiversExceptIndex, myIndex);\n        const currentTotal = _.reduce(\n            receiversExceptIndex,\n            (memo, receiver) =>\n                U64.plus(\n                    memo,\n                    receiver.quantity === \"\" ? 0 : receiver.quantity\n                ),\n            new U64(0)\n        );\n\n        const remainingAsset = U64.minus(totalQuantity, currentTotal);\n        if (remainingAsset.gt(0)) {\n            return remainingAsset;\n        }\n        return new U64(0);\n    };\n\n    private handleAddressValidationCheck = (index: number) => {\n        const { receivers } = this.state;\n        const { t, address: myAddress } = this.props;\n        const address = receivers[index].address;\n        if (address === \"\") {\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: false,\n                        addressError: t(\"send:asset.error.receiver.required\")\n                    }\n                }\n            });\n            return false;\n        }\n        if (address === myAddress) {\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: false,\n                        addressError: t(\n                            \"send:asset.error.receiver.not_available\"\n                        )\n                    }\n                }\n            });\n            return false;\n        }\n        try {\n            AssetTransferAddress.fromString(address);\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: true,\n                        addressError: undefined\n                    }\n                }\n            });\n            return true;\n        } catch (e) {\n            // nothing\n        }\n        this.setState({\n            addressValidations: {\n                ...this.state.addressValidations,\n                [index]: {\n                    ...this.state.addressValidations[index],\n                    isAddressValid: false,\n                    addressError: t(\"send:asset.error.receiver.invalid\")\n                }\n            }\n        });\n        return false;\n    };\n\n    private handleQuantityValidationCheck = (index: number) => {\n        const { receivers } = this.state;\n        const { t, totalQuantity } = this.props;\n        const quantityString = this.state.receivers[index].quantity;\n        if (quantityString === \"\") {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.required\")\n                    }\n                }\n            });\n            return false;\n        }\n        const quantity = new BigNumber(quantityString);\n        if (quantity.isNaN()) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.invalid\")\n                    }\n                }\n            });\n            return false;\n        }\n        if (quantity.lte(0)) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.minimum\")\n                    }\n                }\n            });\n            return false;\n        }\n        const currentTotal = _.reduce(\n            receivers,\n            (memo, receiver) =>\n                U64.plus(\n                    memo,\n                    receiver.quantity === \"\" ? 0 : receiver.quantity\n                ),\n            new U64(0)\n        );\n        if (currentTotal.gt(totalQuantity)) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.not_enough\")\n                    }\n                }\n            });\n            return false;\n        }\n        this.setState({\n            quantityValidations: {\n                ...this.state.quantityValidations,\n                [index]: {\n                    ...this.state.quantityValidations[index],\n                    isQuantityValid: true,\n                    quantityError: undefined\n                }\n            }\n        });\n        return true;\n    };\n\n    private handleAddressChange = (newIndex: number, address: string) => {\n        const { receivers } = this.state;\n        const newReceivers = _.map(receivers, (receiver, index) => {\n            if (index === newIndex) {\n                return {\n                    address,\n                    quantity: receiver.quantity\n                };\n            }\n            return receiver;\n        });\n        this.setState({\n            receivers: newReceivers,\n            addressValidations: {\n                ...this.state.addressValidations,\n                [newIndex]: {\n                    ...this.state.addressValidations[newIndex],\n                    isAddressValid: undefined,\n                    addressError: undefined\n                }\n            }\n        });\n    };\n\n    private handleQuantityChange = (newIndex: number, quantity: string) => {\n        const { receivers } = this.state;\n        const newReceivers = _.map(receivers, (receiver, index) => {\n            if (index === newIndex) {\n                return {\n                    address: receiver.address,\n                    quantity\n                };\n            }\n            return receiver;\n        });\n        this.setState({\n            receivers: newReceivers,\n            quantityValidations: {\n                ...this.state.quantityValidations,\n                [newIndex]: {\n                    ...this.state.quantityValidations[newIndex],\n                    isQuantityValid: undefined,\n                    quantityError: undefined\n                }\n            }\n        });\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { gatewayURL } = this.props;\n        const { receivers, fee, feePayer, memo } = this.state;\n\n        for (let i = 0; i < receivers.length; i++) {\n            if (!this.handleAddressValidationCheck(i)) {\n                return;\n            }\n            if (!this.handleQuantityValidationCheck(i)) {\n                return;\n            }\n        }\n\n        if (!this.checkMemo()) {\n            return;\n        }\n\n        const returnValue = receivers.map(r => ({\n            address: r.address,\n            quantity: new U64(r.quantity)\n        }));\n        if (gatewayURL == null) {\n            if (!this.checkFeeValidation()) {\n                return;\n            }\n            this.props.onSubmit(returnValue, memo, {\n                payer: feePayer!,\n                quantity: new U64(fee)\n            });\n        } else {\n            this.props.onSubmit(returnValue, memo);\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => {\n    const platformAddresses = state.walletReducer.platformAddresses;\n    const availableQuarkList = state.accountReducer.availableQuark;\n    return {\n        platformAddresses,\n        availableQuarkList\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    },\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(ReceiverContainer));\n","import { Action as ReduxAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { NetworkId } from \"../../model/address\";\nimport {\n    clearPassphrase,\n    saveNetworkId,\n    savePassphrase\n} from \"../../utils/storage\";\nimport { ActionType as WalletActions } from \"../wallet/walletActions\";\n\nexport type Action = Login | ClearData | Logout | UpdateNetwork;\n\nexport enum ActionType {\n    Login = \"Login\",\n    ClearData = \"ClearData\",\n    Logout = \"Logout\",\n    UpdateNetwork = \"UpdateNetwork\"\n}\n\nexport interface Login {\n    type: ActionType.Login;\n    data: {\n        passphrase: string;\n    };\n}\n\nexport interface ClearData {\n    type: ActionType.ClearData;\n}\n\nexport interface Logout {\n    type: ActionType.Logout;\n}\n\nexport interface UpdateNetwork {\n    type: ActionType.UpdateNetwork;\n    data: {\n        networkId: NetworkId;\n    };\n}\n\nconst updateNetworkId = (networkId: NetworkId) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, ReduxAction>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch({\n            type: WalletActions.ClearWalletAddresses\n        });\n        dispatch({\n            type: ActionType.UpdateNetwork,\n            data: {\n                networkId\n            }\n        });\n        saveNetworkId(networkId);\n    };\n};\n\nconst login = (passphrase: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        savePassphrase(passphrase);\n        dispatch({\n            type: ActionType.Login,\n            data: {\n                passphrase\n            }\n        });\n    };\n};\n\nconst logout = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        clearPassphrase();\n        dispatch(clearData());\n        dispatch({\n            type: ActionType.Logout\n        });\n    };\n};\n\nconst clearData = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch({\n            type: ActionType.ClearData\n        });\n    };\n};\n\nexport default {\n    login,\n    logout,\n    clearData,\n    updateNetworkId\n};\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport {\n    Asset,\n    AssetTransferAddress,\n    AssetTransferOutput,\n    H160,\n    SignedTransaction,\n    Transaction,\n    U64\n} from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../../../model/keystore\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { getIdForCacheUTXO } from \"../../../redux/asset/assetReducer\";\nimport chainActions from \"../../../redux/chain/chainActions\";\nimport walletActions from \"../../../redux/wallet/walletActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport * as Metadata from \"../../../utils/metadata\";\nimport { getCodeChainHost } from \"../../../utils/network\";\nimport { getAssetKeys, getPlatformKeys } from \"../../../utils/storage\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport ReceiverContainer from \"./ReceiverContainer/ReceiverContainer\";\nimport \"./SendAsset.css\";\n\ninterface OwnProps {\n    address: string;\n    selectedAssetType: string;\n    onClose: () => void;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n    UTXOList?: UTXODoc[] | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n    passphrase: string;\n    assetAddresses?: WalletAddress[] | null;\n    platformAddresses?: WalletAddress[] | null;\n}\n\ninterface State {\n    isSendingTx: boolean;\n    isSentTx: boolean;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchUTXOListIfNeed: (address: string, assetType: H160) => void;\n    sendTransactionByGateway: (\n        address: string,\n        transferTx: Transaction,\n        gatewayURL: string\n    ) => Promise<unknown>;\n    fetchWalletFromStorageIfNeed: () => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => Promise<unknown>;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass SendAsset extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isSendingTx: false,\n            isSentTx: false\n        };\n    }\n    public render() {\n        const { onClose } = this.props;\n        const { isSendingTx, isSentTx } = this.state;\n        const {\n            assetScheme,\n            selectedAssetType: assetType,\n            networkId,\n            address\n        } = this.props;\n        const {\n            availableAssets,\n            UTXOList,\n            platformAddresses,\n            assetAddresses\n        } = this.props;\n        if (\n            !assetScheme ||\n            !UTXOList ||\n            !availableAssets ||\n            !platformAddresses ||\n            !assetAddresses\n        ) {\n            return (\n                <div>\n                    <div className=\"Send-asset\">\n                        <div className=\"loading-container\" />\n                    </div>\n                </div>\n            );\n        }\n        const availableAsset = _.find(\n            availableAssets,\n            a => a.assetType === assetType\n        );\n        const metadata = Metadata.parseMetadata(assetScheme.metadata);\n        return (\n            <div className=\"Send-asset animated fadeIn\">\n                <div className=\"cancel-icon-container\" onClick={onClose}>\n                    <FontAwesomeIcon className=\"cancel-icon\" icon=\"times\" />\n                </div>\n                <h2 className=\"title\">\n                    <Trans i18nKey=\"send:asset.title\" />\n                </h2>\n                {isSentTx ? (\n                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                        <div className=\"text-center\">\n                            <div>\n                                <img src={CheckIcon} alt={\"check\"} />\n                            </div>\n                            <div className=\"mt-3\">\n                                <span>\n                                    <Trans i18nKey=\"send:asset.complete\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className=\"d-flex align-items-center asset-info-item mb-5\">\n                            <ImageLoader\n                                className=\"asset-info-icon\"\n                                data={assetType}\n                                isAssetImage={true}\n                                networkId={networkId}\n                                size={50}\n                            />\n                            <span className=\"name ml-3 mr-auto\">\n                                {metadata.name ||\n                                    `...${assetType.slice(\n                                        assetType.length - 6,\n                                        assetType.length\n                                    )}`}\n                            </span>\n                            <span className=\"quantity number\">\n                                {availableAsset\n                                    ? availableAsset.quantities.toLocaleString()\n                                    : 0}\n                            </span>\n                        </div>\n                        <ReceiverContainer\n                            address={address}\n                            onSubmit={this.handleSubmit}\n                            totalQuantity={\n                                availableAsset\n                                    ? availableAsset.quantities\n                                    : new U64(0)\n                            }\n                            isSendingTx={isSendingTx}\n                            gatewayURL={\n                                metadata.gateway && metadata.gateway.url\n                            }\n                        />\n                    </div>\n                )}\n                {isSendingTx && (\n                    <div className=\"sending-panel d-flex align-items-center justify-content-center\">\n                        <Spinner name=\"line-scale\" color=\"white\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    public updateWindowDimensions = () => {\n        if (window.innerWidth <= 872) {\n            this.addModalOpenClass();\n        } else {\n            this.removeModalOpenClass();\n        }\n    };\n\n    public async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.removeModalOpenClass();\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    private addModalOpenClass = () => {\n        document.body.className = \"modal-open\";\n    };\n\n    private removeModalOpenClass = () => {\n        document.body.className = \"\";\n    };\n\n    private init = () => {\n        const { selectedAssetType, address } = this.props;\n        this.props.fetchAssetSchemeIfNeed(new H160(selectedAssetType));\n        this.props.fetchUTXOListIfNeed(address, new H160(selectedAssetType));\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n\n    private handleSubmit = async (\n        receivers: { address: string; quantity: U64 }[],\n        memo: string,\n        fee?: {\n            payer: string;\n            quantity: U64;\n        } | null\n    ) => {\n        const { UTXOList } = this.props;\n        const {\n            t,\n            selectedAssetType: assetType,\n            address,\n            networkId,\n            passphrase,\n            assetAddresses,\n            platformAddresses,\n            assetScheme\n        } = this.props;\n\n        if (!assetAddresses || !platformAddresses || !assetScheme) {\n            return;\n        }\n\n        const sumOfSendingAsset = _.reduce(\n            receivers,\n            (m, receiver) => U64.plus(m, receiver.quantity),\n            new U64(0)\n        );\n\n        const inputUTXO = [];\n        let inputUTXOSum = new U64(0);\n        for (const utxo of UTXOList!) {\n            inputUTXO.push(utxo);\n            inputUTXOSum = U64.plus(inputUTXOSum, utxo.quantity);\n            if (inputUTXOSum.gte(sumOfSendingAsset)) {\n                break;\n            }\n        }\n\n        const sdk = new SDK({\n            server: getCodeChainHost(networkId),\n            networkId\n        });\n        const ccKey = await getCCKey();\n\n        const storedPlatformKeys = getPlatformKeys(networkId);\n        const storedAssetKeys = getAssetKeys(networkId);\n        const seedHash = await getFirstSeedHash();\n\n        const platformKeyMapping = _.reduce(\n            storedPlatformKeys,\n            (m, storedPlatformKey) => {\n                return {\n                    ...m,\n                    [storedPlatformKey.key]: {\n                        seedHash,\n                        path: getPlatformAddressPath(\n                            storedPlatformKey.pathIndex\n                        )\n                    }\n                };\n            },\n            {}\n        );\n\n        const assetKeyMapping = _.reduce(\n            storedAssetKeys,\n            (m, storedAssetKey) => {\n                return {\n                    ...m,\n                    [storedAssetKey.key]: {\n                        seedHash,\n                        path: getAssetAddressPath(storedAssetKey.pathIndex)\n                    }\n                };\n            },\n            {}\n        );\n\n        const keyStore = new LocalKeyStore(ccKey, {\n            platform: platformKeyMapping,\n            asset: assetKeyMapping\n        });\n\n        const inputAssets = _.map(inputUTXO, utxo => {\n            return Asset.fromJSON({\n                assetType: utxo.assetType,\n                lockScriptHash: utxo.lockScriptHash,\n                parameters: utxo.parameters,\n                quantity: utxo.quantity,\n                tracker: utxo.transactionTracker,\n                transactionOutputIndex: utxo.transactionOutputIndex,\n                orderHash: utxo.orderHash,\n                shardId: utxo.shardId\n            }).createTransferInput();\n        });\n        const outputData = _.map(receivers, receiver => {\n            return {\n                recipient: receiver.address,\n                quantity: receiver.quantity,\n                shardId: 0, // FIXME: Add a valid data\n                assetType\n            };\n        });\n\n        const refundAmount = U64.minus(inputUTXOSum, sumOfSendingAsset);\n        if (refundAmount.gt(0)) {\n            outputData.push({\n                recipient: address,\n                quantity: refundAmount,\n                assetType,\n                shardId: 0\n            });\n        }\n        const outputs = _.map(\n            outputData,\n            o =>\n                new AssetTransferOutput({\n                    recipient: AssetTransferAddress.fromString(o.recipient),\n                    quantity: o.quantity,\n                    shardId: 0, // FIXME: Add a valid data\n                    assetType: new H160(o.assetType)\n                })\n        );\n        const transferTx = sdk.core.createTransferAssetTransaction({\n            inputs: inputAssets,\n            outputs,\n            metadata: memo\n        });\n        try {\n            await Promise.all(\n                _.map(inputAssets, (_A, index) => {\n                    return sdk.key.signTransactionInput(transferTx, index, {\n                        keyStore,\n                        passphrase\n                    });\n                })\n            );\n        } catch (e) {\n            if (e.message === \"DecryptionFailed\") {\n                toast.error(t(\"send:asset.error.password.wrong\"), {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    autoClose: 5000,\n                    closeButton: false,\n                    hideProgressBar: true\n                });\n            }\n            console.log(e);\n            return;\n        }\n        const metadata = Metadata.parseMetadata(assetScheme.metadata);\n\n        this.setState({ isSendingTx: true });\n        if (metadata.gateway && metadata.gateway.url) {\n            try {\n                await this.props.sendTransactionByGateway(\n                    address,\n                    transferTx,\n                    metadata.gateway.url\n                );\n                this.setState({ isSentTx: true });\n            } catch (e) {\n                toast.error(t(\"send:asset.error.gateway.unauthorized\"), {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    closeButton: false,\n                    hideProgressBar: true,\n                    autoClose: false\n                });\n                console.error(e);\n            }\n        } else {\n            const feePayer = fee!.payer;\n            const seq = await sdk.rpc.chain.getSeq(feePayer);\n            const {\n                transactions\n            } = await sdk.rpc.chain.getPendingTransactions();\n            const newSeq =\n                seq +\n                transactions.filter(\n                    tx =>\n                        tx.getSignerAddress({ networkId }).toString() ===\n                        feePayer\n                ).length;\n            const signedTransaction = await sdk.key.signTransaction(\n                transferTx,\n                {\n                    account: feePayer,\n                    keyStore,\n                    fee: fee!.quantity,\n                    seq: newSeq,\n                    passphrase\n                }\n            );\n            try {\n                await this.props.sendSignedTransaction(\n                    address,\n                    signedTransaction,\n                    feePayer\n                );\n                this.setState({ isSentTx: true });\n            } catch (e) {\n                toast.error(\"Server is not responding.\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    autoClose: 5000,\n                    closeButton: false,\n                    hideProgressBar: true\n                });\n                console.error(e);\n            }\n        }\n        this.setState({ isSendingTx: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const { selectedAssetType, address } = ownProps;\n    const assetScheme =\n        state.assetReducer.assetScheme[new H160(selectedAssetType).value];\n    const id = getIdForCacheUTXO(address, new H160(selectedAssetType));\n    const UTXOList = state.assetReducer.UTXOList[id];\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const networkId = state.globalReducer.networkId;\n    const passphrase = state.globalReducer.passphrase!;\n    const assetAddresses = state.walletReducer.assetAddresses;\n    const platformAddresses = state.walletReducer.platformAddresses;\n    return {\n        assetScheme: assetScheme && assetScheme.data,\n        UTXOList: UTXOList && UTXOList.data,\n        availableAssets,\n        networkId,\n        passphrase,\n        platformAddresses,\n        assetAddresses\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    sendTransactionByGateway: (\n        address: string,\n        transferTx: Transaction,\n        gatewayURL: string\n    ) => {\n        return dispatch(\n            chainActions.sendTransactionByGateway(\n                address,\n                transferTx,\n                gatewayURL\n            )\n        );\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(\n                address,\n                signedTransaction,\n                feePayer\n            )\n        );\n    },\n    fetchUTXOListIfNeed: (address: string, assetType: H160) => {\n        dispatch(assetActions.fetchUTXOListIfNeed(address, assetType));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(SendAsset));\n","import { AggsUTXODoc, TransactionDoc } from \"codechain-indexer-types\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport assetActions from \"../../redux/asset/assetActions\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport AssetTxHistory from \"../AssetTxHistory/AssetTxHistory\";\nimport AssetItem from \"./AssetItem/AssetItem\";\nimport \"./AssetList.css\";\nimport Empty from \"./img/cautiondisabled.svg\";\nimport SendAsset from \"./SendAsset/SendAsset\";\n\ninterface OwnProps {\n    match: match<{ address: string }>;\n}\n\ninterface StateProps {\n    addressUTXOList?: AggsUTXODoc[] | null;\n    pendingTxList?: TransactionDoc[] | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAggsUTXOListIfNeed: (address: string) => void;\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ninterface State {\n    selectedAssetType?: string | null;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass AssetList extends React.Component<Props, State> {\n    private refresher: any;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            selectedAssetType: undefined\n        };\n    }\n    public componentWillReceiveProps(props: Props) {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            match: {\n                params: { address: nextAddress }\n            }\n        } = props;\n        if (nextAddress !== address) {\n            this.setState({ selectedAssetType: undefined });\n            this.init();\n        }\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    public render() {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            addressUTXOList,\n            pendingTxList,\n            availableAssets,\n            networkId,\n            addressIndex\n        } = this.props;\n        const { selectedAssetType } = this.state;\n        if (!addressUTXOList || !pendingTxList || !availableAssets) {\n            return null;\n        }\n        return (\n            <div className=\"Asset-list animated fadeIn\">\n                <div className=\"d-flex\">\n                    <div className=\"left-panel mx-auto\">\n                        <AddressContainer\n                            address={address}\n                            backButtonPath=\"/\"\n                            addressIndex={addressIndex}\n                        />\n                        <div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:asset.list.title\" />\n                                </h4>\n                                <div className=\"asset-item-container\">\n                                    {availableAssets.length > 0 ? (\n                                        _.map(\n                                            availableAssets,\n                                            availableAsset => (\n                                                <AssetItem\n                                                    key={\n                                                        availableAsset.assetType\n                                                    }\n                                                    assetType={\n                                                        availableAsset.assetType\n                                                    }\n                                                    quantities={\n                                                        availableAsset.quantities\n                                                    }\n                                                    networkId={networkId}\n                                                    address={address}\n                                                    onSelect={\n                                                        this.handleSelectAsset\n                                                    }\n                                                    isSelected={\n                                                        selectedAssetType !==\n                                                            undefined &&\n                                                        selectedAssetType ===\n                                                            availableAsset.assetType\n                                                    }\n                                                />\n                                            )\n                                        )\n                                    ) : (\n                                        <div className=\"d-flex align-items-center justify-content-center\">\n                                            <div>\n                                                <div className=\"text-center mt-3\">\n                                                    <img\n                                                        src={Empty}\n                                                        alt={\"empty\"}\n                                                    />\n                                                </div>\n                                                <div className=\"mt-3 empty\">\n                                                    <Trans i18nKey=\"send:asset.list.empty\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:asset.recent.title\" />\n                                </h4>\n                                <AssetTxHistory address={address} />\n                            </div>\n                        </div>\n                    </div>\n                    {selectedAssetType && (\n                        <div className=\"right-container\">\n                            <div className=\"right-panel\">\n                                <SendAsset\n                                    address={address}\n                                    selectedAssetType={selectedAssetType}\n                                    onClose={this.handleSendAssetClose}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n    private handleSendAssetClose = () => {\n        this.setState({ selectedAssetType: undefined });\n    };\n    private handleSelectAsset = (assetType: string) => {\n        window.scrollTo(0, 0);\n\n        const selectedAssetType = this.state.selectedAssetType;\n        if (!selectedAssetType) {\n            this.setState({\n                selectedAssetType: assetType\n            });\n        } else if (selectedAssetType === assetType) {\n            this.setState({\n                selectedAssetType: undefined\n            });\n        } else {\n            this.setState({\n                selectedAssetType: undefined\n            });\n            setTimeout(() => {\n                this.setState({ selectedAssetType: assetType });\n            }, 100);\n        }\n    };\n    private init = async () => {\n        this.clearInterval();\n        this.refresher = setInterval(() => {\n            this.fetchAll();\n        }, 10000);\n        this.fetchAll();\n    };\n    private clearInterval = () => {\n        if (this.refresher) {\n            clearInterval(this.refresher);\n        }\n    };\n    private fetchAll = async () => {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        this.props.fetchPendingTxListIfNeed(address);\n        this.props.fetchAggsUTXOListIfNeed(address);\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const {\n        match: {\n            params: { address }\n        }\n    } = props;\n    const aggsUTXOList = state.assetReducer.aggsUTXOList[address];\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const networkId = state.globalReducer.networkId;\n    const assetAddress = _.find(\n        state.walletReducer.assetAddresses,\n        aa => aa.address === address\n    );\n    return {\n        addressUTXOList: aggsUTXOList && aggsUTXOList.data,\n        pendingTxList: pendingTxList && pendingTxList.data,\n        availableAssets,\n        networkId,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAggsUTXOListIfNeed: (address: string) => {\n        dispatch(assetActions.fetchAggsUTXOListIfNeed(address));\n    },\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetList));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {\n    clearKeystore,\n    createSeed,\n    exportMnemonic\n} from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions from \"../../redux/global/globalActions\";\nimport actions from \"../../redux/wallet/walletActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport ConfirmBackupPhrase from \"./ConfirmBackupPhrase/ConfirmBackupPhrase\";\nimport \"./CreateWallet.css\";\nimport InputPassphrase from \"./InputPassphrase/InputPassphrase\";\nimport ShowBackupPhrase from \"./ShowBackupPhrase/ShowBackupPhrase\";\n\nenum PageState {\n    inputPassPhrase = 1,\n    showSecretPhrase,\n    confirmSecretPhrase\n}\n\ninterface State {\n    currentPage: PageState;\n    passphrase?: string | null;\n    mnemonic?: string[];\n    username?: string;\n}\n\ninterface DispatchProps {\n    login: (passpharase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n    createWalletAssetAddress: () => Promise<void>;\n    createWalletPlatformAddress: () => Promise<void>;\n}\n\ntype Props = RouteComponentProps & DispatchProps;\nclass CreateWallet extends React.Component<Props, State> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            currentPage: PageState.inputPassPhrase,\n            passphrase: undefined,\n            username: undefined\n        };\n    }\n    public async componentDidMount() {\n        const { clearData } = this.props;\n        clearPassphrase();\n        clearData();\n        clearWalletKeys();\n        await clearKeystore();\n    }\n    public render() {\n        const { currentPage, mnemonic } = this.state;\n        return (\n            <Container className=\"Create-wallet animated fadeIn\">\n                <div className=\"close-btn\">\n                    <Link to=\"/selectKeyfile\">\n                        <FontAwesomeIcon icon=\"times\" className=\"icon\" />\n                    </Link>\n                </div>\n                <div className=\"create-wallet-form-group\">\n                    {currentPage === PageState.inputPassPhrase && (\n                        <InputPassphrase\n                            onSubmit={this.handleSubmitPassphraseInput}\n                        />\n                    )}\n                    {currentPage === PageState.showSecretPhrase && (\n                        <ShowBackupPhrase\n                            onSubmit={this.handleSubmitShowPhrase}\n                            mnemonic={mnemonic!}\n                        />\n                    )}\n                    {currentPage === PageState.confirmSecretPhrase && (\n                        <ConfirmBackupPhrase\n                            phrases={mnemonic!}\n                            onConfirm={this.handleConfirmPhrase}\n                        />\n                    )}\n                </div>\n                <div className=\"dot-indicator-container\">\n                    {_.map(_.range(3), index => {\n                        return (\n                            <FontAwesomeIcon\n                                key={`dot-${index}`}\n                                icon=\"circle\"\n                                className={`indicator-icon ${\n                                    index < currentPage ? \"active\" : \"inactive\"\n                                }`}\n                            />\n                        );\n                    })}\n                </div>\n            </Container>\n        );\n    }\n\n    private handleSubmitPassphraseInput = async (\n        username: string,\n        passphrase: string\n    ) => {\n        await createSeed(passphrase);\n        const mnemonicString = await exportMnemonic(passphrase);\n        const mnemonic = mnemonicString.split(\" \");\n        this.setState({\n            currentPage: PageState.showSecretPhrase,\n            passphrase,\n            mnemonic,\n            username\n        });\n    };\n\n    private handleSubmitShowPhrase = () => {\n        this.setState({ currentPage: PageState.confirmSecretPhrase });\n    };\n\n    private handleConfirmPhrase = async () => {\n        const { login, history } = this.props;\n        const { passphrase, username } = this.state;\n        localStorage.setItem(\"USERNAME\", username!);\n        await login(passphrase!);\n        await this.props.createWalletAssetAddress();\n        await this.props.createWalletPlatformAddress();\n        history.push(`/`);\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(globalActions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(globalActions.clearData());\n    },\n    createWalletPlatformAddress: () => {\n        return dispatch(actions.createWalletPlatformAddress());\n    },\n    createWalletAssetAddress: () => {\n        return dispatch(actions.createWalletAssetAddress());\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withRouter(CreateWallet));\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./ConfirmBackupPhrase.css\";\n\ninterface OwnProps {\n    phrases: string[];\n    onConfirm: () => void;\n}\n\ninterface State {\n    selectedPhrasesIndex?: number[] | null;\n    suffledPhrases: string[];\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass ConfirmBackupPhrase extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            selectedPhrasesIndex: undefined,\n            suffledPhrases: _.shuffle(this.props.phrases)\n        };\n    }\n    public componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n    public render() {\n        const { phrases, onConfirm } = this.props;\n        const { selectedPhrasesIndex, suffledPhrases } = this.state;\n        return (\n            <div className=\"Confirm-backup-phrase animated fadeIn\">\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:confirm.title\" />\n                    </h4>\n                </div>\n                <div className=\"description\">\n                    <Trans i18nKey=\"create:confirm.detail\" />\n                </div>\n                <div>\n                    <div className=\"backup-phrase-input d-flex align-items-center justify-content-center\">\n                        {selectedPhrasesIndex &&\n                            this.indexToString(selectedPhrasesIndex).join(\" \")}\n                    </div>\n                    <div className=\"backup-phrase-button-container text-center\">\n                        <div>\n                            {_.map(suffledPhrases, (text, index) => {\n                                return (\n                                    <button\n                                        key={`phrase-${text}`}\n                                        className={`btn btn-primary backup-phrase-btn ${selectedPhrasesIndex &&\n                                            _.includes(\n                                                selectedPhrasesIndex,\n                                                index\n                                            ) &&\n                                            \"reverse\"}`}\n                                        onClick={_.partial(\n                                            this.toggleSelectPhrase,\n                                            index\n                                        )}\n                                    >\n                                        {text}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        disabled={\n                            selectedPhrasesIndex == null ||\n                            !_.isEqual(\n                                phrases,\n                                this.indexToString(selectedPhrasesIndex)\n                            )\n                        }\n                        onClick={onConfirm}\n                    >\n                        <Trans i18nKey=\"create:confirm.button\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n    private indexToString = (selectedPhraseIndex: number[]) => {\n        const { suffledPhrases } = this.state;\n        return _.map(selectedPhraseIndex, i => suffledPhrases[i]);\n    };\n    private toggleSelectPhrase = (index: number) => {\n        const { selectedPhrasesIndex } = this.state;\n        if (!selectedPhrasesIndex) {\n            this.setState({ selectedPhrasesIndex: [index] });\n            return;\n        }\n        if (_.includes(selectedPhrasesIndex, index)) {\n            this.setState({\n                selectedPhrasesIndex: _.filter(\n                    selectedPhrasesIndex,\n                    sp => sp !== index\n                )\n            });\n        } else {\n            this.setState({\n                selectedPhrasesIndex: [...selectedPhrasesIndex, index]\n            });\n        }\n    };\n}\nexport default withTranslation()(ConfirmBackupPhrase);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { Form } from \"reactstrap\";\nimport ValidationInput from \"../../ValidationInput/ValidationInput\";\nimport \"./InputPassphrase.css\";\n\ninterface State {\n    passphrase: string;\n    passphraseConfirm: string;\n    isPassphraseValid?: boolean;\n    passphraseError?: string;\n    isPassphraseConfirmValid?: boolean;\n    passphraseConfirmError?: string;\n    isSubmitted: boolean;\n    username: string;\n    isUsernameValid?: boolean;\n    usernameError?: string;\n    hasAgreeTOC: boolean;\n    hasAgreePP: boolean;\n}\n\nconst TermsOfConditionLink =\n    \"https://docs.google.com/document/d/1-HJep6vXMaiX4p62ijIfAc9yyX_rKAFkFLPsMod8tl0/edit?usp=sharing\";\nconst PPLink =\n    \"https://docs.google.com/document/d/13Bonpgp2Va4dDlAIzvH2JSKFyOBlSSUrvFQ_PE2YqWI/edit?usp=sharing\";\n\ninterface OwnProps {\n    onSubmit: (username: string, passphrase: string) => void;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass InputPassphrase extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            passphraseConfirm: \"\",\n            isPassphraseValid: undefined,\n            passphraseError: undefined,\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined,\n            isSubmitted: false,\n            username: \"\",\n            isUsernameValid: undefined,\n            usernameError: undefined,\n            hasAgreeTOC: false,\n            hasAgreePP: false\n        };\n    }\n    public render() {\n        const { t } = this.props;\n        const {\n            passphrase,\n            passphraseConfirm,\n            isPassphraseConfirmValid,\n            isPassphraseValid,\n            passphraseConfirmError,\n            passphraseError,\n            isSubmitted,\n            username,\n            isUsernameValid,\n            usernameError,\n            hasAgreeTOC,\n            hasAgreePP\n        } = this.state;\n        return (\n            <Form\n                className=\"Input-passphrase animated fadeIn\"\n                onSubmit={this.handleOnFormSubmit}\n            >\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:seed.title\" />\n                    </h4>\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.name\")}\n                        onChange={this.handleUsernameInput}\n                        value={username}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.name\")}\n                        type=\"text\"\n                        isValid={isUsernameValid}\n                        error={usernameError}\n                        onBlur={this.checkUsernameValid}\n                    />\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.password\")}\n                        onChange={this.handlePassphraseInput}\n                        value={passphrase}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.password\")}\n                        type=\"password\"\n                        isValid={isPassphraseValid}\n                        error={passphraseError}\n                        onBlur={this.checkPassphraseValid}\n                    />\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.password_confirm\")}\n                        onChange={this.handlePassphraseConfirmInput}\n                        value={passphraseConfirm}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.password_confirm\")}\n                        type=\"password\"\n                        isValid={isPassphraseConfirmValid}\n                        error={passphraseConfirmError}\n                        onBlur={this.checkPassphraseConfirm}\n                    />\n                </div>\n                <div className=\"form-container\">\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"tocCheck\"\n                            checked={hasAgreeTOC}\n                            onChange={this.handleTOCClick}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"tocCheck\">\n                            <Trans i18nKey=\"create:seed.terms\">\n                                {/* eslint-disable-next-line */}\n                                <a\n                                    href={`${TermsOfConditionLink}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                />\n                            </Trans>\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"ppCheck\"\n                            checked={hasAgreePP}\n                            onChange={this.handlePPClick}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"ppCheck\">\n                            <Trans i18nKey=\"create:seed.privacy\">\n                                {/* eslint-disable-next-line */}\n                                <a\n                                    href={`${PPLink}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                />\n                            </Trans>\n                        </label>\n                    </div>\n                </div>\n                <div className=\"mt-5\">\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        disabled={isSubmitted || !hasAgreePP || !hasAgreeTOC}\n                        type=\"submit\"\n                    >\n                        {isSubmitted\n                            ? t(\"create:seed.creating\")\n                            : t(\"create:seed.ok\")}\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleTOCClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasAgreeTOC: event.target.checked\n        });\n    };\n\n    private handlePPClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasAgreePP: event.target.checked\n        });\n    };\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleSubmit();\n    };\n\n    private handleSubmit = () => {\n        const { onSubmit } = this.props;\n        const { passphrase, username } = this.state;\n        if (!this.checkUsernameValid()) {\n            return;\n        }\n        if (!this.checkPassphraseValid()) {\n            return;\n        }\n        if (!this.checkPassphraseConfirm()) {\n            return;\n        }\n\n        this.setState({ isSubmitted: true });\n\n        setTimeout(() => {\n            onSubmit(username, passphrase);\n        }, 500);\n    };\n\n    private checkPassphraseValid = () => {\n        const { passphrase } = this.state;\n        if (passphrase.length < 8) {\n            this.setState({\n                passphraseError: this.props.t(\"create:seed.error.pass_minimum\"),\n                isPassphraseValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: true\n        });\n        return true;\n    };\n\n    private checkPassphraseConfirm = () => {\n        const { passphrase, passphraseConfirm } = this.state;\n        if (passphrase !== passphraseConfirm) {\n            this.setState({\n                passphraseConfirmError: this.props.t(\n                    \"create:seed.error.pass_mismatch\"\n                ),\n                isPassphraseConfirmValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: true\n        });\n        return true;\n    };\n\n    private checkUsernameValid = () => {\n        const { username } = this.state;\n        if (username === \"\") {\n            this.setState({\n                isUsernameValid: false,\n                usernameError: this.props.t(\"create:seed.error.name_required\")\n            });\n            return false;\n        }\n        if (username.length > 20) {\n            this.setState({\n                usernameError: this.props.t(\"create:seed.error.name_maximum\"),\n                isUsernameValid: false\n            });\n            return false;\n        }\n        this.setState({\n            isUsernameValid: true,\n            usernameError: undefined\n        });\n        return true;\n    };\n\n    private handlePassphraseInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: undefined\n        });\n        this.setState({\n            passphrase: event.target.value,\n            passphraseConfirm: \"\",\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n    };\n\n    private handlePassphraseConfirmInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n        this.setState({ passphraseConfirm: event.target.value });\n    };\n\n    private handleUsernameInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            username: event.target.value,\n            usernameError: undefined,\n            isUsernameValid: undefined\n        });\n    };\n}\n\nexport default withTranslation()(InputPassphrase);\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"./ShowBackupPhrase.css\";\n\ninterface OwnProps {\n    onSubmit: () => void;\n    mnemonic: string[];\n}\ntype Props = WithTranslation & OwnProps;\n\nclass ShowBackupPhrase extends React.Component<Props> {\n    public componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n    public render() {\n        const { mnemonic } = this.props;\n        return (\n            <div className=\"Show-backup-phrase animated fadeIn\">\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:mnemonic.title\" />\n                    </h4>\n                </div>\n                <div className=\"text-1\">\n                    <Trans i18nKey=\"create:mnemonic.detail\" />\n                </div>\n                <div className=\"warning-text\">\n                    <Trans i18nKey=\"create:mnemonic.warning\" />\n                </div>\n                <div className=\"tips-container\">\n                    <p className=\"tips-text mb-0\">\n                        <Trans i18nKey=\"create:mnemonic.tip\" />\n                    </p>\n                    <span className=\"text-2\">\n                        <Trans i18nKey=\"create:mnemonic.tip_detail\" />\n                    </span>\n                </div>\n                <div className=\"backup-phrase-container\">\n                    <div className=\"backup-phrase-panel d-flex align-items-center justify-content-center\">\n                        <span>{mnemonic.join(\" \")}</span>\n                        <CopyToClipboard\n                            text={mnemonic.join(\" \")}\n                            onCopy={this.handleCopyPhrase}\n                        >\n                            <div className=\"copy-btn\">\n                                <span>\n                                    <Trans i18nKey=\"create:mnemonic.copy\" />\n                                </span>\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        type=\"submit\"\n                        onClick={this.props.onSubmit}\n                    >\n                        <Trans i18nKey=\"create:mnemonic.button\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleCopyPhrase = () => {\n        toast.info(this.props.t(\"create:mnemonic.copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(ShowBackupPhrase);\n","import React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport facebook from \"./img/facebook.svg\";\nimport github from \"./img/github.svg\";\nimport gitter from \"./img/gitter.svg\";\nimport medium from \"./img/medium.svg\";\nimport telegram from \"./img/telegram.svg\";\nimport twitter from \"./img/twitter.svg\";\nimport \"./index.css\";\n\ntype Props = WithTranslation;\n\nclass Footer extends React.Component<Props> {\n    public render() {\n        return (\n            <div className=\"Footer\">\n                <Container>\n                    <Row>\n                        <Col lg={6} className=\"left-panel\">\n                            <ul className=\"left-menu-list list-inline list-unstyled\">\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://codechain.io\"\n                                    >\n                                        About Us\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://codechain.io/#contact\"\n                                    >\n                                        Contact\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://docs.google.com/document/d/13Bonpgp2Va4dDlAIzvH2JSKFyOBlSSUrvFQ_PE2YqWI/edit?usp=sharing\"\n                                    >\n                                        Privacy Policy\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://docs.google.com/document/d/1-HJep6vXMaiX4p62ijIfAc9yyX_rKAFkFLPsMod8tl0/edit?usp=sharing\"\n                                    >\n                                        Terms and Conditions\n                                    </a>\n                                </li>\n                            </ul>\n                        </Col>\n                        <Col lg={6} className=\"right-panel\">\n                            <ul className=\"right-menu-list list-unstyled list-unstyled\">\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://www.facebook.com/codechain/\"\n                                    >\n                                        <img src={facebook} alt={\"facebook\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://github.com/CodeChain-io/codechain-web-wallet\"\n                                    >\n                                        <img src={github} alt={\"github\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://gitter.im/CodeChain-io/codechain\"\n                                    >\n                                        <img src={gitter} alt={\"gitter\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://twitter.com/codechain_io\"\n                                    >\n                                        <img src={twitter} alt={\"twitter\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://medium.com/codechain\"\n                                    >\n                                        <img src={medium} alt={\"medium\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"http://t.me/codechain_protocol\"\n                                    >\n                                        <img src={telegram} alt={\"telegram\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item language-selector-container\">\n                                    <select\n                                        onChange={this.onLanguageChange}\n                                        className=\"language-selector\"\n                                        value={this.props.i18n.language}\n                                        defaultValue=\"en\"\n                                    >\n                                        <option value=\"en\">English</option>\n                                        <option value=\"ko\">한국어</option>\n                                    </select>\n                                </li>\n                            </ul>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n\n    public onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const lang = event.target.value;\n        this.props.i18n.changeLanguage(lang);\n    };\n}\n\nexport default withTranslation()(Footer);\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport Form from \"reactstrap/lib/Form\";\nimport { checkPassphrase, exportMnemonic } from \"../../model/keystore\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport \"./ExportBackupPopup.css\";\n\ninterface Props {\n    isOpen: boolean;\n    toggle: () => void;\n    className?: string;\n}\n\ninterface State {\n    passphrase: string;\n    isValidPassphrase?: boolean;\n    passphraseError?: string;\n    revealBackupPhrase: boolean;\n    backupPhraseString?: string | null;\n}\n\nclass ExportBackupPopup extends React.Component<\n    Props & WithTranslation,\n    State\n> {\n    constructor(props: Props & WithTranslation) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            isValidPassphrase: undefined,\n            passphraseError: undefined,\n            revealBackupPhrase: false,\n            backupPhraseString: undefined\n        };\n    }\n    public render() {\n        const { className, toggle, isOpen, t } = this.props;\n        const {\n            passphrase,\n            isValidPassphrase,\n            passphraseError,\n            revealBackupPhrase,\n            backupPhraseString\n        } = this.state;\n        return (\n            <Modal\n                isOpen={isOpen}\n                toggle={toggle}\n                className={`Export-backup-popup ${className}`}\n                size=\"sm\"\n                centered={true}\n            >\n                <ModalHeader toggle={toggle}>\n                    <Trans i18nKey=\"backup:title\" />\n                </ModalHeader>\n                <ModalBody>\n                    <Form onSubmit={this.handleOnFormSubmit}>\n                        <div className=\"passphrase-container\">\n                            <div className=\"d-flex align-items-center justify-content-center passphrase-panel\">\n                                {backupPhraseString && [\n                                    <span key=\"backup-phrase\">\n                                        {backupPhraseString}\n                                    </span>,\n                                    <CopyToClipboard\n                                        key=\"copy\"\n                                        text={backupPhraseString}\n                                        onCopy={this.handleCopyPhrase}\n                                    >\n                                        <div className=\"copy-btn\">\n                                            <span>COPY</span>\n                                        </div>\n                                    </CopyToClipboard>\n                                ]}\n                            </div>\n                            {!revealBackupPhrase && (\n                                <div className=\"d-flex align-items-center justify-content-center disable-panel\">\n                                    <span>\n                                        <Trans i18nKey=\"backup:reveal\" />\n                                    </span>\n                                </div>\n                            )}\n                        </div>\n                        <div className=\"mt-3\">\n                            <ValidationInput\n                                onChange={this.handlePassphrase}\n                                value={passphrase}\n                                showValidation={true}\n                                labelText={t(\"backup:password.label\")}\n                                placeholder={t(\"backup:password.placeholder\")}\n                                type=\"password\"\n                                isValid={isValidPassphrase}\n                                error={passphraseError}\n                                onBlur={this.checkPhrase}\n                                disable={revealBackupPhrase}\n                            />\n                        </div>\n                        <div className=\"mb-3\">\n                            <Button\n                                color=\"primary square reverse w-100\"\n                                disabled={\n                                    !passphrase ||\n                                    isValidPassphrase === false ||\n                                    revealBackupPhrase\n                                }\n                            >\n                                <Trans i18nKey=\"backup:see_btn\" />\n                            </Button>\n                        </div>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        );\n    }\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleButtonClick();\n    };\n    private handlePassphrase = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            passphrase: event.target.value,\n            isValidPassphrase: undefined,\n            passphraseError: undefined\n        });\n    };\n    private checkPhrase = async () => {\n        const { passphrase } = this.state;\n        const isValid = await checkPassphrase(passphrase);\n        if (isValid) {\n            this.setState({\n                isValidPassphrase: true,\n                passphraseError: undefined\n            });\n        } else {\n            this.setState({\n                isValidPassphrase: false,\n                passphraseError: this.props.t(\"backup:password_error\")\n            });\n        }\n    };\n    private handleButtonClick = async () => {\n        const { passphrase } = this.state;\n        if (!this.checkPhrase()) {\n            return;\n        }\n\n        const backupPhraseString = await exportMnemonic(passphrase);\n        this.setState({\n            revealBackupPhrase: true,\n            backupPhraseString\n        });\n    };\n    private handleCopyPhrase = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(ExportBackupPopup);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Popover, PopoverBody } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport globalActions from \"../../../redux/global/globalActions\";\nimport ExportBackupPopup from \"../../ExportBackupPopup/ExportBackupPopup\";\nimport \"./MenuButton.css\";\n\ninterface OwnProps {\n    className?: string;\n}\n\ninterface StateProps {\n    networkId: NetworkId;\n}\n\ninterface State {\n    popoverOpen: boolean;\n    exportPopupOpen: boolean;\n}\n\ninterface DispatchProps {\n    logout: () => void;\n}\n\ntype Props = WithTranslation & DispatchProps & StateProps & OwnProps;\nclass MenuButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            popoverOpen: false,\n            exportPopupOpen: false\n        };\n    }\n    public render() {\n        const { className, t } = this.props;\n        const { exportPopupOpen, popoverOpen } = this.state;\n        return (\n            <div\n                className={`Menu-button ${className}`}\n                onClick={this.toggle}\n                id=\"menu-button\"\n            >\n                {exportPopupOpen && (\n                    <ExportBackupPopup\n                        toggle={this.toggleExportPopup}\n                        isOpen={exportPopupOpen}\n                    />\n                )}\n                <div className=\"d-flex align-items-center network-btn\">\n                    <FontAwesomeIcon icon=\"ellipsis-h\" />\n                </div>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={popoverOpen}\n                    target=\"menu-button\"\n                    toggle={this.toggle}\n                >\n                    <PopoverBody className=\"popover-select-list\">\n                        <ul className=\"list-unstyled mb-0\">\n                            <li onClick={this.handleSignout}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-2\">\n                                        {t(\"main:menu.lock\")}\n                                    </span>\n                                    <FontAwesomeIcon icon=\"lock\" />\n                                </div>\n                            </li>\n                            <li onClick={this.openExportPopup}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-2\">\n                                        {t(\"main:menu.backup_phrase\")}\n                                    </span>\n                                    <FontAwesomeIcon icon=\"arrow-circle-down\" />\n                                </div>\n                            </li>\n                        </ul>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n    public handleSignout = () => {\n        const { logout } = this.props;\n        logout();\n    };\n    private openExportPopup = () => {\n        this.setState({\n            exportPopupOpen: !this.state.exportPopupOpen,\n            popoverOpen: false\n        });\n    };\n    private toggle = () => {\n        this.setState({ popoverOpen: !this.state.popoverOpen });\n    };\n    private toggleExportPopup = () => {\n        this.setState({ exportPopupOpen: !this.state.exportPopupOpen });\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    networkId: state.globalReducer.networkId,\n    passphrase: state.globalReducer.passphrase\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    logout: () => {\n        dispatch(globalActions.logout());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(MenuButton));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Popover, PopoverBody } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport { getNetworkNameById } from \"../../../utils/network\";\nimport MainNet from \"./img/mainnet.svg\";\nimport TestNet from \"./img/testnet.svg\";\n\nimport _ from \"lodash\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport globalActions from \"../../../redux/global/globalActions\";\nimport \"./NetworkButton.css\";\n\ninterface OwnProps {\n    className?: string;\n}\n\ninterface StateProps {\n    networkId: NetworkId;\n}\n\ninterface State {\n    popoverOpen: boolean;\n}\n\ninterface DispatchProps {\n    updateNetworkId: (networkId: NetworkId) => void;\n}\n\ntype Props = RouteComponentProps & StateProps & OwnProps & DispatchProps;\nclass NetworkButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            popoverOpen: false\n        };\n    }\n    public render() {\n        const { networkId, className } = this.props;\n        return (\n            <div\n                className={`Network-button ${className}`}\n                onClick={this.toggle}\n                id=\"network-button\"\n            >\n                <div className=\"d-flex align-items-center network-btn\">\n                    <div className=\"mr-1\">{getNetworkNameById(networkId)}</div>\n                    <img\n                        src={networkId === \"cc\" ? MainNet : TestNet}\n                        alt={\"network\"}\n                    />\n                </div>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={this.state.popoverOpen}\n                    target=\"network-button\"\n                    toggle={this.toggle}\n                >\n                    <PopoverBody className=\"popover-select-list\">\n                        <ul className=\"list-unstyled mb-0\">\n                            <li onClick={_.partial(this.chagneNetworkId, \"cc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">MAINNET</span>\n                                    <img src={MainNet} alt={\"mainnet\"} />\n                                </div>\n                            </li>\n                            {/*\n                            <li onClick={_.partial(this.chagneNetworkId, \"tc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">HUSKY</span>\n                                    <img src={TestNet} />\n                                </div>\n                            </li>\n                            <li onClick={_.partial(this.chagneNetworkId, \"sc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">SALUKI</span>\n                                    <img src={TestNet} />\n                                </div>\n                            </li>\n                            */}\n                            <li onClick={_.partial(this.chagneNetworkId, \"wc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">TESTNET</span>\n                                    <img src={TestNet} alt={\"testnet\"} />\n                                </div>\n                            </li>\n                        </ul>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n    private toggle = () => {\n        this.setState({ popoverOpen: !this.state.popoverOpen });\n    };\n    private chagneNetworkId = (networkId: NetworkId) => {\n        const { updateNetworkId, networkId: currentNetworkId } = this.props;\n        const { history } = this.props;\n        this.toggle();\n        if (networkId === currentNetworkId) {\n            return;\n        }\n        updateNetworkId(networkId);\n        history.replace(\"/\");\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    networkId: state.globalReducer.networkId,\n    passphrase: state.globalReducer.passphrase\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    updateNetworkId: (networkId: NetworkId) => {\n        dispatch(globalActions.updateNetworkId(networkId));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NetworkButton));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport globalActions from \"../../../redux/global/globalActions\";\n\nclass WalletSaver extends React.Component<any, any> {\n    public timer: NodeJS.Timeout | null = null;\n\n    public componentDidMount() {\n        this.startTimer();\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n        document.addEventListener(\"touchend\", this.handleTouchOutside);\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    public componentWillUnmount() {\n        this.clearTimer();\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\n        document.removeEventListener(\"touchend\", this.handleTouchOutside);\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    public render() {\n        return null;\n    }\n\n    private handleClickOutside = () => {\n        this.resetTimer();\n    };\n\n    private handleTouchOutside = () => {\n        this.resetTimer();\n    };\n\n    private handleKeyDown = () => {\n        this.resetTimer();\n    };\n\n    private startTimer = () => {\n        const { logout } = this.props;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            logout();\n        }, 60 * 10 * 1000);\n    };\n\n    private clearTimer = () => {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    };\n\n    private resetTimer = () => {\n        this.startTimer();\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    logout: () => {\n        dispatch(globalActions.logout());\n    }\n});\nexport default connect(\n    undefined,\n    mapDispatchToProps\n)(WalletSaver);\n","import React from \"react\";\nimport LoadingBar from \"react-redux-loading-bar\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\nimport Logo from \"./img/logo.svg\";\nimport MenuButton from \"./MenuButton/MenuButton\";\nimport NetworkButton from \"./NetworkButton/NetworkButton\";\nimport WalletSaver from \"./WalletSaver\";\n\nexport default class Header extends React.Component {\n    public render() {\n        return (\n            <div className=\"Header\" key=\"header\">\n                <div className=\"header-container d-flex align-items-center h-100\">\n                    <Link to=\"/\">\n                        <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    </Link>\n                    <WalletSaver />\n                    <NetworkButton className=\"ml-auto\" />\n                    <MenuButton className=\"\" />\n                </div>\n                <LoadingBar className=\"loading-bar\" />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { Form } from \"reactstrap\";\nimport ValidationInput from \"../../ValidationInput/ValidationInput\";\nimport \"./LoginForm.css\";\n\ninterface OwnProps {\n    onChange: (passphrase: string) => void;\n    onSignIn: () => void;\n    passphrase: string;\n    isValid?: boolean;\n    username?: string | null;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass LoginForm extends React.Component<Props> {\n    public render() {\n        const { t, passphrase, isValid, username } = this.props;\n        return (\n            <Form className=\"login-form\" onSubmit={this.handleOnFormSubmit}>\n                <h4 className=\"welcome-text\">\n                    <Trans\n                        i18nKey=\"welcome:title\"\n                        values={{ name: username ? username : \"\" }}\n                    />\n                </h4>\n                <div className=\"passphrase-input-container\">\n                    <ValidationInput\n                        onChange={this.handleOnChagne}\n                        value={passphrase}\n                        showValidation={true}\n                        labelText={t(\"welcome:password\")}\n                        placeholder={t(\"welcome:password_placeholder\")}\n                        type=\"password\"\n                        isValid={isValid}\n                        error={\n                            isValid === false\n                                ? (t(\"welcome:password_invalid\") as string)\n                                : undefined\n                        }\n                    />\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary square sign-in-btn\"\n                        type=\"submit\"\n                    >\n                        <Trans i18nKey=\"welcome:signin\" />\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.props.onSignIn();\n    };\n\n    private handleOnChagne = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { onChange } = this.props;\n        onChange(event.target.value);\n    };\n}\n\nexport default withTranslation()(LoginForm);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport actions from \"../../redux/global/globalActions\";\nimport \"./Login.css\";\n\nimport {\n    Link,\n    Redirect,\n    RouteComponentProps,\n    withRouter\n} from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { checkPassphrase } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport { getNetworkId, getPassphrase } from \"../../utils/storage\";\nimport Logo from \"./img/logo-vertical.svg\";\nimport LoginForm from \"./LoginForm/LoginForm\";\n\ninterface DispatchProps {\n    login: (passphrase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n    updateNetworkId: (networkId: NetworkId) => Promise<void>;\n}\n\ninterface OwnProps {\n    location: {\n        state: {\n            from: string;\n        };\n    };\n}\n\ninterface State {\n    passphrase: string;\n    isValid?: boolean;\n    redirectToReferrer: boolean;\n    username?: string | null;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps & OwnProps;\nclass Login extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            isValid: undefined,\n            redirectToReferrer: false,\n            username: undefined\n        };\n    }\n    public componentDidMount() {\n        const { login, updateNetworkId } = this.props;\n        this.props.clearData();\n\n        const savedNetworkId = getNetworkId();\n        if (savedNetworkId) {\n            updateNetworkId(savedNetworkId);\n        }\n\n        const savedPassphrase = getPassphrase();\n        if (savedPassphrase) {\n            login(savedPassphrase);\n            this.setState({ redirectToReferrer: true });\n        }\n\n        const username = localStorage.getItem(\"USERNAME\");\n        this.setState({ username });\n    }\n    public render() {\n        const {\n            passphrase,\n            isValid,\n            redirectToReferrer,\n            username\n        } = this.state;\n        const { from } = this.props.location.state || {\n            from: { pathname: \"/\" }\n        };\n        if (redirectToReferrer) {\n            return <Redirect to={from} />;\n        }\n        return (\n            <Container className=\"Login animated fadeIn\">\n                <div className=\"title-container text-center\">\n                    <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    <h1 className=\"mt-4 logo-title\">Wallet</h1>\n                </div>\n                <div className=\"login-form-container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <LoginForm\n                            onChange={this.handleOnChangePassphrase}\n                            passphrase={passphrase}\n                            onSignIn={this.handleSignIn}\n                            isValid={isValid}\n                            username={username}\n                        />\n                    </div>\n                </div>\n                <div className=\"text-center open-different-btn-container\">\n                    <Link className=\"open-different-btn\" to=\"/selectKeyfile\">\n                        <Trans i18nKey=\"welcome:different\" />\n                    </Link>\n                </div>\n            </Container>\n        );\n    }\n\n    public handleOnChangePassphrase = (passphrase: string) => {\n        this.setState({ passphrase, isValid: undefined });\n    };\n\n    public handleSignIn = async () => {\n        const { login, history } = this.props;\n        const { passphrase } = this.state;\n\n        const isValid = await checkPassphrase(passphrase);\n        if (!isValid) {\n            this.setState({ isValid: false, passphrase: \"\" });\n            return;\n        }\n\n        await login(passphrase);\n        history.push(`/`);\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(actions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(actions.clearData());\n    },\n    updateNetworkId: (netowrkId: NetworkId) => {\n        return dispatch(actions.updateNetworkId(netowrkId));\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withTranslation()(withRouter(Login)));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport BigNumber from \"bignumber.js\";\nimport { SignedTransaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport accountActions from \"../../redux/account/accountActions\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport TooltipLabel from \"../TooltipLabel\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport \"./index.css\";\n\ninterface State {\n    name: string;\n    iconURL: string;\n    supply: string;\n    description: string;\n    feePayer?: string;\n    fee: string;\n    nameError?: string;\n    isNameValid?: boolean;\n    supplyError?: string;\n    isSupplyValid?: boolean;\n    isFeeValid?: boolean;\n    feeError?: string;\n    isSendingTx: boolean;\n    isSentTx: boolean;\n    selectedAddress?: string;\n}\n\ninterface StateProps {\n    assetAddresses?: WalletAddress[] | null;\n    platformAddresses?: WalletAddress[] | null;\n    availableQuarkList: { [address: string]: U64 | null | undefined };\n    networkId: NetworkId;\n    passphrase: string;\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    fetchAvailableQuark: (address: string) => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => Promise<unknown>;\n}\n\nconst MinimumFee = 100000;\n\ntype Props = WithTranslation & RouteComponentProps & StateProps & DispatchProps;\nclass MintAsset extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            iconURL: \"\",\n            supply: \"\",\n            description: \"\",\n            feePayer: undefined,\n            fee: \"\",\n            isSendingTx: false,\n            isSentTx: false\n        };\n    }\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n        if (this.props.assetAddresses) {\n            if (this.props.assetAddresses.length > 0) {\n                this.setState({\n                    selectedAddress: this.props.assetAddresses[0].address\n                });\n            }\n        }\n        if (this.props.platformAddresses) {\n            if (this.props.platformAddresses.length > 0) {\n                this.selectFeePayer(this.props.platformAddresses[0].address);\n            }\n        }\n    }\n    public componentWillUpdate(nextProps: Props) {\n        if (!this.props.assetAddresses && nextProps.assetAddresses) {\n            if (nextProps.assetAddresses.length > 0) {\n                this.setState({\n                    selectedAddress: nextProps.assetAddresses[0].address\n                });\n            }\n        }\n        if (!this.props.platformAddresses && nextProps.platformAddresses) {\n            if (nextProps.platformAddresses) {\n                if (nextProps.platformAddresses.length > 0) {\n                    this.selectFeePayer(nextProps.platformAddresses[0].address);\n                }\n            }\n        }\n    }\n    public render() {\n        const {\n            t,\n            platformAddresses,\n            availableQuarkList,\n            assetAddresses\n        } = this.props;\n        const {\n            name,\n            iconURL,\n            supply,\n            description,\n            feePayer,\n            fee,\n            nameError,\n            isNameValid,\n            supplyError,\n            isSupplyValid,\n            isFeeValid,\n            feeError,\n            isSendingTx,\n            isSentTx,\n            selectedAddress\n        } = this.state;\n        return (\n            <div className=\"Mint-asset\">\n                <Container>\n                    <div className=\"page-container d-flex mb-4 back-icon-container\">\n                        <Link to=\"/\" className=\"ml-auto\">\n                            <FontAwesomeIcon\n                                className=\"back-icon\"\n                                icon=\"arrow-left\"\n                            />\n                        </Link>\n                    </div>\n                    <div className=\"page-container mint-container\">\n                        <h2 className=\"title\">\n                            <Trans i18nKey=\"mint:title\" />\n                        </h2>\n                        <span className=\"mint-description\">\n                            <Trans i18nKey=\"mint:detail\" />\n                        </span>\n                        {!assetAddresses ? (\n                            <span className=\"loading-text\">\n                                <Trans i18nKey=\"mint:loading\" />\n                            </span>\n                        ) : selectedAddress ? (\n                            <div>\n                                {isSentTx ? (\n                                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                                        <div className=\"text-center\">\n                                            <div>\n                                                <img\n                                                    src={CheckIcon}\n                                                    alt={\"check\"}\n                                                />\n                                            </div>\n                                            <div className=\"mt-3\">\n                                                <span>\n                                                    <Trans i18nKey=\"mint:complete\" />\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div className=\"asset-info-container\">\n                                            <ValidationInput\n                                                labelText={t(\"mint:name.label\")}\n                                                placeholder={t(\n                                                    \"mint:name.placeholder\"\n                                                )}\n                                                value={name}\n                                                onChange={this.handleNameChange}\n                                                showValidation={false}\n                                                isValid={isNameValid}\n                                                error={nameError}\n                                                onBlur={\n                                                    this.checkNameValidation\n                                                }\n                                            />\n                                            <ValidationInput\n                                                labelText={t(\n                                                    \"mint:supply.label\"\n                                                )}\n                                                decimalScale={0}\n                                                placeholder={t(\n                                                    \"mint:supply.placeholder\"\n                                                )}\n                                                value={supply}\n                                                type=\"number\"\n                                                onChange={\n                                                    this.handleSupplyChange\n                                                }\n                                                showValidation={false}\n                                                isValid={isSupplyValid}\n                                                error={supplyError}\n                                                tooltip={t(\n                                                    \"mint:supply.tooltip\"\n                                                )}\n                                                onBlur={\n                                                    this.checkSupplyValidation\n                                                }\n                                            />\n                                            <div className=\"d-flex\">\n                                                <div className=\"icon-url-input-container\">\n                                                    <ValidationInput\n                                                        labelText={t(\n                                                            \"mint:url.label\"\n                                                        )}\n                                                        placeholder={t(\n                                                            \"mint:url.placeholder\"\n                                                        )}\n                                                        value={iconURL}\n                                                        onChange={\n                                                            this\n                                                                .handleIconURLChange\n                                                        }\n                                                        tooltip={t(\n                                                            \"mint:url.tooltip\"\n                                                        )}\n                                                        showValidation={false}\n                                                    />\n                                                </div>\n                                                {iconURL !== \"\" && (\n                                                    <div\n                                                        className=\"preview-container\"\n                                                        style={{\n                                                            backgroundImage: `URL(${iconURL})`\n                                                        }}\n                                                    />\n                                                )}\n                                            </div>\n                                            <div className=\"mb-4\">\n                                                <span className=\"input-label d-block mb-2\">\n                                                    <Trans i18nKey=\"mint:description.title\" />\n                                                    <TooltipLabel tooltip=\"mint:description.tooltip\" />\n                                                </span>\n                                                <textarea\n                                                    className=\"form-control description-area\"\n                                                    value={description}\n                                                    onChange={\n                                                        this\n                                                            .handleDescriptionChange\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"select-address-container\">\n                                                <span className=\"select-address-label\">\n                                                    <Trans i18nKey=\"mint:address.title\" />\n                                                    <TooltipLabel tooltip=\"mint:address.tooltip\" />\n                                                </span>\n                                                <select\n                                                    onChange={\n                                                        this\n                                                            .handleChangeSelectAddress\n                                                    }\n                                                    className=\"form-control\"\n                                                >\n                                                    {assetAddresses.map(a => (\n                                                        <option\n                                                            key={a.address}\n                                                            value={a.address}\n                                                        >\n                                                            {t(\n                                                                \"mint:address.address_type\"\n                                                            )}{\" \"}\n                                                            {t(\"main:address\", {\n                                                                index:\n                                                                    a.index + 1\n                                                            })}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            </div>\n                                            {platformAddresses && (\n                                                // FIXME: This code is duplicated.\n                                                <div className=\"d-flex fee-container\">\n                                                    <div className=\"fee-input-container\">\n                                                        <ValidationInput\n                                                            value={fee}\n                                                            decimalScale={0}\n                                                            onChange={\n                                                                this\n                                                                    .handleChangeFee\n                                                            }\n                                                            type=\"number\"\n                                                            showValidation={\n                                                                true\n                                                            }\n                                                            labelText={t(\n                                                                \"mint:fee.title\"\n                                                            )}\n                                                            tooltip={t(\n                                                                \"mint:fee.tooltip\"\n                                                            )}\n                                                            placeholder={\n                                                                !feePayer\n                                                                    ? t(\n                                                                          \"mint:fee.placeholder_select_fee_payer\"\n                                                                      )\n                                                                    : !availableQuarkList[\n                                                                          feePayer\n                                                                      ]\n                                                                    ? t(\n                                                                          \"mint:fee.placeholder_loading\"\n                                                                      )\n                                                                    : \"100,000 (CCC)\"\n                                                            }\n                                                            disable={\n                                                                feePayer ==\n                                                                    null ||\n                                                                (feePayer !=\n                                                                    null &&\n                                                                    availableQuarkList[\n                                                                        feePayer\n                                                                    ] == null)\n                                                            }\n                                                            onBlur={\n                                                                this\n                                                                    .checkFeeValidation\n                                                            }\n                                                            isValid={isFeeValid}\n                                                            error={feeError}\n                                                        />\n                                                    </div>\n                                                    <div className=\"fee-payer-container\">\n                                                        <div className=\"input-label\">\n                                                            <Trans i18nKey=\"mint:payer.title\" />\n                                                            <TooltipLabel tooltip=\"mint:payer.tooltip\" />\n                                                        </div>\n                                                        {platformAddresses.length ===\n                                                        0 ? (\n                                                            <select\n                                                                className=\"form-control\"\n                                                                disabled={true}\n                                                            >\n                                                                <option>\n                                                                    {t(\n                                                                        \"mint:payer.no_address\"\n                                                                    )}\n                                                                </option>\n                                                            </select>\n                                                        ) : (\n                                                            <div>\n                                                                <select\n                                                                    className=\"form-control\"\n                                                                    value={\n                                                                        feePayer\n                                                                    }\n                                                                    defaultValue={\n                                                                        \"default\"\n                                                                    }\n                                                                    onChange={\n                                                                        this\n                                                                            .handleChangeFeePayer\n                                                                    }\n                                                                >\n                                                                    <option\n                                                                        value=\"default\"\n                                                                        disabled={\n                                                                            true\n                                                                        }\n                                                                    >\n                                                                        {t(\n                                                                            \"mint:payer.select_address\"\n                                                                        )}\n                                                                    </option>\n                                                                    {platformAddresses.map(\n                                                                        pa => (\n                                                                            <option\n                                                                                value={\n                                                                                    pa.address\n                                                                                }\n                                                                                key={\n                                                                                    pa.address\n                                                                                }\n                                                                            >\n                                                                                CCC{\" \"}\n                                                                                {t(\n                                                                                    \"main:address\",\n                                                                                    {\n                                                                                        index:\n                                                                                            pa.index +\n                                                                                            1\n                                                                                    }\n                                                                                )}\n                                                                            </option>\n                                                                        )\n                                                                    )}\n                                                                </select>\n                                                                {feePayer &&\n                                                                    availableQuarkList[\n                                                                        feePayer\n                                                                    ] && (\n                                                                        <span className=\"available-ccc-text number pl-2 pr-2\">\n                                                                            {availableQuarkList[\n                                                                                feePayer\n                                                                            ]!.toLocaleString()}{\" \"}\n                                                                            CCC\n                                                                        </span>\n                                                                    )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div className=\"submit-btn-container\">\n                                            <button\n                                                disabled={isSendingTx}\n                                                type=\"submit\"\n                                                className=\"btn btn-primary square w-100 send-btn\"\n                                                onClick={this.mintAsset}\n                                            >\n                                                <Trans\n                                                    i18nKey={\"mint:mint_btn\"}\n                                                />\n                                            </button>\n                                        </div>\n                                    </div>\n                                )}\n                                {isSendingTx && (\n                                    <div className=\"minting-panel d-flex align-items-center justify-content-center\">\n                                        <Spinner\n                                            name=\"line-scale\"\n                                            color=\"white\"\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        ) : (\n                            <span className=\"no-address-label\">\n                                <Trans i18nKey=\"mint:error.asset.required\" />\n                            </span>\n                        )}\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n\n    private handleChangeSelectAddress = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.setState({ selectedAddress: event.target.value });\n    };\n\n    private checkNameValidation = () => {\n        const { name } = this.state;\n        if (name.trim() === \"\") {\n            this.setState({\n                isNameValid: false,\n                nameError: this.props.t(\"mint:error.name.required\")\n            });\n            return false;\n        }\n        this.setState({\n            isNameValid: true,\n            nameError: undefined\n        });\n        return true;\n    };\n\n    private checkSupplyValidation = () => {\n        const { supply } = this.state;\n        if (supply.trim() === \"\") {\n            this.setState({\n                isSupplyValid: false,\n                supplyError: this.props.t(\"mint:error.supply.required\")\n            });\n            return false;\n        }\n\n        const amountSupply = new BigNumber(supply);\n        if (amountSupply.isNaN() || amountSupply.lt(0)) {\n            this.setState({\n                isSupplyValid: false,\n                supplyError: this.props.t(\"mint:error.supply.invalid\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isSupplyValid: true,\n            supplyError: undefined\n        });\n        return true;\n    };\n\n    private checkFeeValidation = () => {\n        const { fee, feePayer } = this.state;\n        const { availableQuarkList } = this.props;\n\n        if (!feePayer) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.not_selected\")\n            });\n            return false;\n        }\n        const availableQuark = availableQuarkList[feePayer];\n        if (!availableQuark) {\n            throw Error(this.props.t(\"mint:error.fee.invalid_balance\"));\n        }\n        if (fee.trim() === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.minimum\", {\n                    fee: MinimumFee\n                })\n            });\n            return false;\n        }\n\n        if (availableQuark.value.lt(amountFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.minimum_balance\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleChangeFee = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            fee: event.target.value\n        });\n    };\n\n    private handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            name: event.target.value\n        });\n    };\n\n    private handleDescriptionChange = (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        this.setState({\n            description: event.target.value\n        });\n    };\n\n    private handleIconURLChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            iconURL: event.target.value\n        });\n    };\n\n    private handleSupplyChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            supply: event.target.value\n        });\n    };\n\n    private handleChangeFeePayer = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.selectFeePayer(event.target.value);\n    };\n\n    private selectFeePayer = (address: string) => {\n        this.setState({\n            feePayer: address,\n            fee: `${MinimumFee}`,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n        this.props.fetchAvailableQuark(address);\n    };\n\n    private mintAsset = async () => {\n        const { networkId, passphrase } = this.props;\n        const { selectedAddress: address } = this.state;\n        const {\n            name,\n            description,\n            supply,\n            iconURL,\n            fee,\n            feePayer\n        } = this.state;\n        if (!this.checkNameValidation()) {\n            return;\n        }\n        if (!this.checkSupplyValidation()) {\n            return;\n        }\n        if (!this.checkFeeValidation()) {\n            return;\n        }\n        this.setState({ isSendingTx: true });\n        const signedTx = await TxUtil.createMintAssetTx({\n            name,\n            supply: new U64(supply),\n            iconURL,\n            description,\n            recipient: address!,\n            networkId,\n            fee: new U64(fee),\n            feePayer: feePayer!,\n            passphrase\n        });\n        try {\n            await this.props.sendSignedTransaction(\n                address!,\n                signedTx,\n                feePayer!\n            );\n            this.setState({ isSentTx: true });\n        } catch (e) {\n            toast.error(\"Server is not responding.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            console.error(e);\n        }\n        this.setState({ isSendingTx: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => {\n    const platformAddresses = state.walletReducer.platformAddresses;\n    const availableQuarkList = state.accountReducer.availableQuark;\n    const passphrase = state.globalReducer.passphrase!;\n    const networkId = state.globalReducer.networkId;\n    const assetAddresses = state.walletReducer.assetAddresses;\n    return {\n        assetAddresses,\n        platformAddresses,\n        availableQuarkList,\n        passphrase,\n        networkId\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    },\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(\n                address,\n                signedTransaction,\n                feePayer\n            )\n        );\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(MintAsset));\n","import React from \"react\";\nimport \"./NotFound.css\";\n\nexport default class NotFound extends React.Component<any, any> {\n    public render() {\n        return (\n            <div id=\"Not-found\">\n                <div className=\"not-found\">\n                    <div className=\"not-found-404\">\n                        <h3>Oops! Page not found</h3>\n                        <h1>\n                            <span>4</span>\n                            <span>0</span>\n                            <span>4</span>\n                        </h1>\n                    </div>\n                    <h2>\n                        we are sorry, but the page you requested was not found\n                    </h2>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { isKeystoreExisted } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\n\ninterface State {\n    isKeyExisted?: boolean | null;\n}\n\ninterface OwnProps {\n    component: any;\n    exact?: boolean;\n    path: string;\n}\n\ninterface StateProps {\n    passphrase?: string | null;\n}\n\ntype Props = StateProps & OwnProps;\nclass PrivateRoute extends React.Component<Props, State> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            isKeyExisted: undefined\n        };\n    }\n\n    public componentDidUpdate() {\n        const { passphrase } = this.props;\n        const { isKeyExisted } = this.state;\n        if (!passphrase && isKeyExisted == null) {\n            this.checkLogin();\n        }\n    }\n\n    public componentDidMount() {\n        const { passphrase } = this.props;\n        const { isKeyExisted } = this.state;\n        if (!passphrase && isKeyExisted == null) {\n            this.checkLogin();\n        }\n    }\n\n    public render() {\n        const { passphrase, component: Component, ...rest } = this.props;\n        const { isKeyExisted } = this.state;\n        return (\n            <Route\n                {...rest}\n                // tslint:disable-next-line:jsx-no-lambda\n                render={props =>\n                    passphrase ? (\n                        <Component {...props} />\n                    ) : isKeyExisted == null ? (\n                        <div>Loading...</div>\n                    ) : isKeyExisted ? (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: props.location }\n                            }}\n                        />\n                    ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/selectKeyfile\"\n                            }}\n                        />\n                    )\n                }\n            />\n        );\n    }\n\n    private checkLogin = async () => {\n        const keyExisted = await isKeystoreExisted();\n        if (keyExisted) {\n            this.setState({ isKeyExisted: true });\n        } else {\n            this.setState({ isKeyExisted: false });\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    passphrase: state.globalReducer.passphrase\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"reactstrap\";\nimport Form from \"reactstrap/lib/Form\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { clearKeystore, importMnemonic } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions, { Action } from \"../../redux/global/globalActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport \"./RestoreWallet.css\";\n\ninterface State {\n    secretPhrase: string;\n    passphrase: string;\n    passphraseConfirm: string;\n    isPassphraseValid?: boolean;\n    passphraseError?: string;\n    isPassphraseConfirmValid?: boolean;\n    passphraseConfirmError?: string;\n    username: string;\n    isUsernameValid?: boolean;\n    usernameError?: string;\n}\n\ninterface DispatchProps {\n    login: (passpharase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps;\nclass RestoreWallet extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            secretPhrase: \"\",\n            passphrase: \"\",\n            passphraseConfirm: \"\",\n            isPassphraseValid: undefined,\n            passphraseError: undefined,\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined,\n            username: \"\",\n            isUsernameValid: undefined,\n            usernameError: undefined\n        };\n    }\n    public async componentDidMount() {\n        const { clearData } = this.props;\n        clearPassphrase();\n        clearData();\n        clearWalletKeys();\n        await clearKeystore();\n    }\n    public render() {\n        const { t } = this.props;\n        const {\n            passphrase,\n            passphraseConfirm,\n            isPassphraseConfirmValid,\n            isPassphraseValid,\n            passphraseConfirmError,\n            passphraseError,\n            secretPhrase,\n            username,\n            isUsernameValid,\n            usernameError\n        } = this.state;\n        return (\n            <Container className=\"Restore-wallet animated fadeIn\">\n                <div className=\"close-btn\">\n                    <Link to=\"/selectKeyfile\">\n                        <FontAwesomeIcon icon=\"times\" className=\"icon\" />\n                    </Link>\n                </div>\n                <Form\n                    className=\"restore-content\"\n                    onSubmit={this.handleOnFormSubmit}\n                >\n                    <div className=\"title-container\">\n                        <h4 className=\"title\">\n                            <Trans i18nKey=\"restore:title\" />\n                        </h4>\n                    </div>\n                    <div className=\"description\">\n                        <Trans i18nKey=\"restore:description\" />\n                    </div>\n                    <div className=\"phrase-container\">\n                        <textarea\n                            className=\"phrase-input\"\n                            value={secretPhrase}\n                            onChange={this.handleChangeSecretPhraseInput}\n                        />\n                    </div>\n                    <div className=\"username-input-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:name.label\")}\n                            onChange={this.handleUsernameInput}\n                            value={username}\n                            showValidation={true}\n                            placeholder={t(\"restore:name.placeholder\")}\n                            type=\"text\"\n                            isValid={isUsernameValid}\n                            error={usernameError}\n                            onBlur={this.checkUsernameValid}\n                        />\n                    </div>\n                    <div className=\"passphrase-input-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:password.label\")}\n                            onChange={this.handlePassphraseInput}\n                            value={passphrase}\n                            showValidation={true}\n                            placeholder={t(\"restore:password.placeholder\")}\n                            type=\"password\"\n                            isValid={isPassphraseValid}\n                            error={passphraseError}\n                            onBlur={this.checkPassphraseValid}\n                        />\n                    </div>\n                    <div className=\"passphrase-confirm-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:confirm.label\")}\n                            onChange={this.handlePassphraseConfirmInput}\n                            value={passphraseConfirm}\n                            showValidation={true}\n                            placeholder={t(\"restore:confirm.placeholder\")}\n                            type=\"password\"\n                            isValid={isPassphraseConfirmValid}\n                            error={passphraseConfirmError}\n                            onBlur={this.checkPassphraseConfirm}\n                        />\n                    </div>\n                    <div className=\"password-description\">\n                        <span>\n                            <Trans i18nKey=\"restore:mnemonic.detail\" />\n                        </span>\n                    </div>\n                    <div className=\"main-btn-container\">\n                        <button\n                            className=\"btn btn-primary reverse square main-btn\"\n                            type=\"submit\"\n                        >\n                            {t(\"restore:ok\")}\n                        </button>\n                    </div>\n                </Form>\n            </Container>\n        );\n    }\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleSubmit();\n    };\n\n    private handleSubmit = async () => {\n        const { passphrase, username, secretPhrase } = this.state;\n        const { t, login, history } = this.props;\n\n        if (!this.checkUsernameValid()) {\n            return;\n        }\n\n        if (!this.checkPassphraseValid()) {\n            return;\n        }\n\n        if (!this.checkPassphraseConfirm()) {\n            return;\n        }\n        const splitPassphrases = secretPhrase.match(/\\S+/g);\n\n        if (!splitPassphrases || splitPassphrases.length !== 12) {\n            toast.error(t(\"restore:error.mnemonic.invalid\"), {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        try {\n            localStorage.setItem(\"USERNAME\", username!);\n            await importMnemonic(splitPassphrases.join(\" \"), passphrase);\n            await login(passphrase!);\n            history.push(`/`);\n        } catch (e) {\n            toast.error(t(\"restore:error.mnemonic.invalid\"), {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n        }\n    };\n\n    private handleChangeSecretPhraseInput = (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        this.setState({ secretPhrase: event.target.value });\n    };\n\n    private checkPassphraseValid = () => {\n        const { t } = this.props;\n        const { passphrase } = this.state;\n        if (passphrase.length < 8) {\n            this.setState({\n                passphraseError: t(\"restore:error.password.minimum\"),\n                isPassphraseValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: true\n        });\n        return true;\n    };\n\n    private checkUsernameValid = () => {\n        const { t } = this.props;\n        const { username } = this.state;\n        if (username === \"\") {\n            this.setState({\n                isUsernameValid: false,\n                usernameError: t(\"restore:error.name.required\")\n            });\n            return false;\n        }\n        if (username.length > 20) {\n            this.setState({\n                usernameError: t(\"restore:error.name.maximum\"),\n                isUsernameValid: false\n            });\n            return false;\n        }\n        this.setState({\n            isUsernameValid: true,\n            usernameError: undefined\n        });\n        return true;\n    };\n\n    private handleUsernameInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            username: event.target.value,\n            usernameError: undefined,\n            isUsernameValid: undefined\n        });\n    };\n\n    private checkPassphraseConfirm = () => {\n        const { t } = this.props;\n        const { passphrase, passphraseConfirm } = this.state;\n        if (passphrase !== passphraseConfirm) {\n            this.setState({\n                passphraseConfirmError: t(\"restore:error.confirm.mismatch\"),\n                isPassphraseConfirmValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: true\n        });\n        return true;\n    };\n\n    private handlePassphraseInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: undefined,\n            passphraseConfirm: \"\",\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined\n        });\n        this.setState({ passphrase: event.target.value });\n    };\n\n    private handlePassphraseConfirmInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n        this.setState({ passphraseConfirm: event.target.value });\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(globalActions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(globalActions.clearData());\n    }\n});\nexport default connect(\n    undefined,\n    mapDispatchToProps\n)(withTranslation()(withRouter(RestoreWallet)));\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { WalletAddress } from \"../../model/address\";\nimport { clearKeystore } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions from \"../../redux/global/globalActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport Logo from \"./img/logo-vertical.svg\";\nimport CreateNewWalletIconHover from \"./img/plus-hover.svg\";\nimport CreateNewWalletIcon from \"./img/plus-standard.svg\";\nimport ImportKeyIconHover from \"./img/restore-hover.svg\";\nimport ImportKeyIcon from \"./img/restore-standard.svg\";\nimport \"./SelectKeyFile.css\";\n\ninterface StateProps {\n    creatingAddresses?: WalletAddress[] | null;\n    walletName?: string | null;\n}\n\ninterface DispatchProps {\n    clearData: () => void;\n}\n\ninterface State {\n    isImportBtnHover: boolean;\n    isCreateBtnHover: boolean;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps & StateProps;\nclass SelectKeyFile extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isCreateBtnHover: false,\n            isImportBtnHover: false\n        };\n    }\n    public async componentDidMount() {\n        await clearKeystore();\n        clearWalletKeys();\n        clearPassphrase();\n        this.props.clearData();\n    }\n    public render() {\n        const { isImportBtnHover, isCreateBtnHover } = this.state;\n        return (\n            <Container className=\"Select-key-file animated fadeIn\">\n                <div className=\"text-center title-container\">\n                    <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    <h1 className=\"mt-4 logo-title\">Wallet</h1>\n                </div>\n                <div className=\"welcome-text-container\">\n                    <h4 className=\"welcome-text\">\n                        Welcome to CodeChain wallet\n                    </h4>\n                    <div>\n                        <span className=\"description-text\">\n                            <Trans i18nKey=\"create:select.title\" />\n                        </span>\n                    </div>\n                </div>\n                <div className=\"button-container d-flex justify-content-center\">\n                    <div\n                        className=\"button-item d-flex align-items-center justify-content-center\"\n                        onClick={this.onClickCreateWallet}\n                        onMouseEnter={this.handleCreateButtonHover}\n                        onMouseLeave={this.handleCreateButtonOut}\n                    >\n                        <div>\n                            <div>\n                                {isCreateBtnHover ? (\n                                    <img\n                                        src={CreateNewWalletIconHover}\n                                        alt={\"create\"}\n                                        className=\"icon\"\n                                    />\n                                ) : (\n                                    <img\n                                        src={CreateNewWalletIcon}\n                                        alt={\"create\"}\n                                        className=\"icon\"\n                                    />\n                                )}\n                            </div>\n                            <div className=\"text\">\n                                <Trans i18nKey=\"create:select.create.title\" />\n                            </div>\n                            <div className=\"button-description\">\n                                <span>\n                                    <Trans i18nKey=\"create:select.create.detail\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        className=\"button-item d-flex justify-content-center\"\n                        onClick={this.onClickRestore}\n                        onMouseEnter={this.handleImportButtonHover}\n                        onMouseLeave={this.handleImportButtopOut}\n                    >\n                        <div>\n                            <div>\n                                {isImportBtnHover ? (\n                                    <img\n                                        src={ImportKeyIconHover}\n                                        alt={\"import\"}\n                                        className=\"icon\"\n                                    />\n                                ) : (\n                                    <img\n                                        src={ImportKeyIcon}\n                                        alt={\"import\"}\n                                        className=\"icon\"\n                                    />\n                                )}\n                            </div>\n                            <div className=\"text\">\n                                <Trans i18nKey=\"create:select.restore.title\" />\n                            </div>\n                            <div className=\"button-description\">\n                                <span>\n                                    <Trans i18nKey=\"create:select.restore.detail\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n    private handleImportButtonHover = () => {\n        this.setState({ isImportBtnHover: true });\n    };\n    private handleImportButtopOut = () => {\n        this.setState({ isImportBtnHover: false });\n    };\n    private handleCreateButtonHover = () => {\n        this.setState({ isCreateBtnHover: true });\n    };\n    private handleCreateButtonOut = () => {\n        this.setState({ isCreateBtnHover: false });\n    };\n    private onClickRestore = () => {\n        const { history } = this.props;\n        history.push(`/restoreWallet`);\n    };\n    private onClickCreateWallet = () => {\n        const { history } = this.props;\n        history.push(`/createWallet`);\n    };\n}\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    clearData: () => {\n        dispatch(globalActions.clearData());\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withTranslation(\"select\")(withRouter(SelectKeyFile)));\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faAngleDoubleLeft,\n    faAngleDoubleRight,\n    faAngleLeft,\n    faAngleRight,\n    faArrowAltCircleDown,\n    faArrowCircleDown,\n    faArrowCircleRight,\n    faArrowLeft,\n    faArrowRight,\n    faBars,\n    faChevronLeft,\n    faCircle,\n    faCopy,\n    faEllipsisH,\n    faExchangeAlt,\n    faExclamationCircle,\n    faFileDownload,\n    faInfoCircle,\n    faLock,\n    faPlus,\n    faPlusCircle,\n    faQuestionCircle,\n    faRedoAlt,\n    faTimes,\n    faTrashAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport i18n from \"../../i18next\";\nimport { ReducerConfigure } from \"../../redux\";\nimport Account from \"../Account/Account\";\nimport AddressList from \"../AddressList/AddressList\";\nimport AssetDetail from \"../AssetDetail/AssetDetail\";\nimport AssetList from \"../AssetList/AssetList\";\nimport CreateWallet from \"../CreateWallet/CreateWallet\";\nimport Footer from \"../Footer\";\nimport Header from \"../Header/Header\";\nimport Login from \"../Login/Login\";\nimport MintAsset from \"../MintAsset\";\nimport NotFound from \"../NotFound/NotFound\";\nimport PrivateRoute from \"../PrivateRoute/PrivateRoute\";\nimport RestoreWallet from \"../RestoreWallet/RestoreWallet\";\nimport SelectKeyFile from \"../SelectKeyFile/SelectKeyFile\";\nimport \"./App.css\";\n\nlibrary.add(\n    faPlus,\n    faTrashAlt,\n    faFileDownload,\n    faBars,\n    faChevronLeft,\n    faArrowAltCircleDown,\n    faPlusCircle,\n    faTimes,\n    faInfoCircle,\n    faArrowLeft,\n    faCircle,\n    faEllipsisH,\n    faArrowCircleRight,\n    faArrowCircleDown,\n    faExchangeAlt,\n    faCopy,\n    faArrowRight,\n    faRedoAlt,\n    faExclamationCircle,\n    faQuestionCircle,\n    faChevronLeft,\n    faAngleRight,\n    faAngleDoubleRight,\n    faAngleLeft,\n    faAngleDoubleLeft,\n    faLock\n);\n\ninterface StateProps {\n    passphrase?: string | null;\n}\ntype Props = StateProps;\nclass App extends React.Component<Props, any> {\n    private appRef: React.RefObject<any>;\n    public constructor(props: any) {\n        super(props);\n        this.appRef = React.createRef();\n    }\n    public render() {\n        const { passphrase } = this.props;\n        return (\n            <I18nextProvider i18n={i18n}>\n                <Router basename={process.env.PUBLIC_URL || \"/\"}>\n                    <div id=\"app\" className=\"app\" ref={this.appRef}>\n                        <ToastContainer className=\"custom-toast\" />\n                        {passphrase && <Header />}\n                        <div className=\"app-container\">\n                            <Switch>\n                                <Route path=\"/login\" component={Login} />\n                                <Route\n                                    path=\"/selectKeyfile\"\n                                    component={SelectKeyFile}\n                                />\n                                <Route\n                                    path=\"/createWallet\"\n                                    component={CreateWallet}\n                                />\n                                <Route\n                                    path=\"/restoreWallet\"\n                                    component={RestoreWallet}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/\"\n                                    component={AddressList}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/index.html\"\n                                    component={AddressList}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/mint\"\n                                    component={MintAsset}\n                                />\n                                <PrivateRoute\n                                    path=\"/:address/assets\"\n                                    component={AssetList}\n                                />\n                                <PrivateRoute\n                                    path=\"/:address/account\"\n                                    component={Account}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/:address/:assetType\"\n                                    component={AssetDetail}\n                                />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </div>\n                        <Footer />\n                    </div>\n                </Router>\n            </I18nextProvider>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    passphrase: state.globalReducer.passphrase\n});\nexport default connect(mapStateToProps)(App);\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { PlatformAccount } from \"../../model/address\";\nimport { Action, ActionType } from \"./accountActions\";\n\nexport interface AccountState {\n    availableQuark: {\n        [address: string]: U64 | null | undefined;\n    };\n    accounts: {\n        [address: string]: {\n            data?: PlatformAccount | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n}\n\nexport const accountInitState: AccountState = {\n    availableQuark: {},\n    accounts: {}\n};\n\nexport const accountReducer = (state = accountInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UpdateAvailableQuark: {\n            const address = action.data.address;\n            const availableQuark = {\n                ...state.availableQuark,\n                [address]: action.data.amount\n            };\n            return {\n                ...state,\n                availableQuark\n            };\n        }\n        case ActionType.SetFetchingAccount: {\n            const accounts = {\n                ...state.accounts,\n                [action.data.address]: {\n                    ...state.accounts[action.data.address],\n                    isFetching: true\n                }\n            };\n            return {\n                ...state,\n                accounts\n            };\n        }\n        case ActionType.UpdateAccount: {\n            const accounts = {\n                ...state.accounts,\n                [action.data.address]: {\n                    data: action.data.account,\n                    isFetching: false,\n                    updatedAt: +new Date()\n                }\n            };\n            return {\n                ...state,\n                accounts\n            };\n        }\n    }\n    return state;\n};\n","import { NetworkId } from \"../../model/address\";\nimport { Action, ActionType } from \"./globalActions\";\n\nexport interface GlobalState {\n    passphrase?: string | null;\n    networkId: NetworkId;\n}\n\nexport const globalInitState: GlobalState = {\n    passphrase: undefined,\n    networkId: \"cc\"\n};\n\nexport const globalReducer = (state = globalInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.Login: {\n            return {\n                ...state,\n                passphrase: action.data.passphrase\n            };\n        }\n        case ActionType.Logout: {\n            return {\n                ...state,\n                passphrase: undefined\n            };\n        }\n        case ActionType.UpdateNetwork: {\n            return {\n                ...state,\n                networkId: action.data.networkId\n            };\n        }\n    }\n    return state;\n};\n","import { WalletAddress } from \"../../model/address\";\nimport { Action, ActionType } from \"./walletActions\";\n\nexport interface WalletState {\n    platformAddresses?: WalletAddress[] | null;\n    assetAddresses?: WalletAddress[] | null;\n    isLoadingPlatformAddresses?: boolean | null;\n    isLoadingAssetAddresses?: boolean | null;\n}\n\nexport const walletInitState: WalletState = {\n    platformAddresses: undefined,\n    assetAddresses: undefined,\n    isLoadingPlatformAddresses: undefined,\n    isLoadingAssetAddresses: undefined\n};\n\nexport const walletReducer = (state = walletInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UpdateWalletAssetAddresses:\n            return {\n                ...state,\n                assetAddresses: action.data.assetAddresses\n            };\n        case ActionType.UpdateWalletPlatformAddresses:\n            return {\n                ...state,\n                platformAddresses: action.data.platformAddresses\n            };\n        case ActionType.ClearWalletAddresses: {\n            return {\n                ...state,\n                platformAddresses: undefined,\n                assetAddresses: undefined\n            };\n        }\n        case ActionType.SetLoadingAssetAddresses: {\n            return {\n                ...state,\n                isLoadingAssetAddresses: action.data.isLoading\n            };\n        }\n        case ActionType.SetLoadingPlatformAddresses: {\n            return {\n                ...state,\n                isLoadingPlatformAddresses: action.data.isLoading\n            };\n        }\n    }\n    return state;\n};\n","import { loadingBarReducer } from \"react-redux-loading-bar\";\nimport { combineReducers } from \"redux\";\nimport { accountReducer, AccountState } from \"./account/accountReducer\";\nimport { assetReducer, AssetState } from \"./asset/assetReducer\";\nimport { chainReducer, ChainState } from \"./chain/chainReducer\";\nimport { ActionType } from \"./global/globalActions\";\nimport { globalReducer, GlobalState } from \"./global/globalReducer\";\nimport { walletReducer, WalletState } from \"./wallet/walletReducer\";\n\nexport interface ReducerConfigure {\n    globalReducer: GlobalState;\n    walletReducer: WalletState;\n    assetReducer: AssetState;\n    chainReducer: ChainState;\n    accountReducer: AccountState;\n}\n\nconst appReducer = combineReducers({\n    globalReducer,\n    walletReducer,\n    assetReducer,\n    chainReducer,\n    accountReducer,\n    loadingBar: loadingBarReducer\n});\n\nconst rootReducer = (state: any, action: any) => {\n    if (action.type === ActionType.ClearData) {\n        state = undefined;\n    }\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === \"installed\") {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    \"New content is available; please refresh.\"\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    \"Content is cached for offline use.\"\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\")!.indexOf(\"javascript\") ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport {\n    applyMiddleware as applyMiddlewareChrome,\n    Store\n} from \"react-chrome-redux\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport App from \"./components/App/App\";\nimport rootReducer from \"./redux\";\nimport { unregister } from \"./registerServiceWorker\";\nimport \"./styles/index.css\";\n\nif (process.env.REACT_APP_BUILD_TARGET === \"chrome-extension\") {\n    const store = new Store({\n        portName: \"WALLET_APP\"\n    });\n\n    // Apply middleware to proxy store\n    const middleware = [thunk, logger];\n    const storeWithMiddleware = applyMiddlewareChrome(store, ...middleware);\n\n    store.ready().then(() => {\n        ReactDOM.render(\n            <Provider store={storeWithMiddleware}>\n                <App />\n            </Provider>,\n            document.getElementById(\"root\") as HTMLElement\n        );\n    });\n} else {\n    const composeEnhancers = composeWithDevTools({});\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(thunk))\n    );\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById(\"root\") as HTMLElement\n    );\n}\n\nunregister();\n","module.exports = __webpack_public_path__ + \"static/media/mainnet.ef91ce98.svg\";","module.exports = __webpack_public_path__ + \"static/media/testnet.afbd2264.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy-hover.790a3790.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.f3de9253.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons-check.ab7566d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons-error.84ba3bbf.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy-hover.790a3790.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.f3a44cac.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.31c9b562.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.11edc2fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/gitter.038f66f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/medium.e5a5b160.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.afaec1a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.a2682b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.31e76966.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.8fe1be51.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.8fe1be51.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-hover.37f5ad9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-standard.e3e35367.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-hover.61f75205.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-standard.5ed52c2c.svg\";"],"sourceRoot":""}