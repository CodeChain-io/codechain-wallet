{"version":3,"sources":["i18next/en/index.ts","i18next/ko/index.ts","i18next/index.ts","utils/network.ts","networks/Api.ts","utils/storage.ts","model/address.ts","model/keystore.ts","utils/transaction.ts","redux/asset/assetReducer.ts","redux/asset/assetActions.ts","redux/chain/chainReducer.ts","redux/chain/chainActions.ts","redux/account/accountActions.ts","redux/wallet/walletActions.ts","components/AddressContainer/AddressContainer.tsx","components/PayTxHistory/PayTxItem/PayTxItem.tsx","components/PayTxHistory/PayTxHistory.tsx","components/TooltipLabel/index.tsx","components/ValidationInput/ValidationInput.tsx","components/Account/SendAsset/CCCReceiverContainer/CCCReceiverItem/CCCReceiverItem.tsx","components/Account/SendAsset/CCCReceiverContainer/CCCReceiverContainer.tsx","components/Account/SendAsset/SendCCC.tsx","components/Account/Account.tsx","utils/ImageLoader/ImageLoader.tsx","components/AddressList/AddressItem/AddressItem.tsx","components/AddressList/AddressList.tsx","utils/metadata.ts","components/AssetTxHistory/AssetTxItem/AssetTxItemEntity/index.tsx","components/AssetTxHistory/AssetTxItem/AssetTxItem.tsx","components/AssetTxHistory/AssetTxHistory.tsx","components/AssetDetail/AssetDetail.tsx","components/AssetList/AssetItem/AssetItem.tsx","components/AssetList/SendAsset/ReceiverContainer/ReceiverItem/ReceiverItem.tsx","components/AssetList/SendAsset/ReceiverContainer/ReceiverContainer.tsx","redux/global/globalActions.ts","components/AssetList/SendAsset/SendAsset.tsx","components/AssetList/AssetList.tsx","components/CreateWallet/CreateWallet.tsx","components/CreateWallet/ConfirmBackupPhrase/ConfirmBackupPhrase.tsx","components/CreateWallet/InputPassphrase/InputPassphrase.tsx","components/CreateWallet/ShowBackupPhrase/ShowBackupPhrase.tsx","components/Footer/index.tsx","components/ExportBackupPopup/ExportBackupPopup.tsx","components/Header/MenuButton/MenuButton.tsx","components/Header/NetworkButton/NetworkButton.tsx","components/Header/WalletSaver/index.tsx","components/Header/Header.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/MintAsset/index.tsx","components/NotFound/NotFound.tsx","components/PrivateRoute/PrivateRoute.tsx","components/RestoreWallet/RestoreWallet.tsx","components/SelectKeyFile/SelectKeyFile.tsx","components/App/App.tsx","redux/account/accountReducer.ts","redux/global/globalReducer.ts","redux/wallet/walletReducer.ts","redux/index.ts","registerServiceWorker.ts","index.tsx","components/Header/NetworkButton/img/mainnet.svg","components/Header/NetworkButton/img/testnet.svg","components/AddressContainer/img/copy-hover.svg","components/AddressContainer/img/copy.svg","components/PayTxHistory/img/cautiondisabled.svg","components/ValidationInput/img/icons-check.svg","components/ValidationInput/img/icons-error.svg","components/Account/SendAsset/img/check_icon.svg","components/AddressList/AddressItem/img/copy-hover.svg","components/AddressList/AddressItem/img/copy.svg","components/AssetTxHistory/img/cautiondisabled.svg","components/AssetList/img/cautiondisabled.svg","components/AssetList/SendAsset/img/check_icon.svg","components/Footer/img/facebook.svg","components/Footer/img/github.svg","components/Footer/img/gitter.svg","components/Footer/img/medium.svg","components/Footer/img/telegram.svg","components/Footer/img/twitter.svg","components/Header/img/logo.svg","components/Login/img/logo-vertical.svg","components/MintAsset/img/check_icon.svg","components/SelectKeyFile/img/logo-vertical.svg","components/SelectKeyFile/img/plus-hover.svg","components/SelectKeyFile/img/plus-standard.svg","components/SelectKeyFile/img/restore-hover.svg","components/SelectKeyFile/img/restore-standard.svg"],"names":["create","confirm","mnemonic","seed","select","main","mint","restore","send","asset","ccc","welcome","backup","i18next","use","languageDetector","initReactI18next","init","fallbackLng","detection","order","lookupQuerystring","lookupLocalStorage","caches","excludeCacheFor","resources","en","ko","getIndexerHost","networkId","server","indexer","getExplorerHost","getCodeChainHost","chain","cc","tc","sc","wc","getRequest","url","a","axios","get","response","status","data","Error","statusText","body","post","getAggsUTXOList","address","apiHost","aggsUTXOList","Promise","all","map","aggsUTXO","getAssetByAssetType","H160","assetType","assetScheme","value","getPlatformAccount","balance","U64","seq","getUTXOListByAssetType","sendTxToGateway","tx","gatewayURl","postRequest","getPendingTransactions","transactions","transaction","type","transferAsset","outputs","output","getTxsByAddress","page","itemsPerPage","query","getCountOfTxByAddress","localstorageKeyOfPlatform","localstorageKeyOfAsset","networkIdKey","passphraseKey","getStorageKeyOfPlatform","getStorageKeyOfAsset","getPlatformKeys","platformKeysString","localStorage","getItem","JSON","parse","e","console","log","getAssetKeys","assetKeysString","clearWalletKeys","_","each","network","removeItem","clearPassphrase","sessionStorage","savePlatformKeys","platformKeys","setItem","stringify","saveAssetKeys","assetKeys","netowrkId","AddressType","cryptoKey","savePassphrase","passphrase","encryptedKey","CryptoJS","AES","encrypt","toString","isAssetAddress","isPlatformAddress","globalCCKey","dbType","getCCKey","CCKey","clearKeystore","ccKey","clear","createSeed","hdwseed","seedLength","getFirstSeedHash","getSeedHashes","seedHashes","exportMnemonic","seedHash","importMnemonic","isKeystoreExisted","exist","process","CI","platformAddressPath","assetAddressPath","restoringCheckingRange","getPlatformAddressPath","index","getAssetAddressPath","restorePlatformAddresses","currentPath","platformAddresses","getPublicKeyFromSeed","path","platformPubkey","key","blake160","PlatformAddress","fromAccountId","account","eq","lastValidPlatfromPathIndex","push","Platform","pathIndex","retValue","slice","retKeys","createPlatformAddress","savedPlatformKeys","newPathIndex","length","last","createAssetAddress","savedAssetKeys","assetPubKey","AssetTransferAddress","fromTypeAndPayload","Asset","checkPassphrase","restoreAssetAddresses","assetAddresses","lastValidAssetPathIndex","storedPlatformKeys","storedAssetKeys","platformKeyMapping","reduce","memo","storedPlatformKey","assetKeyMapping","storedAssetKey","keyStore","LocalKeyStore","platform","sdk","SDK","core","createMintAssetTransaction","scheme","shardId","metadata","name","description","icon_url","iconURL","supply","recipient","rpc","getSeq","feePayer","newSeq","filter","t","getSignerAddress","signTransaction","fee","signedTransaction","TxUtil","getAggsAsset","mintAsset","inputQuantities","outputQuantities","burnQuantities","filteredInputs","inputs","input","prevOut","owner","filteredBurns","burns","burn","filteredOutputs","results","filteredInput","before","newObject","plus","quantity","filteredBurn","filteredOutput","values","getAggsQuark","txList","pay","receiver","signer","createMintAssetTx","ActionType","assetInitState","UTXOList","availableAssets","getIdForCacheUTXO","cacheAssetScheme","CacheAssetScheme","cacheAggsUTXOList","CacheAggsUTXOList","cacheUTXOList","CacheUTXOList","cacheAvailableAssets","CacheAvailableAssets","setFetchingAssetScheme","SetFetchingAssetScheme","setFetchingAggsUTXOList","SetFetchingAggsUTXOList","setFetchingUTXOList","SetFetchingUTXOList","fetchAggsUTXOListIfNeed","dispatch","getState","cachedAggsUTXOList","assetReducer","isFetching","updatedAt","Date","showLoading","globalReducer","UTXOResponse","u","setTimeout","calculateAvailableAssets","hideLoading","addressUTXOListObj","pendingTxListObj","chainReducer","pendingTxList","txListObject","addressUTXOList","txHashList","hash","validPendingTxList","pendingTx","includes","aggregatedPendingAsset","flatMap","addressConfirmedUTXO","quantities","totalAssetQuantity","lt","minus","availableAssetsValue","fetchAssetSchemeIfNeed","cachedAssetScheme","responseAssetScheme","fetchUTXOListIfNeed","id","cachedUTXOList","UTXOListResponse","fetchAvailableAssets","chainActions","fetchPendingTxListIfNeed","fetchTxListIfNeed","fetchCountOfTxListIfNeed","chainInitState","countOfTxList","bestBlockNumber","undefined","txListById","countOfTxListById","pendingTxListById","getIdByAddressAssetType","checkingIndexingFuncForSendingTx","cacheCountOfTxList","count","CacheCountOfTxList","cacheCountOfTxListById","CacheCountOfTxListById","setFetchingCountOfTxList","SetFetchingCountOfTxList","setFetchingCountOfTxListById","SetFetchingCountOfTxListById","cachePendingTxList","CachePendingTxList","setFetchingPendingTxList","SetFetchingPendingTxList","cachedPendingTxList","assetActions","accountActions","calculateAvailableQuark","params","force","cachedTxList","SetFetchingTxList","CacheTxList","fetchTxListByAssetTypeIfNeed","cachedTxListById","SetFetchingTxListById","CacheTxListById","sendSignedTransaction","observePlatformAddress","resolve","reject","setInterval","find","fetchAvailableQuark","clearInterval","error","sendTransactionByGateway","assetAddress","gatewayURL","unsignedHash","fetchCountOfTxListByAssetTypeIfNeed","cachedCountOfTxListById","txCount","cachedCountOfTxList","setFetchingAccount","SetFetchingAccount","updateAccount","UpdateAccount","fetchAccountIfNeed","cachedAccount","accountReducer","accounts","accountResponse","txListObj","accountObj","aggrPendingQuark","availableQuark","UpdateAvailableQuark","amount","updateWalletPlatformAddresses","UpdateWalletPlatformAddresses","updateWalletAssetAddresses","UpdateWalletAssetAddresses","walletReducer","SetLoadingAssetAddresses","isLoading","SetLoadingPlatformAddresses","toast","position","POSITION","BOTTOM_CENTER","autoClose","closeButton","hideProgressBar","newAddresses","AddressContainer","props","hoverCopyBtn","setState","isCopyHovering","outCopyBtn","handleCopyAddress","info","state","this","backButtonPath","addressIndex","className","Link","to","icon","size","i18nKey","text","onCopy","src","copyBtnHover","copyBtn","alt","onMouseOver","onMouseOut","onBlur","React","Component","withTranslation","PayTxItem","isPending","timestamp","aggrTx","moment","unix","format","target","rel","href","gte","toLocaleString","PayTxHistory","handlePageChange","pageNumber","activePage","fetchAll","Empty","pendingTimestamp","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","itemClass","linkClass","prevPageText","nextPageText","firstPageText","lastPageText","connect","TooltipLabel","uniqueId","closeTooltip","tooltipOpen","toggleTooltip","makeId","possible","i","charAt","Math","floor","random","document","addEventListener","removeEventListener","tooltip","Tooltip","trigger","isOpen","toggle","ValidationInput","isFocus","placeholder","labelText","isValid","reverse","showValidation","disable","decimalScale","Label","for","autoComplete","disabled","thousandSeparator","onFocus","onBlurCapture","onValueChange","v","IconCheck","IconError","CCCReceiverItem","handleBlurAddressInput","onAddressValidationCheck","handleBlurAmountInput","onAmountValidationCheck","handleBlurFeeInput","onFeeValidationCheck","handleMaxValueClick","onAmountChange","remainingAmount","handleChangeAddressInput","event","onAddressChange","handleChangedAmountInput","handleChangeFeeInput","onFeeChange","isAddressValid","isAmountValid","addressError","amountError","isFeeValid","feeError","onClick","MinimumFee","CCCReceiverContainer","calculateRemainingCCCString","totalAmount","remainingCCC","gt","handleAddressValidationCheck","myAddress","fromString","handleAmountValidationCheck","cccString","amountCCC","BigNumber","isNaN","amountFee","handleFeeValidationCheck","feeString","minimum","handleAddressChange","handleAmountChange","handleFeeChange","handleSubmit","preventDefault","onSubmit","isSending","SendCCC","updateWindowDimensions","window","innerWidth","addModalOpenClass","removeModalOpenClass","createPayTransaction","signedTx","isSent","onClose","CheckIcon","color","ownProps","Account","refresher","openSendingCCC","scrollTo","sendingCCC","handleCloseSendingCCC","match","fetchWalletFromStorageIfNeed","aa","walletActions","Identicon","require","sha256","ImageLoader","prop","requestUrl","getDefaultImage","update","identiconData","hex","fallback","isAssetImage","host","style","verticalAlign","width","height","onError","AddressItem","handleClick","walletAddress","history","withRouter","AddressList","createWalletPlatformAddress","createWalletAssetAddress","Container","Row","Col","md","lg","xl","isLoadingAssetAddresses","isLoadingPlatformAddresses","actions","parseMetadata","AssetTxItemEntity","renderQuantity","AssetTxItem","assetHistory","AssetTxHistory","AssetDetail","availableAsset","approver","toFormat","AssetItem","onSelect","handleClickInfo","isSelected","ReceiverItem","handleRemove","onRemove","handleBlurQuantityInput","onQuantityValidationCheck","onQuantityChange","remainingAsset","handleChangeQuantitiesInput","isQuantityValid","quantityError","hideCancel","ReceiverContainer","handleChangeFeePayer","selectFeePayer","handleChangeMemo","checkMemo","isMemoValid","memoError","checkFeeValidation","availableQuarkList","handleChangeFee","handleRemoveReceiver","myIndex","receivers","receiversExceptIndex","clone","pullAt","handleAddReceiver","calculateRemainingAsset","totalQuantity","currentTotal","addressValidations","handleQuantityValidationCheck","quantityString","quantityValidations","lte","newIndex","newReceivers","handleQuantityChange","returnValue","r","payer","nextProps","isSendingTx","defaultValue","pa","SendAsset","selectedAssetType","sumOfSendingAsset","m","inputUTXO","inputUTXOSum","utxo","inputAssets","fromJSON","lockScriptHash","parameters","tracker","transactionTracker","transactionOutputIndex","orderHash","createTransferInput","outputData","refundAmount","o","AssetTransferOutput","transferTx","createTransferAssetTransaction","_A","signTransactionInput","message","Metadata","gateway","isSentTx","AssetList","handleSendAssetClose","handleSelectAsset","PageState","clearData","ClearData","login","Login","logout","Logout","updateNetworkId","WalletActions","ClearWalletAddresses","UpdateNetwork","ConfirmBackupPhrase","indexToString","selectedPhraseIndex","suffledPhrases","toggleSelectPhrase","selectedPhrasesIndex","sp","shuffle","phrases","onConfirm","join","partial","isEqual","InputPassphrase","handleTOCClick","hasAgreeTOC","checked","handlePPClick","hasAgreePP","handleOnFormSubmit","username","checkUsernameValid","checkPassphraseValid","checkPassphraseConfirm","isSubmitted","passphraseError","isPassphraseValid","passphraseConfirm","passphraseConfirmError","isPassphraseConfirmValid","isUsernameValid","usernameError","handlePassphraseInput","handlePassphraseConfirmInput","handleUsernameInput","Form","htmlFor","ShowBackupPhrase","handleCopyPhrase","CreateWallet","handleSubmitPassphraseInput","mnemonicString","split","currentPage","showSecretPhrase","handleSubmitShowPhrase","confirmSecretPhrase","handleConfirmPhrase","inputPassPhrase","range","globalActions","Footer","onLanguageChange","lang","i18n","changeLanguage","facebook","github","gitter","twitter","medium","telegram","language","ExportBackupPopup","handleButtonClick","handlePassphrase","isValidPassphrase","checkPhrase","backupPhraseString","revealBackupPhrase","Modal","centered","ModalHeader","ModalBody","Button","MenuButton","handleSignout","openExportPopup","exportPopupOpen","popoverOpen","toggleExportPopup","Popover","placement","PopoverBody","NetworkButton","chagneNetworkId","currentNetworkId","replace","getNetworkNameById","MainNet","TestNet","WalletSaver","timer","handleClickOutside","resetTimer","handleTouchOutside","handleKeyDown","startTimer","clearTimer","clearTimeout","Header","Logo","LoginForm","onSignIn","handleOnChagne","handleOnChangePassphrase","handleSignIn","redirectToReferrer","savedNetworkId","savedPassphrase","decrypt","enc","Utf8","getPassphrase","from","location","pathname","Redirect","MintAsset","handleChangeSelectAddress","selectedAddress","checkNameValidation","trim","isNameValid","nameError","checkSupplyValidation","isSupplyValid","supplyError","amountSupply","handleNameChange","handleDescriptionChange","handleIconURLChange","handleSupplyChange","backgroundImage","NotFound","PrivateRoute","checkLogin","isKeyExisted","component","rest","Route","render","RestoreWallet","secretPhrase","splitPassphrases","handleChangeSecretPhraseInput","SelectKeyFile","handleImportButtonHover","isImportBtnHover","handleImportButtopOut","handleCreateButtonHover","isCreateBtnHover","handleCreateButtonOut","onClickRestore","onClickCreateWallet","onMouseEnter","onMouseLeave","CreateNewWalletIconHover","CreateNewWalletIcon","ImportKeyIconHover","ImportKeyIcon","library","add","faPlus","faTrashAlt","faFileDownload","faBars","faChevronLeft","faArrowAltCircleDown","faPlusCircle","faTimes","faInfoCircle","faArrowLeft","faCircle","faEllipsisH","faArrowCircleRight","faArrowCircleDown","faExchangeAlt","faCopy","faArrowRight","faRedoAlt","faExclamationCircle","faQuestionCircle","faAngleRight","faAngleDoubleRight","faAngleLeft","faAngleDoubleLeft","faLock","App","appRef","createRef","basename","ref","Switch","exact","accountInitState","globalInitState","walletInitState","appReducer","combineReducers","action","currentAssetScheme","currentAggsUTXOList","currentUTXO","currentPendingTxList","UpdateBestBlockNumber","SetFetchingBestBlockNumber","currentTxList","loadingBar","loadingBarReducer","rootReducer","Boolean","hostname","REACT_APP_BUILD_TARGET","store","Store","portName","middleware","thunk","logger","storeWithMiddleware","applyMiddlewareChrome","ready","then","ReactDOM","getElementById","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a47c19db.chunk.js","sourcesContent":["import asset from \"./asset.json\";\nimport backup from \"./backup.json\";\nimport create_confirm from \"./create/confirm.json\";\nimport create_mnemonic from \"./create/mnemonic.json\";\nimport create_seed from \"./create/seed.json\";\nimport create_select from \"./create/select.json\";\nimport main from \"./main.json\";\nimport mint from \"./mint.json\";\nimport restore from \"./restore.json\";\nimport send_asset from \"./send/asset.json\";\nimport send_ccc from \"./send/ccc.json\";\nimport welcome from \"./welcome.json\";\n\nexport default {\n    create: {\n        confirm: create_confirm,\n        mnemonic: create_mnemonic,\n        seed: create_seed,\n        select: create_select\n    },\n    main,\n    mint,\n    restore,\n    send: {\n        asset: send_asset,\n        ccc: send_ccc\n    },\n    welcome,\n    asset,\n    backup\n};\n","import asset from \"./asset.json\";\nimport backup from \"./backup.json\";\nimport create_confirm from \"./create/confirm.json\";\nimport create_mnemonic from \"./create/mnemonic.json\";\nimport create_seed from \"./create/seed.json\";\nimport create_select from \"./create/select.json\";\nimport main from \"./main.json\";\nimport mint from \"./mint.json\";\nimport restore from \"./restore.json\";\nimport send_asset from \"./send/asset.json\";\nimport send_ccc from \"./send/ccc.json\";\nimport welcome from \"./welcome.json\";\n\nexport default {\n    create: {\n        confirm: create_confirm,\n        mnemonic: create_mnemonic,\n        seed: create_seed,\n        select: create_select\n    },\n    main,\n    mint,\n    restore,\n    send: {\n        asset: send_asset,\n        ccc: send_ccc\n    },\n    welcome,\n    asset,\n    backup\n};\n","import i18next from \"i18next\";\nimport languageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport en from \"./en\";\nimport ko from \"./ko\";\n\ni18next\n    .use(languageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: \"en\",\n        detection: {\n            order: [\"querystring\", \"localStorage\"],\n\n            lookupQuerystring: \"lang\",\n            lookupLocalStorage: \"i18nextLang\",\n\n            caches: [\"localStorage\"],\n            excludeCacheFor: [\"cimode\"]\n        },\n        resources: {\n            en,\n            ko\n        }\n    });\n\nexport default i18next;\n","import { NetworkId } from \"codechain-sdk/lib/core/types\";\n\nexport function getNetworkNameById(networkId: NetworkId) {\n    switch (networkId) {\n        case \"cc\":\n            return \"MAINNET\";\n        case \"tc\":\n            return \"HUSKY\";\n        case \"sc\":\n            return \"SALUKI\";\n        case \"wc\":\n            return \"TESTNET\";\n    }\n    throw new Error(\"Unknown networkId\");\n}\n\nexport function getIndexerHost(networkId: NetworkId) {\n    return server.indexer[networkId];\n}\n\nexport function getExplorerHost(networkId: NetworkId) {\n    return server.indexer[networkId];\n}\n\nexport function getCodeChainHost(networkId: NetworkId) {\n    return server.chain[networkId];\n}\n\nconst server = {\n    indexer: {\n        cc: \"https://explorer.codechain.io\",\n        tc: \"https://husky.codechain.io/explorer\",\n        sc: \"https://saluki.codechain.io/explorer\",\n        wc: \"https://corgi.codechain.io/explorer\"\n    },\n    chain: {\n        cc: \"https://rpc.codechain.io\",\n        tc: \"http://52.79.108.1:8080\",\n        sc: \"http://52.78.210.78:8080\",\n        wc: \"https://corgi-rpc.codechain.io\"\n    }\n};\n","import axios from \"axios\";\nimport {\n    AggsUTXODoc,\n    AssetSchemeDoc,\n    TransactionDoc,\n    UTXODoc\n} from \"codechain-indexer-types\";\nimport { H160, Transaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { NetworkId } from \"codechain-sdk/lib/core/types\";\nimport { PlatformAccount } from \"../model/address\";\nimport { getIndexerHost } from \"../utils/network\";\n\nasync function getRequest<T>(url: string) {\n    const response = await axios.get<T>(url);\n    if (response.status >= 200 && response.status < 300) {\n        return response.data;\n    }\n    throw new Error(response.statusText);\n}\n\nasync function postRequest<T>(url: string, body: any) {\n    const response = await axios.post<T>(url, body);\n    if (response.status >= 200 && response.status < 300) {\n        return response.data;\n    }\n    throw new Error(response.statusText);\n}\n\nexport async function getAggsUTXOList(\n    address: string,\n    networkId: NetworkId\n): Promise<AggsUTXODoc[]> {\n    const apiHost = getIndexerHost(networkId);\n    const aggsUTXOList = await getRequest<AggsUTXODoc[]>(\n        `${apiHost}/api/aggs-utxo?address=${address}`\n    );\n    // FIXME: https://github.com/CodeChain-io/codechain-indexer/issues/59\n    return Promise.all(\n        aggsUTXOList.map(async (aggsUTXO: any) => {\n            const assetScheme = await getAssetByAssetType(\n                new H160(aggsUTXO.assetType),\n                networkId\n            );\n            aggsUTXO.assetScheme = assetScheme;\n            return aggsUTXO;\n        })\n    );\n}\n\nexport async function getAssetByAssetType(\n    assetType: H160,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    return getRequest<AssetSchemeDoc>(\n        `${apiHost}/api/asset-scheme/${assetType.value}`\n    );\n}\n\nexport async function getPlatformAccount(\n    address: string,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    const response = await getRequest<{ balance: string; seq: string }>(\n        `${apiHost}/api/account/${address}`\n    );\n\n    if (response) {\n        return {\n            balance: new U64(response.balance),\n            seq: new U64(response.seq)\n        } as PlatformAccount;\n    } else {\n        return {\n            balance: new U64(0),\n            seq: new U64(0)\n        } as PlatformAccount;\n    }\n}\n\nexport async function getUTXOListByAssetType(\n    address: string,\n    assetType: H160,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    return await getRequest<UTXODoc[]>(\n        `${apiHost}/api/utxo?assetType=${\n            assetType.value\n        }&address=${address}&itemsPerPage=100&page=1`\n    );\n}\n\nexport function sendTxToGateway(tx: Transaction, gatewayURl: string) {\n    return postRequest<void>(`${gatewayURl}`, {\n        tx\n    });\n}\n\nexport async function getPendingTransactions(\n    address: string,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    const transactions = await getRequest<TransactionDoc[]>(\n        `${apiHost}/api/pending-tx?page=1&itemsPerPage=100&address=${address}`\n    );\n\n    // FIXME: This is temporary code. https://github.com/CodeChain-io/codechain-indexer/issues/5\n    await Promise.all(\n        transactions.map(async transaction => {\n            if (transaction.type === \"transferAsset\") {\n                await Promise.all(\n                    transaction.transferAsset.outputs.map(async output => {\n                        const assetScheme: any = await getRequest<\n                            AssetSchemeDoc\n                        >(`${apiHost}/api/asset-scheme/${output.assetType}`);\n                        output.assetScheme = assetScheme;\n                    })\n                );\n            }\n        })\n    );\n    return transactions;\n}\n\nexport async function getTxsByAddress(\n    address: string,\n    page: number,\n    itemsPerPage: number,\n    networkId: NetworkId,\n    assetType?: H160\n) {\n    const apiHost = getIndexerHost(networkId);\n    let query = `${apiHost}/api/tx?address=${address}&page=${page}&itemsPerPage=${itemsPerPage}`;\n    if (assetType) {\n        query += `&assetType=${assetType.value}`;\n    }\n    const transactions = await getRequest<TransactionDoc[]>(query);\n\n    // FIXME: This is temporary code. https://github.com/CodeChain-io/codechain-indexer/issues/5\n    await Promise.all(\n        transactions.map(async transaction => {\n            if (transaction.type === \"transferAsset\") {\n                await Promise.all(\n                    transaction.transferAsset.outputs.map(async output => {\n                        const assetScheme: any = await getRequest<\n                            AssetSchemeDoc\n                        >(`${apiHost}/api/asset-scheme/${output.assetType}`);\n                        output.assetScheme = assetScheme;\n                    })\n                );\n            }\n        })\n    );\n    return transactions;\n}\n\nexport async function getCountOfTxByAddress(data: {\n    address: string;\n    networkId: NetworkId;\n    assetType?: H160;\n}) {\n    const apiHost = getIndexerHost(data.networkId);\n    let query = `${apiHost}/api/tx/count?address=${data.address}`;\n    if (data.assetType) {\n        query += `&assetType=${data.assetType.value}`;\n    }\n    return await getRequest<number>(query);\n}\n","import CryptoJS from \"crypto-js\";\nimport _ from \"lodash\";\nimport { AddressType, NetworkId } from \"../model/address\";\n\nconst localstorageKeyOfPlatform = \"platformKeys\";\nconst localstorageKeyOfAsset = \"assetKeys\";\nconst networkIdKey = \"netowrkId\";\nconst passphraseKey = \"authKey\";\nexport interface StoredKey {\n    pathIndex: number;\n    type: AddressType;\n    key: string;\n}\n\nfunction getStorageKeyOfPlatform(networkId: NetworkId) {\n    return `${localstorageKeyOfPlatform}_${networkId}`;\n}\n\nfunction getStorageKeyOfAsset(networkId: NetworkId) {\n    return `${localstorageKeyOfAsset}_${networkId}`;\n}\n\nexport function getPlatformKeys(networkId: NetworkId): StoredKey[] | null {\n    const platformKeysString = localStorage.getItem(\n        getStorageKeyOfPlatform(networkId)\n    );\n    if (platformKeysString) {\n        try {\n            return JSON.parse(platformKeysString);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return null;\n}\n\nexport function getAssetKeys(networkId: NetworkId): StoredKey[] | null {\n    const assetKeysString = localStorage.getItem(\n        getStorageKeyOfAsset(networkId)\n    );\n    if (assetKeysString) {\n        try {\n            return JSON.parse(assetKeysString);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return null;\n}\n\nexport function clearWalletKeys() {\n    _.each([\"cc\", \"tc\", \"wc\", \"sc\"], network => {\n        localStorage.removeItem(getStorageKeyOfAsset(network as NetworkId));\n        localStorage.removeItem(getStorageKeyOfPlatform(network as NetworkId));\n    });\n}\n\nexport function clearPassphrase() {\n    sessionStorage.removeItem(passphraseKey);\n}\n\nexport function saveNetworkId(netowrkId: NetworkId) {\n    sessionStorage.setItem(networkIdKey, netowrkId);\n}\n\nexport function getNetworkId(): NetworkId {\n    return sessionStorage.getItem(networkIdKey) as NetworkId;\n}\n\nexport function savePlatformKeys(\n    platformKeys: StoredKey[],\n    networkId: NetworkId\n) {\n    localStorage.setItem(\n        getStorageKeyOfPlatform(networkId),\n        JSON.stringify(platformKeys)\n    );\n}\n\nexport function saveAssetKeys(assetKeys: StoredKey[], netowrkId: NetworkId) {\n    localStorage.setItem(\n        getStorageKeyOfAsset(netowrkId),\n        JSON.stringify(assetKeys)\n    );\n}\n\nconst cryptoKey = \"secret key\";\nexport function savePassphrase(passphrase: string) {\n    const encryptedKey = CryptoJS.AES.encrypt(passphrase, cryptoKey).toString();\n    sessionStorage.setItem(passphraseKey, encryptedKey);\n}\n\nexport function getPassphrase() {\n    const encryptedKey = sessionStorage.getItem(passphraseKey);\n    if (encryptedKey) {\n        return CryptoJS.AES.decrypt(encryptedKey, cryptoKey).toString(\n            CryptoJS.enc.Utf8\n        );\n    }\n    return null;\n}\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\n\nexport type NetworkId = \"cc\" | \"tc\" | \"sc\" | \"wc\";\n\nexport interface WalletAddress {\n    index: number;\n    type: AddressType;\n    address: string;\n}\n\nexport enum AddressType {\n    Platform,\n    Asset\n}\n\nexport interface PlatformAccount {\n    balance: U64;\n    seq: U64;\n}\n\nexport function isAssetAddress(address: string) {\n    return address[2] === \"a\";\n}\n\nexport function isPlatformAddress(address: string) {\n    return address[2] === \"c\";\n}\n","import { CCKey } from \"codechain-keystore\";\nimport {\n    AssetTransferAddress,\n    PlatformAddress\n} from \"codechain-sdk/lib/core/classes\";\nimport { blake160 } from \"codechain-sdk/lib/utils\";\nimport _ from \"lodash\";\nimport { getAggsUTXOList, getPlatformAccount } from \"../networks/Api\";\nimport {\n    getAssetKeys,\n    getPlatformKeys,\n    saveAssetKeys,\n    savePlatformKeys,\n    StoredKey\n} from \"../utils/storage\";\nimport { AddressType, NetworkId, WalletAddress } from \"./address\";\n\nlet dbType = \"persistent\";\nif (process.env.CI) {\n    dbType = \"in-memory\";\n}\n\nlet globalCCKey: CCKey;\nexport async function getCCKey() {\n    if (!globalCCKey) {\n        globalCCKey = await CCKey.create({ dbType });\n    }\n    return globalCCKey;\n}\n\nexport async function clearKeystore() {\n    const ccKey = await getCCKey();\n    await ccKey.clear();\n}\n\nexport async function createSeed(passphrase: string) {\n    const ccKey = await getCCKey();\n    return await ccKey.hdwseed.createSeed({ passphrase, seedLength: 128 });\n}\n\nexport async function getFirstSeedHash() {\n    const ccKey = await getCCKey();\n    const seedHashes = await ccKey.hdwseed.getSeedHashes();\n    return seedHashes[0];\n}\n\nexport async function exportMnemonic(passphrase: string) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const mnemonic = await ccKey.hdwseed.exportMnemonic({\n        seedHash,\n        passphrase\n    });\n    return mnemonic;\n}\n\nexport async function importMnemonic(mnemonic: string, passphrase: string) {\n    const ccKey = await getCCKey();\n    await ccKey.hdwseed.importMnemonic({ mnemonic, passphrase });\n}\n\nexport async function isKeystoreExisted() {\n    return CCKey.exist({ dbType });\n}\n\n// m / purpose' / coin_type' / account' / change / address_index\nconst platformAddressPath = \"m/44'/3276/0'/0/\";\nconst assetAddressPath = \"m/44'/3276/1'/0/\";\nconst restoringCheckingRange = 10;\n\nexport function getPlatformAddressPath(index: number) {\n    return platformAddressPath + index;\n}\n\nexport function getAssetAddressPath(index: number) {\n    return assetAddressPath + index;\n}\n\nexport async function restorePlatformAddresses(\n    passphrase: string,\n    networkId: NetworkId\n): Promise<WalletAddress[]> {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    let currentPath = 0;\n    const platformAddresses: WalletAddress[] = [];\n    const platformKeys: StoredKey[] = [];\n    let lastValidPlatfromPathIndex: number | undefined | null;\n    while (currentPath < restoringCheckingRange) {\n        const platformPubkey = await ccKey.hdwseed.getPublicKeyFromSeed({\n            seedHash,\n            path: platformAddressPath + currentPath,\n            passphrase\n        });\n        const key = blake160(platformPubkey);\n        const address = PlatformAddress.fromAccountId(key, {\n            networkId\n        }).value;\n        const account = await getPlatformAccount(address, networkId);\n        if (!account.seq.eq(0) || !account.balance.eq(0)) {\n            lastValidPlatfromPathIndex = currentPath;\n        }\n        platformAddresses.push({\n            index: currentPath,\n            address,\n            type: AddressType.Platform\n        });\n        platformKeys.push({\n            pathIndex: currentPath,\n            type: AddressType.Platform,\n            key\n        });\n        currentPath += 1;\n    }\n    let retValue: WalletAddress[];\n    let retKeys: StoredKey[];\n    if (lastValidPlatfromPathIndex == null) {\n        retValue = platformAddresses.slice(0, 1);\n        retKeys = platformKeys.slice(0, 1);\n    } else {\n        retValue = platformAddresses.slice(0, lastValidPlatfromPathIndex + 1);\n        retKeys = platformKeys.slice(0, lastValidPlatfromPathIndex + 1);\n    }\n    savePlatformKeys(retKeys, networkId);\n    return retValue;\n}\n\nexport async function createPlatformAddress(\n    passphrase: string,\n    networkId: NetworkId\n) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const savedPlatformKeys = getPlatformKeys(networkId);\n    let newPathIndex;\n    if (savedPlatformKeys && savedPlatformKeys.length > 0) {\n        newPathIndex = _.last(savedPlatformKeys)!.pathIndex + 1;\n    } else {\n        newPathIndex = 0;\n    }\n    const platformPubkey = await ccKey.hdwseed.getPublicKeyFromSeed({\n        seedHash,\n        path: platformAddressPath + newPathIndex,\n        passphrase\n    });\n    const key = blake160(platformPubkey);\n    if (savedPlatformKeys && savedPlatformKeys.length > 0) {\n        savePlatformKeys(\n            [\n                ...savedPlatformKeys,\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    } else {\n        savePlatformKeys(\n            [\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    }\n    const address = PlatformAddress.fromAccountId(key, {\n        networkId\n    }).value;\n    return {\n        index: newPathIndex,\n        address,\n        type: AddressType.Platform\n    };\n}\n\nexport async function createAssetAddress(\n    passphrase: string,\n    networkId: NetworkId\n) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const savedAssetKeys = getAssetKeys(networkId);\n    let newPathIndex;\n    if (savedAssetKeys && savedAssetKeys.length > 0) {\n        newPathIndex = _.last(savedAssetKeys)!.pathIndex + 1;\n    } else {\n        newPathIndex = 0;\n    }\n    const assetPubKey = await ccKey.hdwseed.getPublicKeyFromSeed({\n        seedHash,\n        path: assetAddressPath + newPathIndex,\n        passphrase\n    });\n    const key = blake160(assetPubKey);\n    if (savedAssetKeys && savedAssetKeys.length > 0) {\n        saveAssetKeys(\n            [\n                ...savedAssetKeys,\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    } else {\n        saveAssetKeys(\n            [\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    }\n    const address = AssetTransferAddress.fromTypeAndPayload(1, key, {\n        networkId\n    }).value;\n    return {\n        index: newPathIndex,\n        address,\n        type: AddressType.Asset\n    };\n}\n\nexport async function checkPassphrase(passphrase: string) {\n    const ccKey = await getCCKey();\n    const seedHashes = await ccKey.hdwseed.getSeedHashes();\n    const seedHash = seedHashes[0];\n    try {\n        await ccKey.hdwseed.exportMnemonic({ seedHash, passphrase });\n        return true;\n    } catch (e) {\n        console.log(e);\n    }\n    return false;\n}\n\nexport async function restoreAssetAddresses(\n    passphrase: string,\n    networkId: NetworkId\n): Promise<WalletAddress[]> {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    let currentPath = 0;\n    const assetAddresses: WalletAddress[] = [];\n    const assetKeys: StoredKey[] = [];\n    let lastValidAssetPathIndex: number | undefined | null;\n    while (currentPath < restoringCheckingRange) {\n        const assetPubKey = await ccKey.hdwseed.getPublicKeyFromSeed({\n            seedHash,\n            path: assetAddressPath + currentPath,\n            passphrase\n        });\n        const key = blake160(assetPubKey);\n        const address = AssetTransferAddress.fromTypeAndPayload(1, key, {\n            networkId\n        }).value;\n        const aggsUTXO = await getAggsUTXOList(address, networkId);\n        if (aggsUTXO.length !== 0) {\n            lastValidAssetPathIndex = currentPath;\n        }\n        assetAddresses.push({\n            index: currentPath,\n            address,\n            type: AddressType.Asset\n        });\n        assetKeys.push({\n            type: AddressType.Asset,\n            pathIndex: currentPath,\n            key\n        });\n        currentPath += 1;\n    }\n\n    let retValue: WalletAddress[];\n    let retKeys: StoredKey[];\n    if (lastValidAssetPathIndex == null) {\n        retValue = assetAddresses.slice(0, 1);\n        retKeys = assetKeys.slice(0, 1);\n    } else {\n        retValue = assetAddresses.slice(0, lastValidAssetPathIndex + 1);\n        retKeys = assetKeys.slice(0, lastValidAssetPathIndex + 1);\n    }\n    saveAssetKeys(retKeys, networkId);\n    return retValue;\n}\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { NetworkId } from \"../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../model/keystore\";\nimport { getCodeChainHost } from \"./network\";\nimport { getAssetKeys, getPlatformKeys } from \"./storage\";\n\nfunction getAggsQuark(address: string, txList: TransactionDoc[]) {\n    return _.reduce(\n        txList,\n        (memo, tx: TransactionDoc) => {\n            let output = new U64(0);\n            let input = new U64(0);\n            if (tx.type === \"pay\") {\n                const quantity = tx.pay.quantity;\n                if (tx.pay.receiver === address) {\n                    output = U64.plus(output, quantity);\n                }\n                if (tx.signer === address) {\n                    input = U64.plus(input, quantity);\n                }\n            }\n            if (tx.signer === address) {\n                const fee = tx.fee;\n                input = U64.plus(input, fee);\n            }\n            return {\n                input: U64.plus(memo.input, input),\n                output: U64.plus(memo.output, output)\n            };\n        },\n        {\n            input: new U64(0),\n            output: new U64(0)\n        }\n    );\n}\n\nfunction getAggsAsset(\n    address: string,\n    transaction: TransactionDoc\n): {\n    assetType: string;\n    inputQuantities: U64;\n    outputQuantities: U64;\n    burnQuantities: U64;\n}[] {\n    if (transaction.type === \"mintAsset\") {\n        if (transaction.mintAsset.recipient === address) {\n            return [\n                {\n                    assetType: transaction.mintAsset.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(transaction.mintAsset.supply),\n                    burnQuantities: new U64(0)\n                }\n            ];\n        } else {\n            return [];\n        }\n    } else if (transaction.type === \"transferAsset\") {\n        const filteredInputs = _.filter(\n            transaction.transferAsset.inputs,\n            input => input.prevOut.owner === address\n        );\n\n        const filteredBurns = _.filter(\n            transaction.transferAsset.burns,\n            burn => burn.prevOut.owner === address\n        );\n\n        const filteredOutputs = _.filter(\n            transaction.transferAsset.outputs,\n            output => output.owner === address\n        );\n        const results: {\n            [assetType: string]: {\n                assetType: string;\n                inputQuantities: U64;\n                outputQuantities: U64;\n                burnQuantities: U64;\n            };\n        } = {};\n        _.each(filteredInputs, filteredInput => {\n            if (results[filteredInput.prevOut.assetType]) {\n                const before = results[filteredInput.prevOut.assetType];\n                const newObject = {\n                    ...before,\n                    inputQuantities: U64.plus(\n                        before.inputQuantities,\n                        filteredInput.prevOut.quantity\n                    )\n                };\n                results[filteredInput.prevOut.assetType] = newObject;\n            } else {\n                results[filteredInput.prevOut.assetType] = {\n                    assetType: filteredInput.prevOut.assetType,\n                    inputQuantities: new U64(filteredInput.prevOut.quantity),\n                    outputQuantities: new U64(0),\n                    burnQuantities: new U64(0)\n                };\n            }\n        });\n        _.each(filteredBurns, filteredBurn => {\n            if (results[filteredBurn.prevOut.assetType]) {\n                const before = results[filteredBurn.prevOut.assetType];\n                const newObject = {\n                    ...before,\n                    burnQuantities: U64.plus(\n                        before.burnQuantities,\n                        filteredBurn.prevOut.quantity\n                    )\n                };\n                results[filteredBurn.prevOut.assetType] = newObject;\n            } else {\n                results[filteredBurn.prevOut.assetType] = {\n                    assetType: filteredBurn.prevOut.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(0),\n                    burnQuantities: new U64(filteredBurn.prevOut.quantity)\n                };\n            }\n        });\n        _.each(filteredOutputs, filteredOutput => {\n            if (results[filteredOutput.assetType]) {\n                const before = results[filteredOutput.assetType];\n                const newObject = {\n                    ...before,\n                    outputQuantities: U64.plus(\n                        before.outputQuantities,\n                        filteredOutput.quantity\n                    )\n                };\n                results[filteredOutput.assetType] = newObject;\n            } else {\n                results[filteredOutput.assetType] = {\n                    assetType: filteredOutput.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(filteredOutput.quantity),\n                    burnQuantities: new U64(0)\n                };\n            }\n        });\n        return _.values(results);\n    }\n    return [];\n}\n\nasync function createMintAssetTx(data: {\n    name: string;\n    supply: U64;\n    iconURL?: string;\n    description?: string;\n    recipient: string;\n    networkId: NetworkId;\n    feePayer: string;\n    fee: U64;\n    passphrase: string;\n}) {\n    const ccKey = await getCCKey();\n    const storedPlatformKeys = getPlatformKeys(data.networkId);\n    const storedAssetKeys = getAssetKeys(data.networkId);\n    const seedHash = await getFirstSeedHash();\n    const platformKeyMapping = _.reduce(\n        storedPlatformKeys,\n        (memo, storedPlatformKey) => {\n            return {\n                ...memo,\n                [storedPlatformKey.key]: {\n                    seedHash,\n                    path: getPlatformAddressPath(storedPlatformKey.pathIndex)\n                }\n            };\n        },\n        {}\n    );\n    const assetKeyMapping = _.reduce(\n        storedAssetKeys,\n        (memo, storedAssetKey) => {\n            return {\n                ...memo,\n                [storedAssetKey.key]: {\n                    seedHash,\n                    path: getAssetAddressPath(storedAssetKey.pathIndex)\n                }\n            };\n        },\n        {}\n    );\n    const keyStore = new LocalKeyStore(ccKey, {\n        platform: platformKeyMapping,\n        asset: assetKeyMapping\n    });\n\n    const sdk = new SDK({\n        server: getCodeChainHost(data.networkId),\n        networkId: data.networkId\n    });\n    const tx = sdk.core.createMintAssetTransaction({\n        scheme: {\n            shardId: 0,\n            metadata: JSON.stringify({\n                name: data.name,\n                description: data.description,\n                icon_url: data.iconURL\n            }),\n            supply: data.supply\n        },\n        recipient: data.recipient\n    });\n\n    const seq = await sdk.rpc.chain.getSeq(data.feePayer);\n\n    const { transactions } = await sdk.rpc.chain.getPendingTransactions();\n    const newSeq =\n        seq +\n        transactions.filter(\n            t =>\n                t.getSignerAddress({ networkId: data.networkId }).toString() ===\n                data.feePayer\n        ).length;\n\n    const signedTransaction = await sdk.key.signTransaction(tx, {\n        account: data.feePayer,\n        keyStore,\n        fee: data.fee,\n        seq: newSeq,\n        passphrase: data.passphrase\n    });\n    return signedTransaction;\n}\n\nexport const TxUtil = { getAggsAsset, getAggsQuark, createMintAssetTx };\n","import { AggsUTXODoc, AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { Action, ActionType } from \"./assetActions\";\n\nexport interface AssetState {\n    assetScheme: {\n        [assetType: string]: {\n            data?: AssetSchemeDoc;\n            isFetching: boolean;\n        } | null;\n    };\n    aggsUTXOList: {\n        [address: string]: {\n            data?: AggsUTXODoc[] | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n    UTXOList: {\n        [id: string]: {\n            data?: UTXODoc[] | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n    availableAssets: {\n        [address: string]:\n            | {\n                  assetType: string;\n                  quantities: U64;\n              }[]\n            | null;\n    };\n}\n\nexport const assetInitState: AssetState = {\n    assetScheme: {},\n    aggsUTXOList: {},\n    UTXOList: {},\n    availableAssets: {}\n};\n\nexport const getIdForCacheUTXO = (address: string, assetType: H160) => {\n    return `${address}-${assetType.value}`;\n};\n\nexport const assetReducer = (state = assetInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.CacheAssetScheme: {\n            const assetType = action.data.assetType;\n            const currentAssetScheme = {\n                data: action.data.assetScheme,\n                isFetching: false\n            };\n            const assetScheme = {\n                ...state.assetScheme,\n                [assetType]: currentAssetScheme\n            };\n            return {\n                ...state,\n                assetScheme\n            };\n        }\n        case ActionType.SetFetchingAssetScheme: {\n            const assetType = action.data.assetType;\n            const currentAssetScheme = {\n                ...state.assetScheme[assetType],\n                isFetching: true\n            };\n            const assetScheme = {\n                ...state.assetScheme,\n                [assetType]: currentAssetScheme\n            };\n            return {\n                ...state,\n                assetScheme\n            };\n        }\n        case ActionType.SetFetchingAggsUTXOList: {\n            const address = action.data.address;\n            const currentAggsUTXOList = {\n                ...state.aggsUTXOList[address],\n                isFetching: true\n            };\n            const aggsUTXOList = {\n                ...state.aggsUTXOList,\n                [address]: currentAggsUTXOList\n            };\n            return {\n                ...state,\n                aggsUTXOList\n            };\n        }\n        case ActionType.CacheAggsUTXOList: {\n            const address = action.data.address;\n            const currentAggsUTXOList = {\n                data: action.data.aggsUTXOList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const aggsUTXOList = {\n                ...state.aggsUTXOList,\n                [address]: currentAggsUTXOList\n            };\n            return {\n                ...state,\n                aggsUTXOList\n            };\n        }\n        case ActionType.CacheUTXOList: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdForCacheUTXO(address, assetType);\n            const currentUTXO = {\n                data: action.data.UTXOList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const UTXOList = {\n                ...state.UTXOList,\n                [id]: currentUTXO\n            };\n            return {\n                ...state,\n                UTXOList\n            };\n        }\n        case ActionType.SetFetchingUTXOList: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdForCacheUTXO(address, assetType);\n            const currentUTXO = {\n                ...state.UTXOList[id],\n                isFetching: true\n            };\n            const UTXOList = {\n                ...state.UTXOList,\n                [id]: currentUTXO\n            };\n            return {\n                ...state,\n                UTXOList\n            };\n        }\n        case ActionType.CacheAvailableAssets: {\n            const address = action.data.address;\n            const availableAssets = {\n                ...state.availableAssets,\n                [address]: action.data.availableAssets\n            };\n            return {\n                ...state,\n                availableAssets\n            };\n        }\n    }\n    return state;\n};\n","import { AggsUTXODoc, AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport {\n    getAggsUTXOList,\n    getAssetByAssetType,\n    getUTXOListByAssetType\n} from \"../../networks/Api\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport chainActions from \"../chain/chainActions\";\nimport { getIdForCacheUTXO } from \"./assetReducer\";\n\nexport type Action =\n    | CacheAssetScheme\n    | CacheAggsUTXOList\n    | SetFetchingAggsUTXOList\n    | SetFetchingAssetScheme\n    | CacheUTXOList\n    | SetFetchingUTXOList\n    | CacheAvailableAssets;\n\nexport enum ActionType {\n    CacheAssetScheme = \"CacheAssetScheme\",\n    CacheAggsUTXOList = \"CacheAggsUTXOList\",\n    SetFetchingAggsUTXOList = \"SetFetchingAggsUTXOList\",\n    SetFetchingAssetScheme = \"SetFetchingAssetScheme\",\n    SetFetchingUTXOList = \"SetFetchingUTXOList\",\n    CacheUTXOList = \"CacheUTXOList\",\n    CacheAvailableAssets = \"CacheAvailableAssets\"\n}\n\nexport interface CacheAssetScheme {\n    type: ActionType.CacheAssetScheme;\n    data: {\n        assetType: string;\n        assetScheme: AssetSchemeDoc;\n    };\n}\n\nexport interface CacheAggsUTXOList {\n    type: ActionType.CacheAggsUTXOList;\n    data: {\n        address: string;\n        aggsUTXOList: AggsUTXODoc[];\n    };\n}\n\nexport interface SetFetchingAggsUTXOList {\n    type: ActionType.SetFetchingAggsUTXOList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingAssetScheme {\n    type: ActionType.SetFetchingAssetScheme;\n    data: {\n        assetType: string;\n    };\n}\n\nexport interface SetFetchingUTXOList {\n    type: ActionType.SetFetchingUTXOList;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheUTXOList {\n    type: ActionType.CacheUTXOList;\n    data: {\n        address: string;\n        assetType: H160;\n        UTXOList: UTXODoc[];\n    };\n}\n\nexport interface CacheAvailableAssets {\n    type: ActionType.CacheAvailableAssets;\n    data: {\n        address: string;\n        availableAssets: {\n            assetType: string;\n            quantities: U64;\n        }[];\n    };\n}\n\nconst cacheAssetScheme = (\n    assetType: H160,\n    assetScheme: AssetSchemeDoc\n): CacheAssetScheme => ({\n    type: ActionType.CacheAssetScheme,\n    data: {\n        assetType: assetType.value,\n        assetScheme\n    }\n});\n\nconst cacheAggsUTXOList = (\n    address: string,\n    aggsUTXOList: AggsUTXODoc[]\n): CacheAggsUTXOList => ({\n    type: ActionType.CacheAggsUTXOList,\n    data: {\n        address,\n        aggsUTXOList\n    }\n});\n\nconst cacheUTXOList = (\n    address: string,\n    assetType: H160,\n    UTXOList: UTXODoc[]\n): CacheUTXOList => ({\n    type: ActionType.CacheUTXOList,\n    data: {\n        address,\n        assetType,\n        UTXOList\n    }\n});\n\nconst cacheAvailableAssets = (\n    address: string,\n    availableAssets: {\n        assetType: string;\n        quantities: U64;\n    }[]\n): CacheAvailableAssets => ({\n    type: ActionType.CacheAvailableAssets,\n    data: {\n        address,\n        availableAssets\n    }\n});\n\nconst setFetchingAssetScheme = (assetType: H160): SetFetchingAssetScheme => ({\n    type: ActionType.SetFetchingAssetScheme,\n    data: {\n        assetType: assetType.value\n    }\n});\n\nconst setFetchingAggsUTXOList = (address: string): SetFetchingAggsUTXOList => ({\n    type: ActionType.SetFetchingAggsUTXOList,\n    data: {\n        address\n    }\n});\n\nconst setFetchingUTXOList = (\n    address: string,\n    assetType: H160\n): SetFetchingUTXOList => ({\n    type: ActionType.SetFetchingUTXOList,\n    data: {\n        address,\n        assetType\n    }\n});\n\nconst fetchAssetSchemeIfNeed = (assetType: H160) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAssetScheme = getState().assetReducer.assetScheme[\n            assetType.value\n        ];\n        if (cachedAssetScheme && cachedAssetScheme.isFetching) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAssetScheme(assetType));\n            const networkId = getState().globalReducer.networkId;\n            const responseAssetScheme = await getAssetByAssetType(\n                assetType,\n                networkId\n            );\n            dispatch(cacheAssetScheme(assetType, responseAssetScheme));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAggsUTXOListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAggsUTXOList = getState().assetReducer.aggsUTXOList[\n            address\n        ];\n        if (cachedAggsUTXOList && cachedAggsUTXOList.isFetching) {\n            return;\n        }\n        if (\n            cachedAggsUTXOList &&\n            cachedAggsUTXOList.updatedAt &&\n            +new Date() - cachedAggsUTXOList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAggsUTXOList(address));\n            const networkId = getState().globalReducer.networkId;\n            const UTXOResponse = await getAggsUTXOList(address, networkId);\n            dispatch(cacheAggsUTXOList(address, UTXOResponse));\n\n            _.each(UTXOResponse, (u: any) => {\n                dispatch(\n                    cacheAssetScheme(new H160(u.assetType), u.assetScheme)\n                );\n            });\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                dispatch(calculateAvailableAssets(address));\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchUTXOListIfNeed = (address: string, assetType: H160) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const id = getIdForCacheUTXO(address, assetType);\n        const UTXOList = getState().assetReducer.UTXOList[id];\n        const cachedUTXOList = UTXOList && UTXOList[assetType.value];\n        if (cachedUTXOList && cachedUTXOList.isFetching) {\n            return;\n        }\n        if (\n            cachedUTXOList &&\n            cachedUTXOList.updatedAt &&\n            +new Date() - cachedUTXOList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingUTXOList(address, assetType));\n            const networkId = getState().globalReducer.networkId;\n            const UTXOListResponse = await getUTXOListByAssetType(\n                address,\n                assetType,\n                networkId\n            );\n            dispatch(cacheUTXOList(address, assetType, UTXOListResponse));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAvailableAssets = (address: string) => {\n    return async (dispatch: ThunkDispatch<ReducerConfigure, void, Action>) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n        dispatch(chainActions.fetchTxListIfNeed(address));\n        dispatch(chainActions.fetchCountOfTxListIfNeed(address));\n        dispatch(fetchAggsUTXOListIfNeed(address));\n    };\n};\n\nconst calculateAvailableAssets = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const addressUTXOListObj = getState().assetReducer.aggsUTXOList[\n            address\n        ];\n        const pendingTxListObj = getState().chainReducer.pendingTxList[address];\n        const txListObject = getState().chainReducer.txList[address];\n\n        const addressUTXOList = addressUTXOListObj && addressUTXOListObj.data;\n        const pendingTxList = pendingTxListObj && pendingTxListObj.data;\n        const txList = txListObject && txListObject.data;\n\n        if (!addressUTXOList || !pendingTxList || !txList) {\n            return;\n        }\n\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        const aggregatedPendingAsset = _.flatMap(\n            validPendingTxList,\n            pendingTx => {\n                return TxUtil.getAggsAsset(address, pendingTx);\n            }\n        );\n\n        const availableAssets: {\n            [assetType: string]: {\n                assetType: string;\n                quantities: U64;\n            };\n        } = {};\n\n        _.each(addressUTXOList, addressConfirmedUTXO => {\n            availableAssets[addressConfirmedUTXO.assetType] = {\n                assetType: addressConfirmedUTXO.assetType,\n                quantities: new U64(addressConfirmedUTXO.totalAssetQuantity)\n            };\n        });\n        _.each(aggregatedPendingAsset, asset => {\n            if (\n                asset.outputQuantities.lt(\n                    U64.plus(asset.inputQuantities, asset.burnQuantities)\n                )\n            ) {\n                const quantity = U64.minus(\n                    U64.plus(asset.inputQuantities, asset.burnQuantities),\n                    asset.outputQuantities\n                );\n                if (!availableAssets[asset.assetType]) {\n                    availableAssets[asset.assetType] = {\n                        assetType: asset.assetType,\n                        quantities: new U64(0)\n                    };\n                }\n                availableAssets[asset.assetType] = {\n                    ...availableAssets[asset.assetType],\n                    quantities: U64.minus(\n                        availableAssets[asset.assetType].quantities,\n                        quantity\n                    )\n                };\n            }\n        });\n        const availableAssetsValue = _.filter(\n            _.values(availableAssets),\n            asset => !asset.quantities.eq(0)\n        );\n        dispatch(cacheAvailableAssets(address, availableAssetsValue));\n    };\n};\n\nexport default {\n    cacheAssetScheme,\n    fetchAggsUTXOListIfNeed,\n    fetchAssetSchemeIfNeed,\n    fetchUTXOListIfNeed,\n    calculateAvailableAssets,\n    fetchAvailableAssets\n};\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { H160 } from \"codechain-sdk/lib/core/classes\";\nimport { Action, ActionType } from \"./chainActions\";\n\nexport interface ChainState {\n    pendingTxList: {\n        [address: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    txList: {\n        [address: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    countOfTxList: {\n        [address: string]: {\n            data?: number | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    pendingTxListById: {\n        [id: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    txListById: {\n        [id: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    countOfTxListById: {\n        [id: string]: {\n            data?: number | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    bestBlockNumber?: {\n        data?: number | null;\n        isFetching: boolean;\n        updatedAt?: number | null;\n    } | null;\n}\n\nexport const chainInitState: ChainState = {\n    pendingTxList: {},\n    txList: {},\n    countOfTxList: {},\n    bestBlockNumber: undefined,\n    txListById: {},\n    countOfTxListById: {},\n    pendingTxListById: {}\n};\n\nexport const getIdByAddressAssetType = (address: string, assetType: H160) => {\n    return `${address}-${assetType.value}`;\n};\n\nexport const chainReducer = (\n    state = chainInitState,\n    action: Action\n): ChainState => {\n    switch (action.type) {\n        case ActionType.CachePendingTxList: {\n            const address = action.data.address;\n            const currentPendingTxList = {\n                data: action.data.pendingTxList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const pendingTxList = {\n                ...state.pendingTxList,\n                [address]: currentPendingTxList\n            };\n            return {\n                ...state,\n                pendingTxList\n            };\n        }\n        case ActionType.SetFetchingPendingTxList: {\n            const address = action.data.address;\n            const currentPendingTxList = {\n                ...state.pendingTxList[address],\n                isFetching: true\n            };\n            const pendingTxList = {\n                ...state.pendingTxList,\n                [address]: currentPendingTxList\n            };\n            return {\n                ...state,\n                pendingTxList\n            };\n        }\n        case ActionType.UpdateBestBlockNumber: {\n            return {\n                ...state,\n                bestBlockNumber: {\n                    data: action.data.bestBlockNumber,\n                    updatedAt: +new Date(),\n                    isFetching: false\n                }\n            };\n        }\n        case ActionType.SetFetchingBestBlockNumber: {\n            return {\n                ...state,\n                bestBlockNumber: {\n                    ...state.bestBlockNumber,\n                    isFetching: true\n                }\n            };\n        }\n        case ActionType.CacheTxList: {\n            const address = action.data.address;\n            const currentTxList = {\n                data: action.data.txList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const txList = {\n                ...state.txList,\n                [address]: currentTxList\n            };\n            return {\n                ...state,\n                txList\n            };\n        }\n        case ActionType.SetFetchingTxList: {\n            const address = action.data.address;\n            const currentTxList = {\n                ...state.txList[address],\n                isFetching: true\n            };\n            const txList = {\n                ...state.txList,\n                [address]: currentTxList\n            };\n            return {\n                ...state,\n                txList\n            };\n        }\n        case ActionType.SetFetchingCountOfTxList: {\n            return {\n                ...state,\n                countOfTxList: {\n                    ...state.countOfTxList,\n                    [action.data.address]: {\n                        ...state.countOfTxList[action.data.address],\n                        isFetching: true\n                    }\n                }\n            };\n        }\n        case ActionType.SetFetchingCountOfTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            return {\n                ...state,\n                countOfTxListById: {\n                    ...state.countOfTxListById,\n                    [id]: {\n                        ...state.countOfTxListById[id],\n                        isFetching: true\n                    }\n                }\n            };\n        }\n        case ActionType.CacheCountOfTxList: {\n            return {\n                ...state,\n                countOfTxList: {\n                    ...state.countOfTxList,\n                    [action.data.address]: {\n                        data: action.data.count,\n                        isFetching: false,\n                        updatedAt: +new Date()\n                    }\n                }\n            };\n        }\n        case ActionType.CacheCountOfTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            return {\n                ...state,\n                countOfTxListById: {\n                    ...state.countOfTxListById,\n                    [id]: {\n                        data: action.data.count,\n                        isFetching: false,\n                        updatedAt: +new Date()\n                    }\n                }\n            };\n        }\n        case ActionType.SetFetchingTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            const currentTxList = {\n                ...state.txListById[id],\n                isFetching: true\n            };\n            const txListById = {\n                ...state.txListById,\n                [id]: currentTxList\n            };\n            return {\n                ...state,\n                txListById\n            };\n        }\n        case ActionType.CacheTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            const currentTxList = {\n                data: action.data.txList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const txListById = {\n                ...state.txListById,\n                [id]: currentTxList\n            };\n            return {\n                ...state,\n                txListById\n            };\n        }\n    }\n    return state;\n};\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport {\n    H160,\n    SignedTransaction,\n    Transaction\n} from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { isAssetAddress, isPlatformAddress } from \"../../model/address\";\nimport {\n    getCountOfTxByAddress,\n    getPendingTransactions,\n    getTxsByAddress,\n    sendTxToGateway\n} from \"../../networks/Api\";\nimport { getCodeChainHost } from \"../../utils/network\";\nimport accountActions from \"../account/accountActions\";\nimport assetActions from \"../asset/assetActions\";\nimport { getIdByAddressAssetType } from \"./chainReducer\";\n\nexport type Action =\n    | CachePendingTxList\n    | CacheTxList\n    | SetFetchingPendingTxList\n    | SetFetchingTxList\n    | UpdateBestBlockNumber\n    | SetFetchingBestBlockNumber\n    | SetFetchingTxListById\n    | CacheTxListById\n    | SetFetchingCountOfTxList\n    | SetFetchingCountOfTxListById\n    | CacheCountOfTxList\n    | CacheCountOfTxListById;\n\nexport enum ActionType {\n    CachePendingTxList = \"CachePendingTxList\",\n    CacheTxList = \"CacheTxList\",\n    SetFetchingPendingTxList = \"SetFetchingPendingTxList\",\n    UpdateBestBlockNumber = \"UpdateBestBlockNumber\",\n    SetFetchingBestBlockNumber = \"SetFetchingBestBlockNumber\",\n    SetFetchingTxList = \"SetFetchingTxList\",\n    SetFetchingTxListById = \"SetFetchingTxListById\",\n    CacheTxListById = \"CacheTxListById\",\n    SetFetchingCountOfTxList = \"SetFetchingCountOfTxList\",\n    SetFetchingCountOfTxListById = \"SetFetchingCountOfTxListById\",\n    CacheCountOfTxList = \"CacheCountOfTxList\",\n    CacheCountOfTxListById = \"CacheCountOfTxListById\"\n}\n\nexport interface SetFetchingTxListById {\n    type: ActionType.SetFetchingTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheTxListById {\n    type: ActionType.CacheTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n        txList: TransactionDoc[];\n    };\n}\n\nexport interface CachePendingTxList {\n    type: ActionType.CachePendingTxList;\n    data: {\n        address: string;\n        pendingTxList: TransactionDoc[];\n    };\n}\n\nexport interface CacheTxList {\n    type: ActionType.CacheTxList;\n    data: {\n        address: string;\n        txList: TransactionDoc[];\n    };\n}\n\nexport interface SetFetchingPendingTxList {\n    type: ActionType.SetFetchingPendingTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingTxList {\n    type: ActionType.SetFetchingTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface UpdateBestBlockNumber {\n    type: ActionType.UpdateBestBlockNumber;\n    data: {\n        bestBlockNumber: number;\n    };\n}\n\nexport interface SetFetchingBestBlockNumber {\n    type: ActionType.SetFetchingBestBlockNumber;\n}\n\nexport interface SetFetchingCountOfTxList {\n    type: ActionType.SetFetchingCountOfTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingCountOfTxListById {\n    type: ActionType.SetFetchingCountOfTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheCountOfTxList {\n    type: ActionType.CacheCountOfTxList;\n    data: {\n        address: string;\n        count: number;\n    };\n}\n\nexport interface CacheCountOfTxListById {\n    type: ActionType.CacheCountOfTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n        count: number;\n    };\n}\n\nconst cacheCountOfTxList = (\n    address: string,\n    count: number\n): CacheCountOfTxList => ({\n    type: ActionType.CacheCountOfTxList,\n    data: {\n        address,\n        count\n    }\n});\n\nconst cacheCountOfTxListById = (\n    address: string,\n    assetType: H160,\n    count: number\n): CacheCountOfTxListById => ({\n    type: ActionType.CacheCountOfTxListById,\n    data: {\n        address,\n        assetType,\n        count\n    }\n});\n\nconst setFetchingCountOfTxList = (\n    address: string\n): SetFetchingCountOfTxList => ({\n    type: ActionType.SetFetchingCountOfTxList,\n    data: {\n        address\n    }\n});\n\nconst setFetchingCountOfTxListById = (\n    address: string,\n    assetType: H160\n): SetFetchingCountOfTxListById => ({\n    type: ActionType.SetFetchingCountOfTxListById,\n    data: {\n        address,\n        assetType\n    }\n});\n\nconst cachePendingTxList = (\n    address: string,\n    pendingTxList: TransactionDoc[]\n): CachePendingTxList => ({\n    type: ActionType.CachePendingTxList,\n    data: {\n        address,\n        pendingTxList\n    }\n});\n\nconst setFetchingPendingTxList = (\n    address: string\n): SetFetchingPendingTxList => ({\n    type: ActionType.SetFetchingPendingTxList,\n    data: {\n        address\n    }\n});\n\nconst fetchPendingTxListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedPendingTxList = getState().chainReducer.pendingTxList[\n            address\n        ];\n        if (cachedPendingTxList && cachedPendingTxList.isFetching) {\n            return;\n        }\n        if (\n            cachedPendingTxList &&\n            cachedPendingTxList.updatedAt &&\n            +new Date() - cachedPendingTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingPendingTxList(address));\n            const networkId = getState().globalReducer.networkId;\n            const pendingTxList = await getPendingTransactions(\n                address,\n                networkId\n            );\n            dispatch(cachePendingTxList(address, pendingTxList));\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                if (isAssetAddress(address)) {\n                    dispatch(assetActions.calculateAvailableAssets(address));\n                } else if (isPlatformAddress(address)) {\n                    dispatch(accountActions.calculateAvailableQuark(address));\n                }\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchTxListIfNeed = (\n    address: string,\n    params?: { page?: number; itemsPerPage?: number; force: boolean }\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const { page = 1, itemsPerPage = 10, force = false } = params || {};\n        const cachedTxList = getState().chainReducer.txList[address];\n        if (!force && cachedTxList && cachedTxList.isFetching) {\n            return;\n        }\n        if (\n            !force &&\n            cachedTxList &&\n            cachedTxList.updatedAt &&\n            +new Date() - cachedTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch({\n                type: ActionType.SetFetchingTxList,\n                data: {\n                    address\n                }\n            });\n            const networkId = getState().globalReducer.networkId;\n            const txList = await getTxsByAddress(\n                address,\n                page,\n                itemsPerPage,\n                networkId\n            );\n            dispatch({\n                type: ActionType.CacheTxList,\n                data: {\n                    address,\n                    txList\n                }\n            });\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                if (isAssetAddress(address)) {\n                    dispatch(assetActions.calculateAvailableAssets(address));\n                } else if (isPlatformAddress(address)) {\n                    dispatch(accountActions.calculateAvailableQuark(address));\n                }\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchCountOfTxListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedCountOfTxList = getState().chainReducer.countOfTxList[\n            address\n        ];\n        if (cachedCountOfTxList && cachedCountOfTxList.isFetching) {\n            return;\n        }\n        if (\n            cachedCountOfTxList &&\n            cachedCountOfTxList.updatedAt &&\n            +new Date() - cachedCountOfTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingCountOfTxList(address));\n            const networkId = getState().globalReducer.networkId;\n            const txCount = await getCountOfTxByAddress({ address, networkId });\n            dispatch(cacheCountOfTxList(address, txCount));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchCountOfTxListByAssetTypeIfNeed = (\n    address: string,\n    assetType: H160\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const id = getIdByAddressAssetType(address, assetType);\n        const cachedCountOfTxListById = getState().chainReducer\n            .countOfTxListById[id];\n        if (cachedCountOfTxListById && cachedCountOfTxListById.isFetching) {\n            return;\n        }\n        if (\n            cachedCountOfTxListById &&\n            cachedCountOfTxListById.updatedAt &&\n            +new Date() - cachedCountOfTxListById.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingCountOfTxListById(address, assetType));\n            const networkId = getState().globalReducer.networkId;\n            const txCount = await getCountOfTxByAddress({\n                address,\n                networkId,\n                assetType\n            });\n            dispatch(cacheCountOfTxListById(address, assetType, txCount));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst sendSignedTransaction = (\n    address: string,\n    signedTransaction: SignedTransaction,\n    observePlatformAddress?: string | null\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const networkId = getState().globalReducer.networkId;\n                const sdk = new SDK({\n                    server: getCodeChainHost(networkId),\n                    networkId\n                });\n                await sdk.rpc.chain.sendSignedTransaction(signedTransaction);\n                checkingIndexingFuncForSendingTx = setInterval(() => {\n                    dispatch(fetchPendingTxListIfNeed(address));\n                    dispatch(fetchTxListIfNeed(address));\n                    const pendingTxList = getState().chainReducer.pendingTxList[\n                        address\n                    ];\n                    const txList = getState().chainReducer.txList[address];\n                    if (\n                        (pendingTxList &&\n                            pendingTxList.data &&\n                            _.find(\n                                pendingTxList.data,\n                                tx => tx.hash === signedTransaction.hash().value\n                            )) ||\n                        (txList &&\n                            txList.data &&\n                            _.find(\n                                txList.data,\n                                tx => tx.hash === signedTransaction.hash().value\n                            ))\n                    ) {\n                        if (isAssetAddress(address)) {\n                            dispatch(\n                                assetActions.fetchAvailableAssets(address)\n                            );\n                        } else if (isPlatformAddress(address)) {\n                            dispatch(\n                                accountActions.fetchAvailableQuark(address)\n                            );\n                        }\n                        if (observePlatformAddress) {\n                            dispatch(\n                                accountActions.fetchAvailableQuark(\n                                    observePlatformAddress\n                                )\n                            );\n                        }\n                        clearInterval(checkingIndexingFuncForSendingTx);\n                        resolve();\n                    }\n                }, 1000);\n            } catch (e) {\n                reject(e);\n                console.error(e);\n            }\n        });\n    };\n};\n\nlet checkingIndexingFuncForSendingTx: NodeJS.Timer;\nconst sendTransactionByGateway = (\n    assetAddress: string,\n    transaction: Transaction,\n    gatewayURL: string\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                await sendTxToGateway(transaction, gatewayURL);\n                checkingIndexingFuncForSendingTx = setInterval(() => {\n                    dispatch(fetchPendingTxListIfNeed(assetAddress));\n                    dispatch(fetchTxListIfNeed(assetAddress));\n                    const pendingTxList = getState().chainReducer.pendingTxList[\n                        assetAddress\n                    ];\n                    const txList = getState().chainReducer.txList[assetAddress];\n                    if (\n                        (pendingTxList &&\n                            pendingTxList.data &&\n                            _.find(\n                                pendingTxList.data,\n                                tx =>\n                                    tx.hash === transaction.unsignedHash().value\n                            )) ||\n                        (txList &&\n                            txList.data &&\n                            _.find(\n                                txList.data,\n                                tx =>\n                                    tx.hash === transaction.unsignedHash().value\n                            ))\n                    ) {\n                        dispatch(\n                            assetActions.fetchAvailableAssets(assetAddress)\n                        );\n                        clearInterval(checkingIndexingFuncForSendingTx);\n                        resolve();\n                    }\n                }, 1000);\n            } catch (e) {\n                reject(e);\n                console.error(e);\n            }\n        });\n    };\n};\n\nconst fetchTxListByAssetTypeIfNeed = (\n    address: string,\n    assetType: H160,\n    params?: { page?: number; itemsPerPage?: number; force: boolean }\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const { page = 1, itemsPerPage = 10, force = false } = params || {};\n        const id = getIdByAddressAssetType(address, assetType);\n        const cachedTxListById = getState().chainReducer.txListById[id];\n        if (!force && cachedTxListById && cachedTxListById.isFetching) {\n            return;\n        }\n        if (\n            !force &&\n            cachedTxListById &&\n            cachedTxListById.updatedAt &&\n            +new Date() - cachedTxListById.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch({\n                type: ActionType.SetFetchingTxListById,\n                data: {\n                    address,\n                    assetType\n                }\n            });\n            const networkId = getState().globalReducer.networkId;\n            const txList = await getTxsByAddress(\n                address,\n                page,\n                itemsPerPage,\n                networkId,\n                assetType\n            );\n            dispatch({\n                type: ActionType.CacheTxListById,\n                data: {\n                    address,\n                    assetType,\n                    txList\n                }\n            });\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport default {\n    fetchPendingTxListIfNeed,\n    fetchTxListIfNeed,\n    fetchTxListByAssetTypeIfNeed,\n    sendSignedTransaction,\n    sendTransactionByGateway,\n    fetchCountOfTxListByAssetTypeIfNeed,\n    fetchCountOfTxListIfNeed\n};\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { PlatformAccount } from \"../../model/address\";\nimport { getPlatformAccount } from \"../../networks/Api\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport chainActions from \"../chain/chainActions\";\n\nexport type Action = UpdateAvailableQuark | UpdateAccount | SetFetchingAccount;\n\nexport enum ActionType {\n    UpdateAvailableQuark = \"UpdateAvailableQuark\",\n    UpdateAccount = \"UpdateAccount\",\n    SetFetchingAccount = \"SetFetchingAccount\"\n}\n\nexport interface UpdateAvailableQuark {\n    type: ActionType.UpdateAvailableQuark;\n    data: {\n        address: string;\n        amount: U64;\n    };\n}\n\nexport interface UpdateAccount {\n    type: ActionType.UpdateAccount;\n    data: {\n        address: string;\n        account: PlatformAccount;\n    };\n}\n\nconst setFetchingAccount = (address: string): SetFetchingAccount => ({\n    type: ActionType.SetFetchingAccount,\n    data: {\n        address\n    }\n});\n\nconst updateAccount = (\n    address: string,\n    account: PlatformAccount\n): UpdateAccount => ({\n    type: ActionType.UpdateAccount,\n    data: {\n        address,\n        account\n    }\n});\n\nconst fetchAccountIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAccount = getState().accountReducer.accounts[address];\n        if (cachedAccount && cachedAccount.isFetching) {\n            return;\n        }\n        if (\n            cachedAccount &&\n            cachedAccount.updatedAt &&\n            +new Date() - cachedAccount.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAccount(address));\n            const networkId = getState().globalReducer.networkId;\n            const accountResponse = await getPlatformAccount(\n                address,\n                networkId\n            );\n            dispatch(updateAccount(address, accountResponse));\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                dispatch(calculateAvailableQuark(address));\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAvailableQuark = (address: string) => {\n    return (dispatch: ThunkDispatch<ReducerConfigure, void, Action>) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n        dispatch(chainActions.fetchTxListIfNeed(address));\n        dispatch(chainActions.fetchCountOfTxListIfNeed(address));\n        dispatch(fetchAccountIfNeed(address));\n    };\n};\n\nexport interface SetFetchingAccount {\n    type: ActionType.SetFetchingAccount;\n    data: {\n        address: string;\n    };\n}\n\nconst calculateAvailableQuark = (address: string) => {\n    return (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const txListObj = getState().chainReducer.txList[address];\n        const accountObj = getState().accountReducer.accounts[address];\n        const pendingTxListObj = getState().chainReducer.pendingTxList[address];\n        const txList = txListObj && txListObj.data;\n        const account = accountObj && accountObj.data;\n        const pendingTxList = pendingTxListObj && pendingTxListObj.data;\n        if (!txList || !account || !pendingTxList) {\n            return;\n        }\n\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        const aggrPendingQuark = TxUtil.getAggsQuark(\n            address,\n            validPendingTxList\n        );\n        const availableQuark = U64.minus(\n            account.balance,\n            aggrPendingQuark.input\n        );\n        dispatch({\n            type: ActionType.UpdateAvailableQuark,\n            data: {\n                address,\n                amount: availableQuark\n            }\n        });\n    };\n};\n\nexport default {\n    calculateAvailableQuark,\n    fetchAccountIfNeed,\n    fetchAvailableQuark\n};\n","import {\n    AssetTransferAddress,\n    PlatformAddress\n} from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { toast } from \"react-toastify\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { AddressType, WalletAddress } from \"../../model/address\";\nimport {\n    createAssetAddress,\n    createPlatformAddress,\n    restoreAssetAddresses,\n    restorePlatformAddresses\n} from \"../../model/keystore\";\nimport { getAssetKeys, getPlatformKeys } from \"../../utils/storage\";\n\nexport type Action =\n    | UpdateWalletPlatformAddresses\n    | UpdateWalletAssetAddresses\n    | ClearWalletAddresses\n    | SetLoadingAssetAddresses\n    | SetLoadingPlatformAddresses;\n\nexport enum ActionType {\n    UpdateWalletPlatformAddresses = \"UpdateWalletPlatformAddresses\",\n    UpdateWalletAssetAddresses = \"UpdateWalletAssetAddresses\",\n    ClearWalletAddresses = \"ClearWalletAddresses\",\n    SetLoadingPlatformAddresses = \"SetLoadingPlatformAddresses\",\n    SetLoadingAssetAddresses = \"SetLoadingAssetAddresses\"\n}\n\nexport interface UpdateWalletPlatformAddresses {\n    type: ActionType.UpdateWalletPlatformAddresses;\n    data: {\n        platformAddresses: WalletAddress[];\n    };\n}\n\nexport interface UpdateWalletAssetAddresses {\n    type: ActionType.UpdateWalletAssetAddresses;\n    data: {\n        assetAddresses: WalletAddress[];\n    };\n}\n\nexport interface ClearWalletAddresses {\n    type: ActionType.ClearWalletAddresses;\n}\n\nexport interface SetLoadingAssetAddresses {\n    type: ActionType.SetLoadingAssetAddresses;\n    data: {\n        isLoading: boolean;\n    };\n}\n\nexport interface SetLoadingPlatformAddresses {\n    type: ActionType.SetLoadingPlatformAddresses;\n    data: {\n        isLoading: boolean;\n    };\n}\n\nconst updateWalletPlatformAddresses = (\n    platformAddresses: WalletAddress[]\n): UpdateWalletPlatformAddresses => ({\n    type: ActionType.UpdateWalletPlatformAddresses,\n    data: {\n        platformAddresses\n    }\n});\n\nconst updateWalletAssetAddresses = (\n    assetAddresses: WalletAddress[]\n): UpdateWalletAssetAddresses => ({\n    type: ActionType.UpdateWalletAssetAddresses,\n    data: {\n        assetAddresses\n    }\n});\n\nconst fetchWalletFromStorageIfNeed = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch(showLoading() as any);\n        const networkId = getState().globalReducer.networkId;\n        const passphrase = getState().globalReducer.passphrase!;\n        if (!getState().walletReducer.assetAddresses) {\n            const savedAssetKeys = getAssetKeys(networkId);\n            let assetAddresses;\n            if (savedAssetKeys) {\n                assetAddresses = _.map(savedAssetKeys, key => {\n                    const address = AssetTransferAddress.fromTypeAndPayload(\n                        1,\n                        key.key,\n                        {\n                            networkId\n                        }\n                    ).value;\n                    return {\n                        index: key.pathIndex,\n                        address,\n                        type: AddressType.Asset\n                    };\n                });\n            } else {\n                dispatch({\n                    type: ActionType.SetLoadingAssetAddresses,\n                    data: {\n                        isLoading: true\n                    }\n                });\n                assetAddresses = await restoreAssetAddresses(\n                    passphrase,\n                    networkId\n                );\n                dispatch({\n                    type: ActionType.SetLoadingAssetAddresses,\n                    data: {\n                        isLoading: false\n                    }\n                });\n            }\n            dispatch(updateWalletAssetAddresses(assetAddresses));\n        }\n        if (!getState().walletReducer.platformAddresses) {\n            const savedPlatformKeys = getPlatformKeys(networkId);\n            let platformAddresses;\n            if (savedPlatformKeys) {\n                platformAddresses = _.map(savedPlatformKeys, key => {\n                    const address = PlatformAddress.fromAccountId(key.key, {\n                        networkId\n                    }).value;\n                    return {\n                        index: key.pathIndex,\n                        address,\n                        type: AddressType.Platform\n                    };\n                });\n            } else {\n                dispatch({\n                    type: ActionType.SetLoadingPlatformAddresses,\n                    data: {\n                        isLoading: true\n                    }\n                });\n                platformAddresses = await restorePlatformAddresses(\n                    passphrase,\n                    networkId\n                );\n                dispatch({\n                    type: ActionType.SetLoadingPlatformAddresses,\n                    data: {\n                        isLoading: false\n                    }\n                });\n            }\n            dispatch(updateWalletPlatformAddresses(platformAddresses));\n        }\n        dispatch(hideLoading() as any);\n    };\n};\n\nconst createWalletPlatformAddress = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const networkId = getState().globalReducer.networkId;\n        const platformAddresses = getState().walletReducer.platformAddresses;\n        if (platformAddresses && platformAddresses.length >= 10) {\n            toast.error(\"Sorry, you can make up to 10 addresses.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        const passphrase = getState().globalReducer.passphrase!;\n        const newAddresses = await createPlatformAddress(passphrase, networkId);\n        if (platformAddresses) {\n            dispatch(\n                updateWalletPlatformAddresses([\n                    ...platformAddresses,\n                    newAddresses\n                ])\n            );\n        } else {\n            dispatch(updateWalletPlatformAddresses([newAddresses]));\n        }\n    };\n};\n\nconst createWalletAssetAddress = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const networkId = getState().globalReducer.networkId;\n        const assetAddresses = getState().walletReducer.assetAddresses;\n        if (assetAddresses && assetAddresses.length >= 10) {\n            toast.error(\"Sorry, you can make up to 10 addresses.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        const passphrase = getState().globalReducer.passphrase!;\n        const newAddresses = await createAssetAddress(passphrase, networkId);\n        if (assetAddresses) {\n            dispatch(\n                updateWalletAssetAddresses([...assetAddresses, newAddresses])\n            );\n        } else {\n            dispatch(updateWalletAssetAddresses([newAddresses]));\n        }\n    };\n};\n\nexport default {\n    fetchWalletFromStorageIfNeed,\n    createWalletAssetAddress,\n    createWalletPlatformAddress\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport QRCode from \"qrcode.react\";\nimport React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport MediaQuery from \"react-responsive\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport copyBtnHover from \"./img/copy-hover.svg\";\nimport copyBtn from \"./img/copy.svg\";\n\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport \"./AddressContainer.css\";\n\ninterface Props {\n    address: string;\n    backButtonPath: string;\n    addressIndex?: number | null;\n}\n\ninterface State {\n    isCopyHovering: boolean;\n}\n\nclass AddressContainer extends React.Component<Props & WithTranslation, State> {\n    public constructor(props: Props & WithTranslation) {\n        super(props);\n        this.state = {\n            isCopyHovering: false\n        };\n    }\n    public render() {\n        const { address, backButtonPath, addressIndex } = this.props;\n        const { isCopyHovering } = this.state;\n        return (\n            <div className=\"Address-container d-flex align-items-center\">\n                <Link to={backButtonPath}>\n                    <FontAwesomeIcon className=\"back-btn\" icon=\"arrow-left\" />\n                </Link>\n                <div className=\"qr-container\">\n                    <QRCode value={address} size={57} />\n                </div>\n                <div className=\"ml-3 name-address-container\">\n                    <h2 className=\"mb-0\">\n                        <Trans\n                            i18nKey=\"main:address\"\n                            values={{\n                                index:\n                                    addressIndex != null ? addressIndex + 1 : \"\"\n                            }}\n                        />\n                    </h2>\n                    <span className=\"mono address-text mr-3\">\n                        <MediaQuery query=\"(max-width: 768px)\">\n                            {address.slice(0, 8)}\n                            ...\n                            {address.slice(address.length - 8, address.length)}\n                        </MediaQuery>\n                        <MediaQuery query=\"(min-width: 769px)\">\n                            {address}\n                        </MediaQuery>\n                    </span>\n                    <CopyToClipboard\n                        text={address}\n                        onCopy={this.handleCopyAddress}\n                    >\n                        <img\n                            className=\"copy-btn\"\n                            src={isCopyHovering ? copyBtnHover : copyBtn}\n                            alt={\"copy\"}\n                            onMouseOver={this.hoverCopyBtn}\n                            onMouseOut={this.outCopyBtn}\n                            onBlur={this.outCopyBtn}\n                        />\n                    </CopyToClipboard>\n                </div>\n            </div>\n        );\n    }\n\n    private hoverCopyBtn = () => {\n        this.setState({ isCopyHovering: true });\n    };\n\n    private outCopyBtn = () => {\n        this.setState({ isCopyHovering: false });\n    };\n\n    private handleCopyAddress = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(AddressContainer);\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport MediaQuery from \"react-responsive\";\nimport { NetworkId } from \"../../../model/address\";\nimport { getExplorerHost } from \"../../../utils/network\";\nimport { TxUtil } from \"../../../utils/transaction\";\nimport \"./PayTxItem.css\";\n\ninterface Props {\n    tx: TransactionDoc;\n    isPending: boolean;\n    timestamp: number;\n    address: string;\n    networkId: NetworkId;\n}\nclass PayTxItem extends React.Component<Props & WithTranslation, any> {\n    public render() {\n        const { tx, address, networkId, isPending, timestamp } = this.props;\n        const aggrTx = TxUtil.getAggsQuark(address, [tx]);\n        return (\n            <div className=\"d-flex Pay-tx-item align-items-center\">\n                <div className=\"date-container number\">\n                    <MediaQuery query=\"(max-width: 768px)\">\n                        {moment.unix(timestamp).format(\"MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                    <MediaQuery query=\"(min-width: 769px)\">\n                        {moment.unix(timestamp).format(\"YYYY-MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                </div>\n                <div className=\"pay-info-container\">\n                    <a\n                        className=\"mono transaction-hash\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`${getExplorerHost(networkId)}/tx/${tx.hash}`}\n                    >\n                        0x\n                        {tx.hash}\n                    </a>\n                </div>\n                <div className=\"balance-container number\">\n                    <span>\n                        {aggrTx.output.gte(aggrTx.input)\n                            ? `+${U64.minus(\n                                  aggrTx.output,\n                                  aggrTx.input\n                              ).toLocaleString()}`\n                            : `-${U64.minus(\n                                  aggrTx.input,\n                                  aggrTx.output\n                              ).toLocaleString()}`}{\" \"}\n                        CCC\n                    </span>\n                </div>\n                <div className=\"status-container\">\n                    {isPending ? (\n                        <span className=\"pending\">\n                            <Trans i18nKey=\"main:pending\" />\n                        </span>\n                    ) : (\n                        <span className=\"confirmed\">\n                            <Trans i18nKey=\"main:confirmed\" />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\nexport default withTranslation()(PayTxItem);\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TransactionDoc } from \"codechain-indexer-types\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport Pagination from \"react-js-pagination\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport Empty from \"./img/cautiondisabled.svg\";\nimport \"./PayTxHistory.css\";\nimport PayTxItem from \"./PayTxItem/PayTxItem\";\n\ninterface OwnProps {\n    address: string;\n}\n\ninterface StateProps {\n    pendingTxList?: TransactionDoc[] | null;\n    txList?: TransactionDoc[] | null;\n    countOfTxList?: number | null;\n    networkId: NetworkId;\n}\n\ninterface State {\n    activePage: number;\n}\n\ninterface DispatchProps {\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchTxListIfNeed: (address: string, page: number) => void;\n    fetchCountOfTxListIfNeed: (address: string) => void;\n}\n\ntype Props = WithTranslation & StateProps & OwnProps & DispatchProps;\n\nclass PayTxHistory extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            activePage: 1\n        };\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const {\n            pendingTxList,\n            txList,\n            address,\n            networkId,\n            countOfTxList\n        } = this.props;\n        if (!pendingTxList || !txList || countOfTxList == null) {\n            return <div>Loading...</div>;\n        }\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        return (\n            <div className=\"Asset-tx-history\">\n                {validPendingTxList.length + txList.length === 0 && (\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div>\n                            <div className=\"text-center mt-3\">\n                                <img src={Empty} alt={\"empty\"} />\n                            </div>\n                            <div className=\"mt-3 empty\">\n                                <Trans i18nKey=\"send:ccc.recent.empty\" />\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {_.map(validPendingTxList, pendingTx => (\n                    <PayTxItem\n                        key={pendingTx.hash}\n                        tx={pendingTx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={true}\n                        timestamp={pendingTx.pendingTimestamp!}\n                    />\n                ))}\n                {_.map(txList, tx => (\n                    <PayTxItem\n                        key={tx.hash}\n                        tx={tx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={false}\n                        timestamp={tx.timestamp!}\n                    />\n                ))}\n                {countOfTxList > 0 && (\n                    <div className=\"pagination-container\">\n                        <Pagination\n                            activePage={this.state.activePage}\n                            itemsCountPerPage={10}\n                            totalItemsCount={countOfTxList}\n                            pageRangeDisplayed={5}\n                            onChange={this.handlePageChange}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            prevPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            nextPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            firstPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            lastPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n    private handlePageChange = (pageNumber: number) => {\n        const { address, fetchTxListIfNeed } = this.props;\n        this.setState({ activePage: pageNumber });\n        fetchTxListIfNeed(address, pageNumber);\n    };\n\n    private init = async () => {\n        this.fetchAll();\n    };\n\n    private fetchAll = () => {\n        const {\n            address,\n            fetchPendingTxListIfNeed,\n            fetchTxListIfNeed,\n            fetchCountOfTxListIfNeed\n        } = this.props;\n        const { activePage } = this.state;\n        fetchPendingTxListIfNeed(address);\n        fetchTxListIfNeed(address, activePage);\n        fetchCountOfTxListIfNeed(address);\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { address } = props;\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const txList = state.chainReducer.txList[address];\n    const countOfTxList = state.chainReducer.countOfTxList[address];\n    const networkId = state.globalReducer.networkId;\n    return {\n        pendingTxList: pendingTxList && pendingTxList.data,\n        countOfTxList: countOfTxList && countOfTxList.data,\n        txList: txList && txList.data,\n        networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchTxListIfNeed: (address: string, page: number) => {\n        dispatch(\n            chainActions.fetchTxListIfNeed(address, {\n                page,\n                itemsPerPage: 10,\n                force: true\n            })\n        );\n    },\n    fetchCountOfTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchCountOfTxListIfNeed(address));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(PayTxHistory));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { Tooltip } from \"reactstrap\";\nimport \"./index.css\";\n\ninterface OwnProps {\n    tooltip: string;\n}\n\ninterface State {\n    tooltipOpen: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass TooltipLabel extends React.Component<Props, State> {\n    public uniqueId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = { tooltipOpen: false };\n        this.uniqueId = this.makeId(10);\n    }\n\n    public componentDidMount() {\n        document.addEventListener(\"mousedown\", this.closeTooltip);\n        document.addEventListener(\"touchend\", this.closeTooltip);\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.closeTooltip);\n        document.removeEventListener(\"touchend\", this.closeTooltip);\n    }\n\n    public render() {\n        const { t, tooltip } = this.props;\n        return (\n            <div className=\"Tooltip-label\">\n                <span\n                    key=\"tooltip-text\"\n                    className=\"ml-1\"\n                    id={`tooltip-${this.uniqueId}`}\n                >\n                    <FontAwesomeIcon\n                        icon=\"question-circle\"\n                        className=\"question-circle\"\n                    />\n                </span>\n                <Tooltip\n                    trigger=\"click\"\n                    key=\"tooltip-object\"\n                    position=\"right\"\n                    isOpen={this.state.tooltipOpen}\n                    target={`tooltip-${this.uniqueId}`}\n                    toggle={this.toggleTooltip}\n                >\n                    {t(tooltip)}\n                </Tooltip>\n            </div>\n        );\n    }\n\n    private closeTooltip = () => {\n        this.setState({\n            tooltipOpen: false\n        });\n    };\n\n    private toggleTooltip = () => {\n        this.setState({\n            tooltipOpen: !this.state.tooltipOpen\n        });\n    };\n\n    private makeId = (length: number) => {\n        let text = \"\";\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(\n                Math.floor(Math.random() * possible.length)\n            );\n        }\n\n        return text;\n    };\n}\n\nexport default withTranslation()(TooltipLabel);\n","import React from \"react\";\nimport NumberFormat from \"react-number-format\";\nimport { Label } from \"reactstrap\";\nimport TooltipLabel from \"../TooltipLabel\";\nimport IconCheck from \"./img/icons-check.svg\";\nimport IconError from \"./img/icons-error.svg\";\nimport \"./ValidationInput.css\";\n\ninterface Props {\n    placeholder?: string;\n    className?: string;\n    error?: string | null;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    value: string | number;\n    type?: string;\n    labelText?: string;\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    isValid?: boolean;\n    showValidation: boolean;\n    reverse?: boolean;\n    disable?: boolean;\n    decimalScale?: number;\n    tooltip?: string;\n}\ninterface State {\n    isFocus: boolean;\n}\nexport default class ValidationInput extends React.Component<Props, State> {\n    public uniqueId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = { isFocus: false };\n        this.uniqueId = this.makeId(10);\n    }\n    public render() {\n        const {\n            onChange,\n            value,\n            placeholder,\n            className,\n            type,\n            labelText,\n            error,\n            onBlur,\n            isValid,\n            reverse,\n            showValidation,\n            disable,\n            decimalScale,\n            tooltip\n        } = this.props;\n        const { isFocus } = this.state;\n        return (\n            <div className={`Validation-input ${className} mb-4`}>\n                {labelText && [\n                    <Label\n                        key=\"label\"\n                        for={`id-${this.uniqueId}`}\n                        className={`mb-0 label-text ${reverse && \"reverse\"}`}\n                    >\n                        {labelText}\n                    </Label>,\n                    tooltip && <TooltipLabel tooltip={tooltip} key=\"tooltip\" />\n                ]}\n                {type === \"number\" ? (\n                    <NumberFormat\n                        value={value}\n                        decimalScale={decimalScale}\n                        autoComplete=\"off\"\n                        className={`form-control ${reverse &&\n                            \"reverse\"} ${showValidation && \"validation-form\"}`}\n                        id={`id-${this.uniqueId}`}\n                        placeholder={placeholder}\n                        // onChange={onChange}\n                        onBlur={onBlur}\n                        disabled={disable}\n                        thousandSeparator={true}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onFocus={() => {\n                            this.setState({ isFocus: true });\n                        }}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onBlurCapture={() => {\n                            this.setState({ isFocus: false });\n                        }}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onValueChange={values => {\n                            const { value: v } = values;\n                            if (onChange && isFocus) {\n                                onChange({ target: { value: v } } as any);\n                            }\n                        }}\n                    />\n                ) : (\n                    <input\n                        autoComplete=\"off\"\n                        type={`${type || \"text\"}`}\n                        className={`form-control ${reverse &&\n                            \"reverse\"} ${showValidation && \"validation-form\"}`}\n                        id={`id-${this.uniqueId}`}\n                        placeholder={placeholder}\n                        value={value}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        disabled={disable}\n                    />\n                )}\n                {isValid && (\n                    <img\n                        className=\"valid-icon animated fadeIn\"\n                        src={IconCheck}\n                        alt={\"check\"}\n                    />\n                )}\n                {error && (\n                    <img\n                        className=\"error-icon animated fadeIn\"\n                        src={IconError}\n                        alt={\"error\"}\n                    />\n                )}\n                {error && (\n                    <span className=\"error-text animated fadeIn\">{error}</span>\n                )}\n            </div>\n        );\n    }\n\n    private makeId = (length: number) => {\n        let text = \"\";\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(\n                Math.floor(Math.random() * possible.length)\n            );\n        }\n\n        return text;\n    };\n}\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport ValidationInput from \"../../../../ValidationInput/ValidationInput\";\nimport \"./CCCReceiverItem.css\";\n\ninterface OwnProps {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    remainingAmount: string;\n    fee: string;\n    onAddressChange: (address: string) => void;\n    onAmountChange: (quantity: string) => void;\n    onAddressValidationCheck: () => void;\n    onAmountValidationCheck: () => void;\n    onFeeValidationCheck: () => void;\n    onFeeChange: (quantity: string) => void;\n    isAddressValid?: boolean;\n    isAmountValid?: boolean;\n    addressError?: string;\n    amountError?: string;\n    feeError?: string;\n    isFeeValid?: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass CCCReceiverItem extends React.Component<Props> {\n    public render() {\n        const {\n            t,\n            receiver,\n            isAddressValid,\n            isAmountValid,\n            addressError,\n            amountError,\n            fee,\n            isFeeValid,\n            feeError\n        } = this.props;\n        return (\n            <div className=\"CCCReceiver-item animated fadeIn\">\n                <ValidationInput\n                    value={receiver.address}\n                    onChange={this.handleChangeAddressInput}\n                    labelText={t(\"send:ccc.receiver.label\")}\n                    placeholder={t(\"send:ccc.receiver.placeholder\")}\n                    showValidation={true}\n                    isValid={isAddressValid}\n                    onBlur={this.handleBlurAddressInput}\n                    error={addressError}\n                />\n                <div className=\"d-flex align-items-end\">\n                    <ValidationInput\n                        value={receiver.quantity}\n                        onChange={this.handleChangedAmountInput}\n                        labelText={t(\"send:ccc.amount.label\")}\n                        placeholder={t(\"send:ccc.amount.placeholder\")}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isAmountValid}\n                        onBlur={this.handleBlurAmountInput}\n                        error={amountError}\n                        decimalScale={0}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary max-btn\"\n                        onClick={this.handleMaxValueClick}\n                    >\n                        <Trans i18nKey=\"main:max\" />\n                    </button>\n                </div>\n                <div>\n                    <ValidationInput\n                        value={fee}\n                        onChange={this.handleChangeFeeInput}\n                        labelText={t(\"send:ccc.fee.label\")}\n                        placeholder={`100 (CCC)`}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isFeeValid}\n                        tooltip=\"send:ccc.fee.tooltip\"\n                        onBlur={this.handleBlurFeeInput}\n                        error={feeError}\n                        decimalScale={0}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private handleBlurAddressInput = () => {\n        const { onAddressValidationCheck } = this.props;\n        onAddressValidationCheck();\n    };\n\n    private handleBlurAmountInput = () => {\n        const { onAmountValidationCheck } = this.props;\n        onAmountValidationCheck();\n    };\n\n    private handleBlurFeeInput = () => {\n        const { onFeeValidationCheck } = this.props;\n        onFeeValidationCheck();\n    };\n\n    private handleMaxValueClick = () => {\n        const { onAmountChange, remainingAmount } = this.props;\n        onAmountChange(remainingAmount);\n    };\n\n    private handleChangeAddressInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onAddressChange } = this.props;\n        onAddressChange(event.target.value);\n    };\n\n    private handleChangedAmountInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onAmountChange } = this.props;\n        onAmountChange(event.target.value);\n    };\n\n    private handleChangeFeeInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onFeeChange } = this.props;\n        onFeeChange(event.target.value);\n    };\n}\n\nexport default withTranslation()(CCCReceiverItem);\n","import BigNumber from \"bignumber.js\";\nimport { PlatformAddress, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./CCCReceiverContainer.css\";\nimport CCCReceiverItem from \"./CCCReceiverItem/CCCReceiverItem\";\n\ninterface State {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    fee: string;\n    isAddressValid?: boolean;\n    addressError?: string;\n    isAmountValid?: boolean;\n    amountError?: string;\n    isFeeValid?: boolean;\n    feeError?: string;\n}\n\ninterface OwnProps {\n    address: string;\n    totalAmount: U64;\n    isSending: boolean;\n    onSubmit: (receiver: { address: string; quantity: U64 }, fee: U64) => void;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nconst MinimumFee = 100;\n\nclass CCCReceiverContainer extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            receiver: {\n                address: \"\",\n                quantity: \"\"\n            },\n            fee: `${MinimumFee}`,\n            isFeeValid: undefined,\n            feeError: undefined,\n            isAddressValid: undefined,\n            addressError: undefined,\n            isAmountValid: undefined,\n            amountError: undefined\n        };\n    }\n    public render() {\n        const {\n            receiver,\n            isAddressValid,\n            addressError,\n            isAmountValid,\n            amountError,\n            isFeeValid,\n            feeError,\n            fee\n        } = this.state;\n        const { isSending } = this.props;\n        return (\n            <div className=\"CCCReceiver-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"receivers\">\n                        <CCCReceiverItem\n                            fee={fee}\n                            receiver={receiver}\n                            onAddressChange={this.handleAddressChange}\n                            onAmountChange={this.handleAmountChange}\n                            onFeeChange={this.handleFeeChange}\n                            remainingAmount={this.calculateRemainingCCCString()}\n                            onAddressValidationCheck={\n                                this.handleAddressValidationCheck\n                            }\n                            onAmountValidationCheck={\n                                this.handleAmountValidationCheck\n                            }\n                            onFeeValidationCheck={this.handleFeeValidationCheck}\n                            isAddressValid={isAddressValid}\n                            isAmountValid={isAmountValid}\n                            addressError={addressError}\n                            amountError={amountError}\n                            feeError={feeError}\n                            isFeeValid={isFeeValid}\n                        />\n                    </div>\n                    <div className=\"mt-5\">\n                        <button\n                            disabled={isSending}\n                            type=\"submit\"\n                            className=\"btn btn-primary square w-100 send-btn\"\n                        >\n                            <Trans i18nKey=\"send:ccc.button\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    private calculateRemainingCCCString = () => {\n        const { totalAmount } = this.props;\n        const { fee } = this.state;\n        const remainingCCC = totalAmount.value.minus(fee);\n        if (remainingCCC.gt(0)) {\n            return remainingCCC.toString();\n        } else {\n            return \"0\";\n        }\n    };\n\n    private handleAddressValidationCheck = () => {\n        const { receiver } = this.state;\n        const { t, address: myAddress } = this.props;\n        const address = receiver.address;\n        if (address === \"\") {\n            this.setState({\n                isAddressValid: false,\n                addressError: t(\"send:ccc.error.address.required\")\n            });\n            return false;\n        }\n        if (address === myAddress) {\n            this.setState({\n                isAddressValid: false,\n                addressError: t(\"send:ccc.error.address.not_equal\")\n            });\n            return false;\n        }\n        if (address) {\n            try {\n                PlatformAddress.fromString(address);\n                this.setState({\n                    isAddressValid: true,\n                    addressError: undefined\n                });\n                return true;\n            } catch (e) {\n                // nothing\n            }\n        }\n        this.setState({\n            isAddressValid: false,\n            addressError: t(\"send:ccc.error.address.invalid\")\n        });\n        return false;\n    };\n\n    private handleAmountValidationCheck = () => {\n        const { receiver, fee } = this.state;\n        const { t, totalAmount } = this.props;\n        const cccString = receiver.quantity;\n        if (cccString === \"\") {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.required\")\n            });\n            return false;\n        }\n        console.log(cccString);\n        const amountCCC = new BigNumber(cccString);\n        if (amountCCC.isNaN()) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.invalid\")\n            });\n            return false;\n        }\n        if (amountCCC.lt(1)) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.minimum\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountCCC.plus(amountFee).gt(totalAmount.value)) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.not_enough\")\n            });\n            return false;\n        }\n        this.setState({\n            isAmountValid: true,\n            amountError: undefined\n        });\n        return true;\n    };\n\n    private handleFeeValidationCheck = () => {\n        const { receiver, fee } = this.state;\n        const { t, totalAmount } = this.props;\n        const feeString = fee;\n        if (feeString === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(feeString);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.minimum\", {\n                    minimum: MinimumFee\n                })\n            });\n            return false;\n        }\n        const amountCCC = new BigNumber(\n            receiver.quantity === \"\" ? \"0\" : receiver.quantity\n        );\n        if (amountCCC.plus(amountFee).gt(totalAmount.value)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.not_enough\")\n            });\n            return false;\n        }\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleAddressChange = (address: string) => {\n        const { receiver } = this.state;\n        this.setState({\n            receiver: {\n                address,\n                quantity: receiver.quantity\n            },\n            addressError: undefined,\n            isAddressValid: undefined\n        });\n    };\n\n    private handleAmountChange = (quantity: string) => {\n        const { receiver } = this.state;\n        this.setState({\n            receiver: {\n                address: receiver.address,\n                quantity\n            },\n            amountError: undefined,\n            isAmountValid: undefined\n        });\n    };\n\n    private handleFeeChange = (amount: string) => {\n        this.setState({\n            fee: amount,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { receiver, fee } = this.state;\n\n        if (!this.handleAmountValidationCheck()) {\n            return;\n        }\n\n        if (!this.handleAddressValidationCheck()) {\n            return;\n        }\n\n        if (!this.handleFeeValidationCheck()) {\n            return;\n        }\n\n        const amountCCC = new BigNumber(receiver.quantity);\n        const amountFee = new BigNumber(fee);\n        this.props.onSubmit(\n            {\n                address: receiver.address,\n                quantity: new U64(amountCCC)\n            },\n            new U64(amountFee)\n        );\n    };\n}\n\nexport default withTranslation()(CCCReceiverContainer);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { SDK } from \"codechain-sdk\";\nimport { SignedTransaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../../../model/keystore\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport accountActions from \"../../../redux/account/accountActions\";\nimport chainActions from \"../../../redux/chain/chainActions\";\nimport { getCodeChainHost } from \"../../../utils/network\";\nimport { getAssetKeys, getPlatformKeys } from \"../../../utils/storage\";\nimport CCCReceiverContainer from \"./CCCReceiverContainer/CCCReceiverContainer\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport \"./SendCCC.css\";\n\ninterface OwnProps {\n    address: string;\n    onClose: () => void;\n}\n\ninterface StateProps {\n    availableQuark?: U64 | null;\n    networkId: NetworkId;\n    passphrase: string;\n}\n\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction\n    ) => Promise<unknown>;\n}\n\ninterface State {\n    isSending: boolean;\n    isSent: boolean;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass SendCCC extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isSending: false,\n            isSent: false\n        };\n    }\n    public render() {\n        const { onClose, availableQuark, address } = this.props;\n        const { isSending, isSent } = this.state;\n        if (!availableQuark) {\n            return (\n                <div>\n                    <div className=\"Send-CCC\">\n                        <div className=\"loading-container\" />\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className=\"Send-CCC animated fadeIn\">\n                <div className=\"cancel-icon-container\" onClick={onClose}>\n                    <FontAwesomeIcon className=\"cancel-icon\" icon=\"times\" />\n                </div>\n                <h2 className=\"title\">\n                    <Trans i18nKey=\"send:ccc.title\" />\n                </h2>\n                {isSent ? (\n                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                        <div className=\"text-center\">\n                            <div>\n                                <img src={CheckIcon} alt={\"check\"} />\n                            </div>\n                            <div className=\"mt-3\">\n                                <span>\n                                    <Trans i18nKey=\"send:ccc.complete\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className=\"d-flex align-items-center balance-container mb-4\">\n                            <div className=\"mr-auto balance-text\">\n                                <Trans i18nKey=\"send:ccc.balance\" />\n                            </div>\n                            <span className=\"amount number\">\n                                {availableQuark.toLocaleString()} CCC\n                            </span>\n                        </div>\n                        <CCCReceiverContainer\n                            address={address}\n                            onSubmit={this.handleSubmit}\n                            totalAmount={availableQuark}\n                            isSending={isSending}\n                        />\n                    </div>\n                )}\n                {isSending && (\n                    <div className=\"sending-panel d-flex align-items-center justify-content-center\">\n                        <Spinner name=\"line-scale\" color=\"white\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    public updateWindowDimensions = () => {\n        if (window.innerWidth <= 872) {\n            this.addModalOpenClass();\n        } else {\n            this.removeModalOpenClass();\n        }\n    };\n\n    public async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.removeModalOpenClass();\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    private addModalOpenClass = () => {\n        document.body.className = \"modal-open\";\n    };\n\n    private removeModalOpenClass = () => {\n        document.body.className = \"\";\n    };\n\n    private init = () => {\n        const { address, fetchAvailableQuark } = this.props;\n        fetchAvailableQuark(address);\n    };\n\n    private handleSubmit = async (\n        receiver: {\n            address: string;\n            quantity: U64;\n        },\n        fee: U64\n    ) => {\n        const { networkId, address, passphrase } = this.props;\n        const sdk = new SDK({\n            server: getCodeChainHost(networkId),\n            networkId\n        });\n\n        const tx = sdk.core.createPayTransaction({\n            recipient: receiver.address,\n            quantity: receiver.quantity\n        });\n\n        const ccKey = await getCCKey();\n\n        const storedPlatformKeys = getPlatformKeys(networkId);\n        const storedAssetKeys = getAssetKeys(networkId);\n        const seedHash = await getFirstSeedHash();\n\n        const platformKeyMapping = _.reduce(\n            storedPlatformKeys,\n            (memo, storedPlatformKey) => {\n                return {\n                    ...memo,\n                    [storedPlatformKey.key]: {\n                        seedHash,\n                        path: getPlatformAddressPath(\n                            storedPlatformKey.pathIndex\n                        )\n                    }\n                };\n            },\n            {}\n        );\n\n        const assetKeyMapping = _.reduce(\n            storedAssetKeys,\n            (memo, storedAssetKey) => {\n                return {\n                    ...memo,\n                    [storedAssetKey.key]: {\n                        seedHash,\n                        path: getAssetAddressPath(storedAssetKey.pathIndex)\n                    }\n                };\n            },\n            {}\n        );\n\n        const keyStore = new LocalKeyStore(ccKey, {\n            platform: platformKeyMapping,\n            asset: assetKeyMapping\n        });\n        const seq = await sdk.rpc.chain.getSeq(address);\n        const { transactions } = await sdk.rpc.chain.getPendingTransactions();\n        const newSeq =\n            seq +\n            transactions.filter(\n                t => t.getSignerAddress({ networkId }).toString() === address\n            ).length;\n        const signedTx = await sdk.key.signTransaction(tx, {\n            account: address,\n            keyStore,\n            fee,\n            seq: newSeq,\n            passphrase\n        });\n        this.setState({ isSending: true });\n        try {\n            await this.props.sendSignedTransaction(address, signedTx);\n            this.setState({ isSent: true });\n        } catch (e) {\n            toast.error(\"Server is not responding.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            console.error(e);\n        }\n        this.setState({ isSending: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const { address } = ownProps;\n    const availableQuark = state.accountReducer.availableQuark[address];\n    const networkId = state.globalReducer.networkId;\n    const passphrase = state.globalReducer.passphrase!;\n    return {\n        availableQuark,\n        networkId,\n        passphrase\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(address, signedTransaction)\n        );\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(SendCCC));\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"../../redux\";\nimport accountActions from \"../../redux/account/accountActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport PayTxHistory from \"../PayTxHistory/PayTxHistory\";\nimport \"./Account.css\";\nimport SendCCC from \"./SendAsset/SendCCC\";\n\ninterface OwnProps {\n    match: match<{ address: string }>;\n}\n\ninterface StateProps {\n    availableQuark?: U64 | null;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ninterface State {\n    sendingCCC: boolean;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass Account extends React.Component<Props, State> {\n    private refresher: any;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            sendingCCC: false\n        };\n    }\n    public componentWillReceiveProps(props: Props) {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            match: {\n                params: { address: nextAddress }\n            }\n        } = props;\n        if (nextAddress !== address) {\n            this.init();\n        }\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    public render() {\n        const {\n            availableQuark,\n            match: {\n                params: { address }\n            },\n            addressIndex\n        } = this.props;\n        const { sendingCCC } = this.state;\n        if (!availableQuark) {\n            return null;\n        }\n        return (\n            <div className=\"Account animated fadeIn\">\n                <div className=\"d-flex\">\n                    <div className=\"left-panel mx-auto\">\n                        <AddressContainer\n                            address={address}\n                            backButtonPath=\"/\"\n                            addressIndex={addressIndex}\n                        />\n                        <div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"element-title\">\n                                    <Trans i18nKey=\"send:ccc.balance\" />\n                                </h4>\n                                <div className=\"ccc-text number\">\n                                    <span className=\"mr-2\">\n                                        {availableQuark.toLocaleString()}\n                                    </span>\n                                    <span>CCC</span>\n                                </div>\n                                <div className=\"mt-4\">\n                                    <button\n                                        className=\"btn btn-primary square reverse send-btn mr-3 mb-3\"\n                                        onClick={this.openSendingCCC}\n                                        disabled={sendingCCC}\n                                    >\n                                        <Trans i18nKey=\"send:ccc.button\" />\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"element-container\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:ccc.recent.title\" />\n                                </h4>\n                                <PayTxHistory address={address} />\n                            </div>\n                        </div>\n                    </div>\n                    {sendingCCC && (\n                        <div className=\"right-container\">\n                            <div className=\"right-panel\">\n                                <SendCCC\n                                    address={address}\n                                    onClose={this.handleCloseSendingCCC}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    private openSendingCCC = () => {\n        window.scrollTo(0, 0);\n        this.setState({ sendingCCC: true });\n    };\n\n    private handleCloseSendingCCC = () => {\n        this.setState({\n            sendingCCC: false\n        });\n    };\n\n    private init = async () => {\n        this.clearInterval();\n        this.refresher = setInterval(() => {\n            this.fetchAll();\n        }, 10000);\n        this.fetchAll();\n    };\n    private clearInterval = () => {\n        if (this.refresher) {\n            clearInterval(this.refresher);\n        }\n    };\n    private fetchAll = async () => {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        this.props.fetchAvailableQuark(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const {\n        match: {\n            params: { address }\n        }\n    } = props;\n    const availableQuark = state.accountReducer.availableQuark[address];\n    const assetAddress = _.find(\n        state.walletReducer.platformAddresses,\n        aa => aa.address === address\n    );\n    return {\n        availableQuark,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(Account));\n","import React from \"react\";\nimport { NetworkId } from \"../../model/address\";\nimport { getIndexerHost } from \"../network\";\nconst Identicon = require(\"identicon.js\");\nconst sha256 = require(\"js-sha256\");\n\ninterface Props {\n    data: string;\n    className?: string;\n    size: number;\n    isAssetImage: boolean;\n    networkId: NetworkId;\n}\ninterface State {\n    requestUrl?: string;\n}\n\nexport class ImageLoader extends React.Component<Props, State> {\n    constructor(prop: Props) {\n        super(prop);\n        let requestUrl;\n        if (prop.isAssetImage) {\n            const host = getIndexerHost(prop.networkId || \"cc\");\n            requestUrl = `${host}/api/asset-image/${prop.data}`;\n        } else {\n            requestUrl = this.getDefaultImage();\n        }\n        this.state = {\n            requestUrl\n        };\n    }\n\n    public render() {\n        const { className, size } = this.props;\n        const { requestUrl } = this.state;\n\n        return (\n            <img\n                className={className}\n                style={{ verticalAlign: \"middle\", width: size, height: size }}\n                src={requestUrl}\n                alt={\"loader\"}\n                onError={this.fallback}\n            />\n        );\n    }\n\n    private getDefaultImage = () => {\n        const hash = sha256.create();\n        hash.update(this.props.data);\n        const identiconData = new Identicon(\n            hash.hex(),\n            this.props.size\n        ).toString();\n        return `data:image/png;base64,${identiconData}`;\n    };\n\n    private fallback = () => {\n        this.setState({ requestUrl: this.getDefaultImage() });\n    };\n}\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AddressType, NetworkId, WalletAddress } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport \"./AddressItem.css\";\n\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport accountActions from \"../../../redux/account/accountActions\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport copyBtnHover from \"./img/copy-hover.svg\";\nimport copyBtn from \"./img/copy.svg\";\n\ninterface OwnProps {\n    walletAddress: WalletAddress;\n    className?: string | null;\n}\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    fetchAvailableAssets: (address: string) => void;\n}\ninterface StateProps {\n    availableQuark?: U64 | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n}\ninterface State {\n    isCopyHovering: boolean;\n}\n\ntype Props = WithTranslation &\n    RouteComponentProps &\n    OwnProps &\n    DispatchProps &\n    StateProps;\n\nclass AddressItem extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isCopyHovering: false\n        };\n    }\n    public componentDidMount() {\n        const {\n            walletAddress,\n            fetchAvailableQuark,\n            fetchAvailableAssets\n        } = this.props;\n        if (walletAddress.type === AddressType.Platform) {\n            fetchAvailableQuark(walletAddress.address);\n        }\n        if (walletAddress.type === AddressType.Asset) {\n            fetchAvailableAssets(walletAddress.address);\n        }\n    }\n    public render() {\n        const {\n            walletAddress,\n            className,\n            availableQuark,\n            availableAssets,\n            networkId\n        } = this.props;\n        const { isCopyHovering } = this.state;\n        return (\n            <div\n                className={`Address-item animated fadeIn ${className}`}\n                onClick={this.handleClick}\n            >\n                <div\n                    className={`item-body ${\n                        walletAddress.type === AddressType.Platform\n                            ? \"platform-type\"\n                            : \"asset-type\"\n                    }`}\n                >\n                    <div>\n                        <p className=\"address-name mb-0\">\n                            <Trans\n                                i18nKey=\"main:address\"\n                                values={{\n                                    index: walletAddress.index + 1\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <span className=\"address-text mono\">\n                        {walletAddress.address.slice(0, 10)}\n                        ...\n                        {walletAddress.address.slice(\n                            walletAddress.address.length - 10,\n                            walletAddress.address.length\n                        )}\n                    </span>\n                    <CopyToClipboard\n                        text={walletAddress.address}\n                        onCopy={this.handleCopyAddress}\n                    >\n                        <img\n                            className=\"ml-3\"\n                            src={isCopyHovering ? copyBtnHover : copyBtn}\n                            alt={\"copy\"}\n                            onMouseOver={this.hoverCopyBtn}\n                            onMouseOut={this.outCopyBtn}\n                        />\n                    </CopyToClipboard>\n                </div>\n                {walletAddress.type === AddressType.Platform && (\n                    <div className=\"platform-account\">\n                        {availableQuark ? (\n                            <span className=\"number balance\">\n                                {availableQuark.toLocaleString()} CCC\n                            </span>\n                        ) : (\n                            <span className=\"number balance\">\n                                <Trans i18nKey=\"main:address_loading\" />\n                            </span>\n                        )}\n                    </div>\n                )}\n                {walletAddress.type === AddressType.Asset && (\n                    <div className=\"platform-account\">\n                        {availableAssets ? (\n                            availableAssets.length > 0 ? (\n                                [\n                                    availableAssets.slice(0, 3).map(a => (\n                                        <div\n                                            className=\"asset-image\"\n                                            key={a.assetType}\n                                        >\n                                            <ImageLoader\n                                                isAssetImage={true}\n                                                data={a.assetType}\n                                                size={37}\n                                                networkId={networkId}\n                                            />\n                                        </div>\n                                    )),\n                                    availableAssets.length > 3 && (\n                                        <span key=\"others\" className=\"balance\">\n                                            + {availableAssets.length - 3}\n                                        </span>\n                                    )\n                                ]\n                            ) : (\n                                <span className=\"balance\">\n                                    <Trans i18nKey=\"main:asset.no_asset\" />\n                                </span>\n                            )\n                        ) : (\n                            <span className=\"number balance\">\n                                <Trans i18nKey=\"main:address_loading\" />\n                            </span>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n    private handleClick = () => {\n        const { walletAddress, history } = this.props;\n        const { isCopyHovering } = this.state;\n        if (isCopyHovering) {\n            return;\n        }\n        if (walletAddress.type === AddressType.Platform) {\n            history.push(`/${walletAddress.address}/account`);\n        } else {\n            history.push(`/${walletAddress.address}/assets`);\n        }\n    };\n    private hoverCopyBtn = () => {\n        this.setState({ isCopyHovering: true });\n    };\n    private outCopyBtn = () => {\n        this.setState({ isCopyHovering: false });\n    };\n    private handleCopyAddress = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { walletAddress } = props;\n    const availableQuark =\n        state.accountReducer.availableQuark[walletAddress.address];\n    const availableAssets =\n        state.assetReducer.availableAssets[walletAddress.address];\n    return {\n        availableQuark,\n        availableAssets,\n        networkId: state.globalReducer.networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(withTranslation()(AddressItem)));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport actions from \"../../redux/wallet/walletActions\";\nimport AddressItem from \"./AddressItem/AddressItem\";\nimport \"./AddressList.css\";\n\ninterface StateProps {\n    platformAddresses?: WalletAddress[] | null;\n    assetAddresses?: WalletAddress[] | null;\n    networkId: NetworkId;\n    isLoadingAssetAddresses?: boolean | null;\n    isLoadingPlatformAddresses?: boolean | null;\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    createWalletAssetAddress: () => void;\n    createWalletPlatformAddress: () => void;\n}\ntype Props = WithTranslation & StateProps & DispatchProps;\n\nclass AddressList extends React.Component<Props> {\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n    }\n    public componentWillReceiveProps(props: Props) {\n        const { networkId } = this.props;\n        const { networkId: nextNetworkId } = props;\n        if (networkId !== nextNetworkId) {\n            this.props.fetchWalletFromStorageIfNeed();\n        }\n    }\n    public render() {\n        const { platformAddresses, assetAddresses, networkId } = this.props;\n        return (\n            <div className=\"Address-list animated fadeIn\">\n                <Container>\n                    <div className=\"asset-address-container mb-5\">\n                        <div className=\"deco asset-title-deco\" />\n                        <h5 className=\"mb-1\">\n                            <Trans i18nKey=\"main:asset.title\" />\n                        </h5>\n                        <div className=\"mb-4 address-description\">\n                            <span>\n                                <Trans i18nKey=\"main:asset.detail\" />\n                            </span>\n                        </div>\n                        <Row className=\"address-item-container\">\n                            {_.map(assetAddresses, (address, index: number) => (\n                                <Col md={6} lg={4} xl={3} key={index}>\n                                    <AddressItem walletAddress={address} />\n                                </Col>\n                            ))}\n                            <Col md={6} lg={4} xl={3}>\n                                {!assetAddresses ? (\n                                    <div className=\"restoring\">\n                                        <Trans i18nKey=\"main:asset.restore\" />\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div\n                                            onClick={this.createAssetAddress}\n                                            className=\"add-address-btn d-flex align-items-center justify-content-center\"\n                                        >\n                                            <Trans i18nKey=\"main:asset.add\" />\n                                            <FontAwesomeIcon\n                                                className=\"ml-2\"\n                                                icon=\"plus-circle\"\n                                            />\n                                        </div>\n                                        {assetAddresses.length > 0 && (\n                                            <Link to=\"/mint\">\n                                                <div className=\"mint-asset-btn d-flex align-items-center justify-content-center\">\n                                                    <Trans i18nKey=\"main:asset.mint\" />\n                                                </div>\n                                            </Link>\n                                        )}\n                                    </div>\n                                )}\n                            </Col>\n                        </Row>\n                    </div>\n                    <hr />\n                    <div className=\"platform-address-container\">\n                        <div className=\"deco platform-title-deco\" />\n                        <h5 className=\"mb-1\">\n                            <Trans i18nKey=\"main:ccc.title\" />\n                        </h5>\n                        <div className=\"mb-4 address-description\">\n                            <span>\n                                <Trans i18nKey=\"main:ccc.detail\" />\n                            </span>\n                        </div>\n                        <Row className=\"address-item-container\">\n                            {_.map(\n                                platformAddresses,\n                                (address, index: number) => (\n                                    <Col md={6} lg={4} xl={3} key={index}>\n                                        <AddressItem walletAddress={address} />\n                                    </Col>\n                                )\n                            )}\n                            <Col md={6} lg={4} xl={3}>\n                                {!platformAddresses ? (\n                                    <div className=\"restoring\">\n                                        <Trans i18nKey=\"main:ccc.restore\" />\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div\n                                            onClick={this.createPlatformAddress}\n                                            className=\"add-address-btn d-flex align-items-center justify-content-center\"\n                                        >\n                                            <Trans i18nKey=\"main:ccc.add\" />\n                                            <FontAwesomeIcon\n                                                className=\"ml-2\"\n                                                icon=\"plus-circle\"\n                                            />\n                                        </div>\n                                        {platformAddresses.length > 0 &&\n                                            (networkId === \"wc\" && (\n                                                <a\n                                                    href=\"https://corgi.codechain.io/faucet\"\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                >\n                                                    <div className=\"buy-CCC-btn d-flex align-items-center justify-content-center\">\n                                                        <Trans i18nKey=\"main:ccc.faucet\" />\n                                                    </div>\n                                                </a>\n                                            ))}\n                                    </div>\n                                )}\n                            </Col>\n                        </Row>\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n    private createPlatformAddress = async () => {\n        const { createWalletPlatformAddress } = this.props;\n        createWalletPlatformAddress();\n    };\n\n    private createAssetAddress = async () => {\n        const { createWalletAssetAddress } = this.props;\n        createWalletAssetAddress();\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    platformAddresses: state.walletReducer.platformAddresses,\n    assetAddresses: state.walletReducer.assetAddresses,\n    networkId: state.globalReducer.networkId,\n    isLoadingAssetAddresses: state.walletReducer.isLoadingAssetAddresses,\n    isLoadingPlatformAddresses: state.walletReducer.isLoadingPlatformAddresses\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(actions.fetchWalletFromStorageIfNeed());\n    },\n    createWalletPlatformAddress: () => {\n        dispatch(actions.createWalletPlatformAddress());\n    },\n    createWalletAssetAddress: () => {\n        dispatch(actions.createWalletAssetAddress());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AddressList));\n","export const parseMetadata = (metadata: string): Metadata => {\n    try {\n        return JSON.parse(metadata);\n    } catch {\n        return {};\n    }\n};\n\nexport interface Metadata {\n    name?: string;\n    description?: string;\n    icon_url?: string;\n    gateway?: { url?: string };\n}\n","import { AssetSchemeDoc, TransactionDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport MediaQuery from \"react-responsive\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../../model/address\";\nimport { ReducerConfigure } from \"../../../../redux\";\nimport assetActions from \"../../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../../../utils/metadata\";\nimport { getExplorerHost } from \"../../../../utils/network\";\n\ninterface OwnProps {\n    index: number;\n    timestamp: number;\n    networkId: NetworkId;\n    tx: TransactionDoc;\n    isPending: boolean;\n    history: {\n        assetType: string;\n        inputQuantities: U64;\n        outputQuantities: U64;\n        burnQuantities: U64;\n    };\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\nclass AssetTxItemEntity extends React.Component<Props, any> {\n    public componentDidMount() {\n        this.props.fetchAssetSchemeIfNeed(\n            new H160(this.props.history.assetType)\n        );\n    }\n    public render() {\n        const {\n            history,\n            timestamp,\n            networkId,\n            tx,\n            isPending,\n            assetScheme,\n            t\n        } = this.props;\n\n        let metadata;\n        if (assetScheme) {\n            metadata = parseMetadata(assetScheme.metadata);\n        }\n        return (\n            <div className=\"d-flex Asset-tx-item align-items-center\">\n                <div className=\"date-container number\">\n                    <MediaQuery query=\"(max-width: 768px)\">\n                        {moment.unix(timestamp).format(\"MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                    <MediaQuery query=\"(min-width: 769px)\">\n                        {moment.unix(timestamp).format(\"YYYY-MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                </div>\n                <div className=\"asset-info-container\">\n                    <div className=\"d-flex\">\n                        <ImageLoader\n                            className=\"asset-image mr-2\"\n                            data={history.assetType}\n                            size={18}\n                            isAssetImage={true}\n                            networkId={networkId}\n                        />\n                        <span className=\"asset-name\">\n                            {(metadata && metadata.name) ||\n                                `0x${history.assetType}`}\n                        </span>\n                    </div>\n                    <a\n                        className=\"mono transaction-hash\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`${getExplorerHost(networkId)}/tx/${tx.hash}`}\n                    >\n                        0x\n                        {tx.hash}\n                    </a>\n                    {tx.type === \"transferAsset\" &&\n                        tx.transferAsset.metadata &&\n                        tx.transferAsset.metadata !== \"\" && (\n                            <div className=\"memo-container\">\n                                <span className=\"memo-text\">\n                                    {t(\"main:memo\")}:{\" \"}\n                                    {tx.transferAsset.metadata}\n                                </span>\n                            </div>\n                        )}\n                </div>\n                <div className=\"balance-container number\">\n                    {this.renderQuantity(history)}\n                </div>\n                <div className=\"status-container\">\n                    {isPending ? (\n                        <span className=\"pending\">\n                            <Trans i18nKey=\"main:pending\" />\n                        </span>\n                    ) : (\n                        <span className=\"confirmed\">\n                            <Trans i18nKey=\"main:confirmed\" />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    private renderQuantity = (history: {\n        assetType: string;\n        inputQuantities: U64;\n        outputQuantities: U64;\n        burnQuantities: U64;\n    }) => {\n        if (\n            history.outputQuantities.gt(\n                U64.plus(history.inputQuantities, history.burnQuantities)\n            )\n        ) {\n            const quantity = U64.minus(\n                history.outputQuantities,\n                U64.plus(history.inputQuantities, history.burnQuantities)\n            );\n            return `+${quantity.toLocaleString()}`;\n        } else {\n            const quantity = U64.minus(\n                U64.plus(history.inputQuantities, history.burnQuantities),\n                history.outputQuantities\n            );\n            return `-${quantity.toLocaleString()}`;\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const assetScheme =\n        state.assetReducer.assetScheme[ownProps.history.assetType];\n    return {\n        assetScheme: assetScheme && assetScheme.data\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetTxItemEntity));\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { NetworkId } from \"../../../model/address\";\nimport { TxUtil } from \"../../../utils/transaction\";\nimport \"./AssetTxItem.css\";\nimport AssetTxItemEntity from \"./AssetTxItemEntity\";\n\ninterface Props {\n    tx: TransactionDoc;\n    isPending: boolean;\n    timestamp: number;\n    address: string;\n    networkId: NetworkId;\n}\n\nexport default class AssetTxItem extends React.Component<Props, any> {\n    public render() {\n        const { tx, address, networkId, isPending, timestamp } = this.props;\n        const assetHistory = TxUtil.getAggsAsset(address, tx);\n        return _.map(assetHistory, (history, index) => (\n            <AssetTxItemEntity\n                key={`${history.assetType}-${index}`}\n                tx={tx}\n                history={history}\n                index={index}\n                timestamp={timestamp}\n                isPending={isPending}\n                networkId={networkId}\n            />\n        ));\n    }\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TransactionDoc } from \"codechain-indexer-types\";\nimport { H160 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport Pagination from \"react-js-pagination\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport { getIdByAddressAssetType } from \"../../redux/chain/chainReducer\";\nimport \"./AssetTxHistory.css\";\nimport AssetTxItem from \"./AssetTxItem/AssetTxItem\";\nimport Empty from \"./img/cautiondisabled.svg\";\n\ninterface OwnProps {\n    address: string;\n    assetType?: H160;\n}\n\ninterface StateProps {\n    pendingTxList?: TransactionDoc[] | null;\n    txList?: TransactionDoc[] | null;\n    countOfTxList?: number | null;\n    networkId: NetworkId;\n}\n\ninterface DispatchProps {\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchTxListIfNeed: (address: string, page: number) => void;\n    fetchTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160,\n        page: number\n    ) => void;\n    fetchCountOfTxListIfNeed: (address: string) => void;\n    fetchCountOfTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160\n    ) => void;\n}\n\ninterface State {\n    activePage: number;\n}\n\ntype Props = WithTranslation & StateProps & OwnProps & DispatchProps;\n\nclass AssetTxHistory extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            activePage: 1\n        };\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const {\n            pendingTxList,\n            txList,\n            address,\n            networkId,\n            countOfTxList\n        } = this.props;\n        if (!pendingTxList || !txList || countOfTxList == null) {\n            return <div>Loading...</div>;\n        }\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        return (\n            <div className=\"Asset-tx-history\">\n                {validPendingTxList.length + txList.length === 0 && (\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div>\n                            <div className=\"text-center mt-3\">\n                                <img src={Empty} alt={\"empty\"} />\n                            </div>\n                            <div className=\"mt-3 empty\">\n                                <Trans i18nKey=\"send:asset.recent.empty\" />\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {_.map(validPendingTxList, pendingTx => (\n                    <AssetTxItem\n                        key={pendingTx.hash}\n                        tx={pendingTx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={true}\n                        timestamp={pendingTx.pendingTimestamp!}\n                    />\n                ))}\n                {_.map(txList, tx => (\n                    <AssetTxItem\n                        key={tx.hash}\n                        tx={tx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={false}\n                        timestamp={tx.timestamp!}\n                    />\n                ))}\n                {countOfTxList > 0 && (\n                    <div className=\"pagination-container\">\n                        <Pagination\n                            activePage={this.state.activePage}\n                            itemsCountPerPage={10}\n                            totalItemsCount={countOfTxList}\n                            pageRangeDisplayed={5}\n                            onChange={this.handlePageChange}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            prevPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            nextPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            firstPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-left\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                            lastPageText={\n                                <FontAwesomeIcon\n                                    icon=\"angle-double-right\"\n                                    className=\"navigation-icon\"\n                                />\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private handlePageChange = (pageNumber: number) => {\n        const {\n            address,\n            fetchTxListIfNeed,\n            fetchTxListByAssetTypeIfNeed,\n            assetType\n        } = this.props;\n        this.setState({ activePage: pageNumber });\n\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType, pageNumber);\n        } else {\n            fetchTxListIfNeed(address, pageNumber);\n        }\n    };\n\n    private init = async () => {\n        this.fetchAll();\n    };\n\n    private fetchAll = () => {\n        const {\n            address,\n            fetchPendingTxListIfNeed,\n            fetchTxListIfNeed,\n            assetType,\n            fetchTxListByAssetTypeIfNeed,\n            fetchCountOfTxListIfNeed,\n            fetchCountOfTxListByAssetTypeIfNeed\n        } = this.props;\n        const { activePage } = this.state;\n        fetchPendingTxListIfNeed(address);\n\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType, activePage);\n            fetchCountOfTxListByAssetTypeIfNeed(address, assetType);\n        } else {\n            fetchTxListIfNeed(address, activePage);\n            fetchCountOfTxListIfNeed(address);\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { address, assetType } = props;\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const txList = assetType\n        ? state.chainReducer.txListById[\n              getIdByAddressAssetType(address, assetType)\n          ]\n        : state.chainReducer.txList[address];\n    const countOfTxList = assetType\n        ? state.chainReducer.countOfTxListById[\n              getIdByAddressAssetType(address, assetType)\n          ]\n        : state.chainReducer.countOfTxList[address];\n    const networkId = state.globalReducer.networkId;\n    return {\n        pendingTxList: pendingTxList && pendingTxList.data,\n        txList: txList && txList.data,\n        countOfTxList: countOfTxList && countOfTxList.data,\n        networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchTxListIfNeed: (address: string, page: number) => {\n        dispatch(\n            chainActions.fetchTxListIfNeed(address, {\n                page,\n                itemsPerPage: 10,\n                force: true\n            })\n        );\n    },\n    fetchTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160,\n        page: number\n    ) => {\n        dispatch(\n            chainActions.fetchTxListByAssetTypeIfNeed(address, assetType, {\n                page,\n                itemsPerPage: 10,\n                force: true\n            })\n        );\n    },\n    fetchCountOfTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchCountOfTxListIfNeed(address));\n    },\n    fetchCountOfTxListByAssetTypeIfNeed: (address: string, assetType: H160) => {\n        dispatch(\n            chainActions.fetchCountOfTxListByAssetTypeIfNeed(address, assetType)\n        );\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetTxHistory));\n","import BigNumber from \"bignumber.js\";\nimport { AssetSchemeDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Col, Row } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport assetActions from \"../../redux/asset/assetActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport { ImageLoader } from \"../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../utils/metadata\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport AssetTxHistory from \"../AssetTxHistory/AssetTxHistory\";\nimport \"./AssetDetail.css\";\n\ninterface OwnProps {\n    match: match<{ address: string; assetType: string }>;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n    networkId: NetworkId;\n    availableAsset?: {\n        assetType: string;\n        quantities: U64;\n    } | null;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\n\nclass AssetDetail extends React.Component<Props, any> {\n    public async componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const {\n            assetScheme,\n            match: {\n                params: { assetType, address }\n            },\n            networkId,\n            availableAsset,\n            addressIndex,\n            t\n        } = this.props;\n        if (!assetScheme || !availableAsset) {\n            return null;\n        }\n\n        const metadata = parseMetadata(assetScheme.metadata);\n        return (\n            <div className=\"Asset-detail d-flex animated fadeIn\">\n                <div className=\"panel mx-auto\">\n                    <AddressContainer\n                        address={address}\n                        backButtonPath={`/${address}/assets`}\n                        addressIndex={addressIndex}\n                    />\n                    <div className=\"detail-history-container\">\n                        <h4 className=\"mr-auto\">\n                            <Trans i18nKey={\"asset:title\"} />\n                        </h4>\n                        <div className=\"d-flex mt-4 mb-4 align-itmes-center\">\n                            <ImageLoader\n                                className=\"asset-image\"\n                                data={assetType}\n                                size={65}\n                                isAssetImage={true}\n                                networkId={networkId}\n                            />\n                            <div className=\"ml-4 name-quantity-container\">\n                                <h4 className=\"mb-0\">\n                                    {metadata.name || \"None\"}\n                                </h4>\n                                <div className=\"mono asset-type\">\n                                    0x\n                                    {new H160(assetType).value}\n                                </div>\n                                <div>\n                                    <span className=\"total-text mr-3\">\n                                        <Trans i18nKey={\"asset:total\"} />\n                                    </span>\n                                    <span className=\"quantity-text number\">\n                                        {availableAsset.quantities.toLocaleString()}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className=\"info-container\">\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey={\"asset:description\"} />\n                                </Col>\n                                <Col md={10}>\n                                    {metadata.description || t(\"asset:none\")}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey=\"asset:approver\" />\n                                </Col>\n                                <Col md={10}>\n                                    {assetScheme.approver || t(\"asset:none\")}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey=\"asset:total_supply\" />\n                                </Col>\n                                <Col md={10}>\n                                    {new BigNumber(\n                                        assetScheme.supply\n                                    ).toFormat()}\n                                </Col>\n                            </Row>\n                        </div>\n                        <h4 className=\"mb-3\">\n                            <Trans i18nKey=\"asset:recent_transactions\" />\n                        </h4>\n                        <AssetTxHistory\n                            address={address}\n                            assetType={new H160(assetType)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private init = () => {\n        const {\n            match: {\n                params: { assetType, address }\n            }\n        } = this.props;\n        this.props.fetchAssetSchemeIfNeed(new H160(assetType));\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const {\n        match: {\n            params: { assetType, address }\n        }\n    } = ownProps;\n    const assetScheme =\n        state.assetReducer.assetScheme[new H160(assetType).value];\n    const networkId = state.globalReducer.networkId;\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const availableAsset = _.find(\n        availableAssets,\n        asset => asset.assetType === new H160(assetType).value\n    );\n    const assetAddress = _.find(\n        state.walletReducer.assetAddresses,\n        aa => aa.address === address\n    );\n    return {\n        assetScheme: assetScheme && assetScheme.data,\n        networkId,\n        availableAsset,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetDetail));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { AssetSchemeDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../../utils/metadata\";\nimport \"./AssetItem.css\";\n\ninterface OwnProps {\n    assetType: string;\n    quantities: U64;\n    networkId: NetworkId;\n    address: string;\n\n    isSelected: boolean;\n    onSelect: (assetType: string) => void;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n}\n\ntype Props = RouteComponentProps & OwnProps & StateProps & DispatchProps;\n\nclass AssetItem extends React.Component<Props, any> {\n    public constructor(props: Props) {\n        super(props);\n    }\n    public componentDidMount() {\n        this.props.fetchAssetSchemeIfNeed(new H160(this.props.assetType));\n    }\n    public render() {\n        const {\n            assetType,\n            quantities,\n            networkId,\n            isSelected,\n            assetScheme\n        } = this.props;\n        let metadata;\n        if (assetScheme) {\n            metadata = parseMetadata(assetScheme.metadata);\n        }\n        return (\n            <div\n                onClick={this.handleClick}\n                className={`Asset-item animated-fadeIn ${isSelected &&\n                    \"selected\"}`}\n            >\n                <div className=\"d-flex align-items-center\">\n                    <div className=\"image-container\">\n                        <ImageLoader\n                            data={assetType}\n                            size={48}\n                            isAssetImage={true}\n                            networkId={networkId}\n                        />\n                    </div>\n                    <div className=\"name-container\">\n                        <span className=\"mb-0 asset-name\">\n                            {(metadata && metadata.name) ||\n                                `...${assetType.slice(\n                                    assetType.length - 8,\n                                    assetType.length\n                                )}`}\n                        </span>\n                    </div>\n                    <span className=\"mb-0 number asset-quantities\">\n                        {quantities.toLocaleString()}\n                    </span>\n                    <div onClick={this.handleClickInfo} className=\"info-icon\">\n                        <FontAwesomeIcon icon=\"info-circle\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private handleClick = () => {\n        const { assetType, onSelect } = this.props;\n        onSelect(assetType);\n    };\n\n    private handleClickInfo = () => {\n        const { assetType, address } = this.props;\n        this.props.history.push(`/${address}/${assetType}`);\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const assetScheme = state.assetReducer.assetScheme[ownProps.assetType];\n    return {\n        assetScheme: assetScheme && assetScheme.data\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(AssetItem));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport ValidationInput from \"../../../../ValidationInput/ValidationInput\";\n\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport \"./ReceiverItem.css\";\n\ninterface OwnProps {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    remainingAsset: U64;\n    onAddressChange: (index: number, address: string) => void;\n    onQuantityChange: (index: number, quantity: string) => void;\n    onAddressValidationCheck: (index: number) => void;\n    onQuantityValidationCheck: (index: number) => void;\n    isAddressValid?: boolean;\n    isQuantityValid?: boolean;\n    addressError?: string;\n    quantityError?: string;\n    index: number;\n    onRemove: (index: number) => void;\n    hideCancel?: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass ReceiverItem extends React.Component<Props> {\n    public render() {\n        const {\n            t,\n            receiver,\n            index,\n            isAddressValid,\n            isQuantityValid,\n            addressError,\n            quantityError,\n            hideCancel\n        } = this.props;\n        return (\n            <div className=\"Receiver-item animated fadeIn\">\n                <div className=\"d-flex align-items-end\">\n                    {!hideCancel && (\n                        <span className=\"mr-auto receiver-item-index\">\n                            {index + 1}\n                        </span>\n                    )}\n                    {!hideCancel && (\n                        <span\n                            className=\"receiver-item-cancel\"\n                            onClick={this.handleRemove}\n                        >\n                            {t(\"send:asset.remove\")}{\" \"}\n                            <FontAwesomeIcon icon=\"times\" />\n                        </span>\n                    )}\n                </div>\n                <ValidationInput\n                    value={receiver.address}\n                    onChange={this.handleChangeAddressInput}\n                    labelText={t(\"send:asset.receiver.label\")}\n                    placeholder={t(\"send:asset.receiver.placeholder\")}\n                    showValidation={true}\n                    isValid={isAddressValid}\n                    onBlur={this.handleBlurAddressInput}\n                    error={addressError}\n                />\n                <div className=\"d-flex align-items-end\">\n                    <ValidationInput\n                        value={receiver.quantity}\n                        onChange={this.handleChangeQuantitiesInput}\n                        labelText={t(\"send:asset.quantity.label\")}\n                        placeholder={t(\"send:asset.quantity.placeholder\")}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isQuantityValid}\n                        onBlur={this.handleBlurQuantityInput}\n                        error={quantityError}\n                        decimalScale={0}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary max-btn\"\n                        onClick={this.handleMaxValueClick}\n                    >\n                        <Trans i18nKey=\"main:max\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleRemove = () => {\n        const { index, onRemove } = this.props;\n        onRemove(index);\n    };\n\n    private handleBlurAddressInput = () => {\n        const { index, onAddressValidationCheck } = this.props;\n        onAddressValidationCheck(index);\n    };\n\n    private handleBlurQuantityInput = () => {\n        const { index, onQuantityValidationCheck } = this.props;\n        onQuantityValidationCheck(index);\n    };\n\n    private handleMaxValueClick = () => {\n        const { index, onQuantityChange, remainingAsset } = this.props;\n        onQuantityChange(index, remainingAsset.toString(10));\n    };\n\n    private handleChangeAddressInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { index, onAddressChange } = this.props;\n        onAddressChange(index, event.target.value);\n    };\n\n    private handleChangeQuantitiesInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { index, onQuantityChange } = this.props;\n        onQuantityChange(index, event.target.value);\n    };\n}\n\nexport default withTranslation()(ReceiverItem);\n","import BigNumber from \"bignumber.js\";\nimport { AssetTransferAddress, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { WalletAddress } from \"../../../../model/address\";\nimport { ReducerConfigure } from \"../../../../redux\";\nimport accountActions from \"../../../../redux/account/accountActions\";\nimport walletActions from \"../../../../redux/wallet/walletActions\";\nimport TooltipLabel from \"../../../TooltipLabel\";\nimport ValidationInput from \"../../../ValidationInput/ValidationInput\";\nimport \"./ReceiverContainer.css\";\nimport ReceiverItem from \"./ReceiverItem/ReceiverItem\";\n\ninterface State {\n    receivers: {\n        address: string;\n        quantity: string;\n    }[];\n    addressValidations: {\n        [index: number]:\n            | {\n                  isAddressValid?: boolean;\n                  addressError?: string;\n              }\n            | undefined;\n    };\n    quantityValidations: {\n        [index: number]:\n            | {\n                  isQuantityValid?: boolean;\n                  quantityError?: string;\n              }\n            | undefined;\n    };\n    fee: string;\n    feePayer?: string;\n    isFeeValid?: boolean;\n    feeError?: string;\n    memo: string;\n    memoError?: string;\n    isMemoValid?: boolean;\n}\n\ninterface OwnProps {\n    address: string;\n    totalQuantity: U64;\n    onSubmit: (\n        receivers: { address: string; quantity: U64 }[],\n        memo: string,\n        fee?: {\n            payer: string;\n            quantity: U64;\n        } | null\n    ) => void;\n    gatewayURL?: string | null;\n    isSendingTx: boolean;\n}\n\ninterface StateProps {\n    platformAddresses?: WalletAddress[] | null;\n    availableQuarkList: { [address: string]: U64 | null | undefined };\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    fetchAvailableQuark: (address: string) => void;\n}\n\ntype Props = WithTranslation & OwnProps & DispatchProps & StateProps;\n\nconst MinimumFee = 100;\nclass ReceiverContainer extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            receivers: [\n                {\n                    address: \"\",\n                    quantity: \"\"\n                }\n            ],\n            addressValidations: {},\n            quantityValidations: {},\n            fee: \"\",\n            feePayer: undefined,\n            isFeeValid: undefined,\n            feeError: undefined,\n            memo: \"\",\n            memoError: undefined,\n            isMemoValid: undefined\n        };\n    }\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n        if (this.props.platformAddresses) {\n            if (this.props.platformAddresses.length > 0) {\n                this.selectFeePayer(this.props.platformAddresses[0].address);\n            }\n        }\n    }\n    public componentWillUpdate(nextProps: Props) {\n        if (!this.props.platformAddresses && nextProps.platformAddresses) {\n            if (nextProps.platformAddresses) {\n                if (nextProps.platformAddresses.length > 0) {\n                    this.selectFeePayer(nextProps.platformAddresses[0].address);\n                }\n            }\n        }\n    }\n    public render() {\n        const {\n            receivers,\n            addressValidations,\n            quantityValidations,\n            fee,\n            feePayer,\n            isFeeValid,\n            feeError,\n            memo,\n            memoError,\n            isMemoValid\n        } = this.state;\n        const {\n            t,\n            platformAddresses,\n            gatewayURL,\n            availableQuarkList,\n            isSendingTx\n        } = this.props;\n        if (!platformAddresses) {\n            return <span>Loading...</span>;\n        }\n        return (\n            <div className=\"Receiver-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"receivers\">\n                        {_.map(receivers, (receiver, index) => (\n                            <ReceiverItem\n                                hideCancel={receivers.length === 1}\n                                key={`receiver-${index}`}\n                                receiver={receiver}\n                                onAddressChange={this.handleAddressChange}\n                                onQuantityChange={this.handleQuantityChange}\n                                remainingAsset={this.calculateRemainingAsset(\n                                    index\n                                )}\n                                index={index}\n                                onAddressValidationCheck={\n                                    this.handleAddressValidationCheck\n                                }\n                                onQuantityValidationCheck={\n                                    this.handleQuantityValidationCheck\n                                }\n                                isAddressValid={\n                                    addressValidations[index] &&\n                                    addressValidations[index]!.isAddressValid\n                                }\n                                isQuantityValid={\n                                    quantityValidations[index] &&\n                                    quantityValidations[index]!.isQuantityValid\n                                }\n                                addressError={\n                                    addressValidations[index] &&\n                                    addressValidations[index]!.addressError\n                                }\n                                quantityError={\n                                    quantityValidations[index] &&\n                                    quantityValidations[index]!.quantityError\n                                }\n                                onRemove={this.handleRemoveReceiver}\n                            />\n                        ))}\n                    </div>\n                    {receivers.length < 10 && (\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-primary add-receiver-btn\"\n                                onClick={this.handleAddReceiver}\n                            >\n                                <Trans i18nKey=\"send:asset.add\" />\n                            </button>\n                        </div>\n                    )}\n                    <div className=\"memo-container\">\n                        <ValidationInput\n                            labelText={t(\"send:asset.memo.label\")}\n                            value={memo}\n                            isValid={isMemoValid}\n                            error={memoError}\n                            showValidation={true}\n                            placeholder={t(\"send:asset.memo.placeholder\")}\n                            onBlur={this.checkMemo}\n                            onChange={this.handleChangeMemo}\n                        />\n                    </div>\n                    {gatewayURL == null && (\n                        <div className=\"d-flex fee-container\">\n                            <div className=\"fee-input-container\">\n                                <ValidationInput\n                                    value={fee}\n                                    onChange={this.handleChangeFee}\n                                    showValidation={true}\n                                    labelText={t(\"send:asset.fee.label\")}\n                                    type=\"number\"\n                                    decimalScale={0}\n                                    placeholder={\n                                        !feePayer\n                                            ? \"select payer\"\n                                            : !availableQuarkList[feePayer]\n                                            ? \"loading...\"\n                                            : \"100 (CCC)\"\n                                    }\n                                    tooltip=\"send:asset.fee.tooltip\"\n                                    disable={\n                                        feePayer == null ||\n                                        (feePayer != null &&\n                                            availableQuarkList[feePayer] ==\n                                                null)\n                                    }\n                                    onBlur={this.checkFeeValidation}\n                                    isValid={isFeeValid}\n                                    error={feeError}\n                                />\n                            </div>\n                            <div className=\"fee-payer-container\">\n                                <div className=\"payer-label\">\n                                    <Trans i18nKey=\"send:asset.payer.label\" />\n                                    <TooltipLabel tooltip=\"send:asset.payer.tooltip\" />\n                                </div>\n                                {platformAddresses.length === 0 ? (\n                                    <select\n                                        className=\"form-control\"\n                                        disabled={true}\n                                    >\n                                        <option>\n                                            {t(\"send:asset.payer.empty\")}\n                                        </option>\n                                    </select>\n                                ) : (\n                                    <div>\n                                        <select\n                                            className=\"form-control\"\n                                            value={feePayer}\n                                            defaultValue={\"default\"}\n                                            onChange={this.handleChangeFeePayer}\n                                        >\n                                            <option\n                                                value=\"default\"\n                                                disabled={true}\n                                            >\n                                                {t(\"send:asset.payer.select\")}\n                                            </option>\n                                            {_.map(platformAddresses, pa => (\n                                                <option\n                                                    value={pa.address}\n                                                    key={pa.address}\n                                                >\n                                                    CCC{\" \"}\n                                                    {t(\"main:address\", {\n                                                        index: pa.index + 1\n                                                    })}\n                                                </option>\n                                            ))}\n                                        </select>\n                                        {feePayer &&\n                                            availableQuarkList[feePayer] && (\n                                                <span className=\"available-ccc-text number pl-2 pr-2\">\n                                                    {availableQuarkList[\n                                                        feePayer\n                                                    ]!.toLocaleString()}\n                                                    CCC\n                                                </span>\n                                            )}\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"submit-btn-container\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary square w-100 send-btn\"\n                            disabled={isSendingTx}\n                        >\n                            <Trans i18nKey=\"send:asset.button\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    private handleChangeFeePayer = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.selectFeePayer(event.target.value);\n    };\n\n    private selectFeePayer = (address: string) => {\n        this.setState({\n            feePayer: address,\n            fee: `${MinimumFee}`,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n        this.props.fetchAvailableQuark(address);\n    };\n\n    private handleChangeMemo = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            memo: event.target.value\n        });\n    };\n\n    private checkMemo = () => {\n        const { t } = this.props;\n        const { memo } = this.state;\n        if (memo.length > 25) {\n            this.setState({\n                isMemoValid: false,\n                memoError: t(\"send:asset.error.memo.maximum\")\n            });\n            return false;\n        }\n        this.setState({\n            isMemoValid: true,\n            memoError: undefined\n        });\n        return true;\n    };\n\n    private checkFeeValidation = () => {\n        const { fee, feePayer } = this.state;\n        const { t, availableQuarkList } = this.props;\n\n        if (!feePayer) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.not_selected\")\n            });\n            return false;\n        }\n        const availableQuark = availableQuarkList[feePayer];\n        if (!availableQuark) {\n            throw Error(t(\"send:asset.error.fee.invalid_balance\"));\n        }\n        if (fee === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.minimum\", {\n                    minimum: MinimumFee\n                })\n            });\n            return false;\n        }\n\n        if (availableQuark.value.lt(amountFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.not_enough\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleChangeFee = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            fee: event.target.value\n        });\n    };\n\n    private handleRemoveReceiver = (myIndex: number) => {\n        const { receivers } = this.state;\n        const receiversExceptIndex = _.clone(receivers);\n        _.pullAt(receiversExceptIndex, myIndex);\n        this.setState({\n            receivers: receiversExceptIndex\n        });\n    };\n\n    private handleAddReceiver = () => {\n        this.setState({\n            receivers: [...this.state.receivers, { address: \"\", quantity: \"\" }]\n        });\n    };\n\n    private calculateRemainingAsset = (myIndex: number) => {\n        const { receivers } = this.state;\n        const { totalQuantity } = this.props;\n        const receiversExceptIndex = _.clone(receivers);\n        _.pullAt(receiversExceptIndex, myIndex);\n        const currentTotal = _.reduce(\n            receiversExceptIndex,\n            (memo, receiver) =>\n                U64.plus(\n                    memo,\n                    receiver.quantity === \"\" ? 0 : receiver.quantity\n                ),\n            new U64(0)\n        );\n\n        const remainingAsset = U64.minus(totalQuantity, currentTotal);\n        if (remainingAsset.gt(0)) {\n            return remainingAsset;\n        }\n        return new U64(0);\n    };\n\n    private handleAddressValidationCheck = (index: number) => {\n        const { receivers } = this.state;\n        const { t, address: myAddress } = this.props;\n        const address = receivers[index].address;\n        if (address === \"\") {\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: false,\n                        addressError: t(\"send:asset.error.receiver.required\")\n                    }\n                }\n            });\n            return false;\n        }\n        if (address === myAddress) {\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: false,\n                        addressError: t(\n                            \"send:asset.error.receiver.not_available\"\n                        )\n                    }\n                }\n            });\n            return false;\n        }\n        try {\n            AssetTransferAddress.fromString(address);\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: true,\n                        addressError: undefined\n                    }\n                }\n            });\n            return true;\n        } catch (e) {\n            // nothing\n        }\n        this.setState({\n            addressValidations: {\n                ...this.state.addressValidations,\n                [index]: {\n                    ...this.state.addressValidations[index],\n                    isAddressValid: false,\n                    addressError: t(\"send:asset.error.receiver.invalid\")\n                }\n            }\n        });\n        return false;\n    };\n\n    private handleQuantityValidationCheck = (index: number) => {\n        const { receivers } = this.state;\n        const { t, totalQuantity } = this.props;\n        const quantityString = this.state.receivers[index].quantity;\n        if (quantityString === \"\") {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.required\")\n                    }\n                }\n            });\n            return false;\n        }\n        const quantity = new BigNumber(quantityString);\n        if (quantity.isNaN()) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.invalid\")\n                    }\n                }\n            });\n            return false;\n        }\n        if (quantity.lte(0)) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.minimum\")\n                    }\n                }\n            });\n            return false;\n        }\n        const currentTotal = _.reduce(\n            receivers,\n            (memo, receiver) =>\n                U64.plus(\n                    memo,\n                    receiver.quantity === \"\" ? 0 : receiver.quantity\n                ),\n            new U64(0)\n        );\n        if (currentTotal.gt(totalQuantity)) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.not_enough\")\n                    }\n                }\n            });\n            return false;\n        }\n        this.setState({\n            quantityValidations: {\n                ...this.state.quantityValidations,\n                [index]: {\n                    ...this.state.quantityValidations[index],\n                    isQuantityValid: true,\n                    quantityError: undefined\n                }\n            }\n        });\n        return true;\n    };\n\n    private handleAddressChange = (newIndex: number, address: string) => {\n        const { receivers } = this.state;\n        const newReceivers = _.map(receivers, (receiver, index) => {\n            if (index === newIndex) {\n                return {\n                    address,\n                    quantity: receiver.quantity\n                };\n            }\n            return receiver;\n        });\n        this.setState({\n            receivers: newReceivers,\n            addressValidations: {\n                ...this.state.addressValidations,\n                [newIndex]: {\n                    ...this.state.addressValidations[newIndex],\n                    isAddressValid: undefined,\n                    addressError: undefined\n                }\n            }\n        });\n    };\n\n    private handleQuantityChange = (newIndex: number, quantity: string) => {\n        const { receivers } = this.state;\n        const newReceivers = _.map(receivers, (receiver, index) => {\n            if (index === newIndex) {\n                return {\n                    address: receiver.address,\n                    quantity\n                };\n            }\n            return receiver;\n        });\n        this.setState({\n            receivers: newReceivers,\n            quantityValidations: {\n                ...this.state.quantityValidations,\n                [newIndex]: {\n                    ...this.state.quantityValidations[newIndex],\n                    isQuantityValid: undefined,\n                    quantityError: undefined\n                }\n            }\n        });\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { gatewayURL } = this.props;\n        const { receivers, fee, feePayer, memo } = this.state;\n\n        for (let i = 0; i < receivers.length; i++) {\n            if (!this.handleAddressValidationCheck(i)) {\n                return;\n            }\n            if (!this.handleQuantityValidationCheck(i)) {\n                return;\n            }\n        }\n\n        if (!this.checkMemo()) {\n            return;\n        }\n\n        const returnValue = receivers.map(r => ({\n            address: r.address,\n            quantity: new U64(r.quantity)\n        }));\n        if (gatewayURL == null) {\n            if (!this.checkFeeValidation()) {\n                return;\n            }\n            this.props.onSubmit(returnValue, memo, {\n                payer: feePayer!,\n                quantity: new U64(fee)\n            });\n        } else {\n            this.props.onSubmit(returnValue, memo);\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => {\n    const platformAddresses = state.walletReducer.platformAddresses;\n    const availableQuarkList = state.accountReducer.availableQuark;\n    return {\n        platformAddresses,\n        availableQuarkList\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    },\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(ReceiverContainer));\n","import { Action as ReduxAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { NetworkId } from \"../../model/address\";\nimport {\n    clearPassphrase,\n    saveNetworkId,\n    savePassphrase\n} from \"../../utils/storage\";\nimport { ActionType as WalletActions } from \"../wallet/walletActions\";\n\nexport type Action = Login | ClearData | Logout | UpdateNetwork;\n\nexport enum ActionType {\n    Login = \"Login\",\n    ClearData = \"ClearData\",\n    Logout = \"Logout\",\n    UpdateNetwork = \"UpdateNetwork\"\n}\n\nexport interface Login {\n    type: ActionType.Login;\n    data: {\n        passphrase: string;\n    };\n}\n\nexport interface ClearData {\n    type: ActionType.ClearData;\n}\n\nexport interface Logout {\n    type: ActionType.Logout;\n}\n\nexport interface UpdateNetwork {\n    type: ActionType.UpdateNetwork;\n    data: {\n        networkId: NetworkId;\n    };\n}\n\nconst updateNetworkId = (networkId: NetworkId) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, ReduxAction>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch({\n            type: WalletActions.ClearWalletAddresses\n        });\n        dispatch({\n            type: ActionType.UpdateNetwork,\n            data: {\n                networkId\n            }\n        });\n        saveNetworkId(networkId);\n    };\n};\n\nconst login = (passphrase: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        savePassphrase(passphrase);\n        dispatch({\n            type: ActionType.Login,\n            data: {\n                passphrase\n            }\n        });\n    };\n};\n\nconst logout = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        clearPassphrase();\n        dispatch(clearData());\n        dispatch({\n            type: ActionType.Logout\n        });\n    };\n};\n\nconst clearData = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch({\n            type: ActionType.ClearData\n        });\n    };\n};\n\nexport default {\n    login,\n    logout,\n    clearData,\n    updateNetworkId\n};\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport {\n    Asset,\n    AssetTransferAddress,\n    AssetTransferOutput,\n    H160,\n    SignedTransaction,\n    Transaction,\n    U64\n} from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../../../model/keystore\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { getIdForCacheUTXO } from \"../../../redux/asset/assetReducer\";\nimport chainActions from \"../../../redux/chain/chainActions\";\nimport walletActions from \"../../../redux/wallet/walletActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport * as Metadata from \"../../../utils/metadata\";\nimport { getCodeChainHost } from \"../../../utils/network\";\nimport { getAssetKeys, getPlatformKeys } from \"../../../utils/storage\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport ReceiverContainer from \"./ReceiverContainer/ReceiverContainer\";\nimport \"./SendAsset.css\";\n\ninterface OwnProps {\n    address: string;\n    selectedAssetType: string;\n    onClose: () => void;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n    UTXOList?: UTXODoc[] | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n    passphrase: string;\n    assetAddresses?: WalletAddress[] | null;\n    platformAddresses?: WalletAddress[] | null;\n}\n\ninterface State {\n    isSendingTx: boolean;\n    isSentTx: boolean;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchUTXOListIfNeed: (address: string, assetType: H160) => void;\n    sendTransactionByGateway: (\n        address: string,\n        transferTx: Transaction,\n        gatewayURL: string\n    ) => Promise<unknown>;\n    fetchWalletFromStorageIfNeed: () => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => Promise<unknown>;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass SendAsset extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isSendingTx: false,\n            isSentTx: false\n        };\n    }\n    public render() {\n        const { onClose } = this.props;\n        const { isSendingTx, isSentTx } = this.state;\n        const {\n            assetScheme,\n            selectedAssetType: assetType,\n            networkId,\n            address\n        } = this.props;\n        const {\n            availableAssets,\n            UTXOList,\n            platformAddresses,\n            assetAddresses\n        } = this.props;\n        if (\n            !assetScheme ||\n            !UTXOList ||\n            !availableAssets ||\n            !platformAddresses ||\n            !assetAddresses\n        ) {\n            return (\n                <div>\n                    <div className=\"Send-asset\">\n                        <div className=\"loading-container\" />\n                    </div>\n                </div>\n            );\n        }\n        const availableAsset = _.find(\n            availableAssets,\n            a => a.assetType === assetType\n        );\n        const metadata = Metadata.parseMetadata(assetScheme.metadata);\n        return (\n            <div className=\"Send-asset animated fadeIn\">\n                <div className=\"cancel-icon-container\" onClick={onClose}>\n                    <FontAwesomeIcon className=\"cancel-icon\" icon=\"times\" />\n                </div>\n                <h2 className=\"title\">\n                    <Trans i18nKey=\"send:asset.title\" />\n                </h2>\n                {isSentTx ? (\n                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                        <div className=\"text-center\">\n                            <div>\n                                <img src={CheckIcon} alt={\"check\"} />\n                            </div>\n                            <div className=\"mt-3\">\n                                <span>\n                                    <Trans i18nKey=\"send:asset.complete\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className=\"d-flex align-items-center asset-info-item mb-5\">\n                            <ImageLoader\n                                className=\"asset-info-icon\"\n                                data={assetType}\n                                isAssetImage={true}\n                                networkId={networkId}\n                                size={50}\n                            />\n                            <span className=\"name ml-3 mr-auto\">\n                                {metadata.name ||\n                                    `...${assetType.slice(\n                                        assetType.length - 6,\n                                        assetType.length\n                                    )}`}\n                            </span>\n                            <span className=\"quantity number\">\n                                {availableAsset\n                                    ? availableAsset.quantities.toLocaleString()\n                                    : 0}\n                            </span>\n                        </div>\n                        <ReceiverContainer\n                            address={address}\n                            onSubmit={this.handleSubmit}\n                            totalQuantity={\n                                availableAsset\n                                    ? availableAsset.quantities\n                                    : new U64(0)\n                            }\n                            isSendingTx={isSendingTx}\n                            gatewayURL={\n                                metadata.gateway && metadata.gateway.url\n                            }\n                        />\n                    </div>\n                )}\n                {isSendingTx && (\n                    <div className=\"sending-panel d-flex align-items-center justify-content-center\">\n                        <Spinner name=\"line-scale\" color=\"white\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    public updateWindowDimensions = () => {\n        if (window.innerWidth <= 872) {\n            this.addModalOpenClass();\n        } else {\n            this.removeModalOpenClass();\n        }\n    };\n\n    public async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.removeModalOpenClass();\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    private addModalOpenClass = () => {\n        document.body.className = \"modal-open\";\n    };\n\n    private removeModalOpenClass = () => {\n        document.body.className = \"\";\n    };\n\n    private init = () => {\n        const { selectedAssetType, address } = this.props;\n        this.props.fetchAssetSchemeIfNeed(new H160(selectedAssetType));\n        this.props.fetchUTXOListIfNeed(address, new H160(selectedAssetType));\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n\n    private handleSubmit = async (\n        receivers: { address: string; quantity: U64 }[],\n        memo: string,\n        fee?: {\n            payer: string;\n            quantity: U64;\n        } | null\n    ) => {\n        const { UTXOList } = this.props;\n        const {\n            t,\n            selectedAssetType: assetType,\n            address,\n            networkId,\n            passphrase,\n            assetAddresses,\n            platformAddresses,\n            assetScheme\n        } = this.props;\n\n        if (!assetAddresses || !platformAddresses || !assetScheme) {\n            return;\n        }\n\n        const sumOfSendingAsset = _.reduce(\n            receivers,\n            (m, receiver) => U64.plus(m, receiver.quantity),\n            new U64(0)\n        );\n\n        const inputUTXO = [];\n        let inputUTXOSum = new U64(0);\n        for (const utxo of UTXOList!) {\n            inputUTXO.push(utxo);\n            inputUTXOSum = U64.plus(inputUTXOSum, utxo.quantity);\n            if (inputUTXOSum.gte(sumOfSendingAsset)) {\n                break;\n            }\n        }\n\n        const sdk = new SDK({\n            server: getCodeChainHost(networkId),\n            networkId\n        });\n        const ccKey = await getCCKey();\n\n        const storedPlatformKeys = getPlatformKeys(networkId);\n        const storedAssetKeys = getAssetKeys(networkId);\n        const seedHash = await getFirstSeedHash();\n\n        const platformKeyMapping = _.reduce(\n            storedPlatformKeys,\n            (m, storedPlatformKey) => {\n                return {\n                    ...m,\n                    [storedPlatformKey.key]: {\n                        seedHash,\n                        path: getPlatformAddressPath(\n                            storedPlatformKey.pathIndex\n                        )\n                    }\n                };\n            },\n            {}\n        );\n\n        const assetKeyMapping = _.reduce(\n            storedAssetKeys,\n            (m, storedAssetKey) => {\n                return {\n                    ...m,\n                    [storedAssetKey.key]: {\n                        seedHash,\n                        path: getAssetAddressPath(storedAssetKey.pathIndex)\n                    }\n                };\n            },\n            {}\n        );\n\n        const keyStore = new LocalKeyStore(ccKey, {\n            platform: platformKeyMapping,\n            asset: assetKeyMapping\n        });\n\n        const inputAssets = _.map(inputUTXO, utxo => {\n            return Asset.fromJSON({\n                assetType: utxo.assetType,\n                lockScriptHash: utxo.lockScriptHash,\n                parameters: utxo.parameters,\n                quantity: utxo.quantity,\n                tracker: utxo.transactionTracker,\n                transactionOutputIndex: utxo.transactionOutputIndex,\n                orderHash: utxo.orderHash,\n                shardId: utxo.shardId\n            }).createTransferInput();\n        });\n        const outputData = _.map(receivers, receiver => {\n            return {\n                recipient: receiver.address,\n                quantity: receiver.quantity,\n                shardId: 0, // FIXME: Add a valid data\n                assetType\n            };\n        });\n\n        const refundAmount = U64.minus(inputUTXOSum, sumOfSendingAsset);\n        if (refundAmount.gt(0)) {\n            outputData.push({\n                recipient: address,\n                quantity: refundAmount,\n                assetType,\n                shardId: 0\n            });\n        }\n        const outputs = _.map(\n            outputData,\n            o =>\n                new AssetTransferOutput({\n                    recipient: AssetTransferAddress.fromString(o.recipient),\n                    quantity: o.quantity,\n                    shardId: 0, // FIXME: Add a valid data\n                    assetType: new H160(o.assetType)\n                })\n        );\n        const transferTx = sdk.core.createTransferAssetTransaction({\n            inputs: inputAssets,\n            outputs,\n            metadata: memo\n        });\n        try {\n            await Promise.all(\n                _.map(inputAssets, (_A, index) => {\n                    return sdk.key.signTransactionInput(transferTx, index, {\n                        keyStore,\n                        passphrase\n                    });\n                })\n            );\n        } catch (e) {\n            if (e.message === \"DecryptionFailed\") {\n                toast.error(t(\"send:asset.error.password.wrong\"), {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    autoClose: 5000,\n                    closeButton: false,\n                    hideProgressBar: true\n                });\n            }\n            console.log(e);\n            return;\n        }\n        const metadata = Metadata.parseMetadata(assetScheme.metadata);\n\n        this.setState({ isSendingTx: true });\n        if (metadata.gateway && metadata.gateway.url) {\n            try {\n                await this.props.sendTransactionByGateway(\n                    address,\n                    transferTx,\n                    metadata.gateway.url\n                );\n                this.setState({ isSentTx: true });\n            } catch (e) {\n                toast.error(t(\"send:asset.error.gateway.unauthorized\"), {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    closeButton: false,\n                    hideProgressBar: true,\n                    autoClose: false\n                });\n                console.error(e);\n            }\n        } else {\n            const feePayer = fee!.payer;\n            const seq = await sdk.rpc.chain.getSeq(feePayer);\n            const {\n                transactions\n            } = await sdk.rpc.chain.getPendingTransactions();\n            const newSeq =\n                seq +\n                transactions.filter(\n                    tx =>\n                        tx.getSignerAddress({ networkId }).toString() ===\n                        feePayer\n                ).length;\n            const signedTransaction = await sdk.key.signTransaction(\n                transferTx,\n                {\n                    account: feePayer,\n                    keyStore,\n                    fee: fee!.quantity,\n                    seq: newSeq,\n                    passphrase\n                }\n            );\n            try {\n                await this.props.sendSignedTransaction(\n                    address,\n                    signedTransaction,\n                    feePayer\n                );\n                this.setState({ isSentTx: true });\n            } catch (e) {\n                toast.error(\"Server is not responding.\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    autoClose: 5000,\n                    closeButton: false,\n                    hideProgressBar: true\n                });\n                console.error(e);\n            }\n        }\n        this.setState({ isSendingTx: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const { selectedAssetType, address } = ownProps;\n    const assetScheme =\n        state.assetReducer.assetScheme[new H160(selectedAssetType).value];\n    const id = getIdForCacheUTXO(address, new H160(selectedAssetType));\n    const UTXOList = state.assetReducer.UTXOList[id];\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const networkId = state.globalReducer.networkId;\n    const passphrase = state.globalReducer.passphrase!;\n    const assetAddresses = state.walletReducer.assetAddresses;\n    const platformAddresses = state.walletReducer.platformAddresses;\n    return {\n        assetScheme: assetScheme && assetScheme.data,\n        UTXOList: UTXOList && UTXOList.data,\n        availableAssets,\n        networkId,\n        passphrase,\n        platformAddresses,\n        assetAddresses\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    sendTransactionByGateway: (\n        address: string,\n        transferTx: Transaction,\n        gatewayURL: string\n    ) => {\n        return dispatch(\n            chainActions.sendTransactionByGateway(\n                address,\n                transferTx,\n                gatewayURL\n            )\n        );\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(\n                address,\n                signedTransaction,\n                feePayer\n            )\n        );\n    },\n    fetchUTXOListIfNeed: (address: string, assetType: H160) => {\n        dispatch(assetActions.fetchUTXOListIfNeed(address, assetType));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(SendAsset));\n","import { AggsUTXODoc, TransactionDoc } from \"codechain-indexer-types\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport assetActions from \"../../redux/asset/assetActions\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport AssetTxHistory from \"../AssetTxHistory/AssetTxHistory\";\nimport AssetItem from \"./AssetItem/AssetItem\";\nimport \"./AssetList.css\";\nimport Empty from \"./img/cautiondisabled.svg\";\nimport SendAsset from \"./SendAsset/SendAsset\";\n\ninterface OwnProps {\n    match: match<{ address: string }>;\n}\n\ninterface StateProps {\n    addressUTXOList?: AggsUTXODoc[] | null;\n    pendingTxList?: TransactionDoc[] | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAggsUTXOListIfNeed: (address: string) => void;\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ninterface State {\n    selectedAssetType?: string | null;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass AssetList extends React.Component<Props, State> {\n    private refresher: any;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            selectedAssetType: undefined\n        };\n    }\n    public componentWillReceiveProps(props: Props) {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            match: {\n                params: { address: nextAddress }\n            }\n        } = props;\n        if (nextAddress !== address) {\n            this.setState({ selectedAssetType: undefined });\n            this.init();\n        }\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    public render() {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            addressUTXOList,\n            pendingTxList,\n            availableAssets,\n            networkId,\n            addressIndex\n        } = this.props;\n        const { selectedAssetType } = this.state;\n        if (!addressUTXOList || !pendingTxList || !availableAssets) {\n            return null;\n        }\n        return (\n            <div className=\"Asset-list animated fadeIn\">\n                <div className=\"d-flex\">\n                    <div className=\"left-panel mx-auto\">\n                        <AddressContainer\n                            address={address}\n                            backButtonPath=\"/\"\n                            addressIndex={addressIndex}\n                        />\n                        <div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:asset.list.title\" />\n                                </h4>\n                                <div className=\"asset-item-container\">\n                                    {availableAssets.length > 0 ? (\n                                        _.map(\n                                            availableAssets,\n                                            availableAsset => (\n                                                <AssetItem\n                                                    key={\n                                                        availableAsset.assetType\n                                                    }\n                                                    assetType={\n                                                        availableAsset.assetType\n                                                    }\n                                                    quantities={\n                                                        availableAsset.quantities\n                                                    }\n                                                    networkId={networkId}\n                                                    address={address}\n                                                    onSelect={\n                                                        this.handleSelectAsset\n                                                    }\n                                                    isSelected={\n                                                        selectedAssetType !==\n                                                            undefined &&\n                                                        selectedAssetType ===\n                                                            availableAsset.assetType\n                                                    }\n                                                />\n                                            )\n                                        )\n                                    ) : (\n                                        <div className=\"d-flex align-items-center justify-content-center\">\n                                            <div>\n                                                <div className=\"text-center mt-3\">\n                                                    <img\n                                                        src={Empty}\n                                                        alt={\"empty\"}\n                                                    />\n                                                </div>\n                                                <div className=\"mt-3 empty\">\n                                                    <Trans i18nKey=\"send:asset.list.empty\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:asset.recent.title\" />\n                                </h4>\n                                <AssetTxHistory address={address} />\n                            </div>\n                        </div>\n                    </div>\n                    {selectedAssetType && (\n                        <div className=\"right-container\">\n                            <div className=\"right-panel\">\n                                <SendAsset\n                                    address={address}\n                                    selectedAssetType={selectedAssetType}\n                                    onClose={this.handleSendAssetClose}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n    private handleSendAssetClose = () => {\n        this.setState({ selectedAssetType: undefined });\n    };\n    private handleSelectAsset = (assetType: string) => {\n        window.scrollTo(0, 0);\n\n        const selectedAssetType = this.state.selectedAssetType;\n        if (!selectedAssetType) {\n            this.setState({\n                selectedAssetType: assetType\n            });\n        } else if (selectedAssetType === assetType) {\n            this.setState({\n                selectedAssetType: undefined\n            });\n        } else {\n            this.setState({\n                selectedAssetType: undefined\n            });\n            setTimeout(() => {\n                this.setState({ selectedAssetType: assetType });\n            }, 100);\n        }\n    };\n    private init = async () => {\n        this.clearInterval();\n        this.refresher = setInterval(() => {\n            this.fetchAll();\n        }, 10000);\n        this.fetchAll();\n    };\n    private clearInterval = () => {\n        if (this.refresher) {\n            clearInterval(this.refresher);\n        }\n    };\n    private fetchAll = async () => {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        this.props.fetchPendingTxListIfNeed(address);\n        this.props.fetchAggsUTXOListIfNeed(address);\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const {\n        match: {\n            params: { address }\n        }\n    } = props;\n    const aggsUTXOList = state.assetReducer.aggsUTXOList[address];\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const networkId = state.globalReducer.networkId;\n    const assetAddress = _.find(\n        state.walletReducer.assetAddresses,\n        aa => aa.address === address\n    );\n    return {\n        addressUTXOList: aggsUTXOList && aggsUTXOList.data,\n        pendingTxList: pendingTxList && pendingTxList.data,\n        availableAssets,\n        networkId,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAggsUTXOListIfNeed: (address: string) => {\n        dispatch(assetActions.fetchAggsUTXOListIfNeed(address));\n    },\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetList));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {\n    clearKeystore,\n    createSeed,\n    exportMnemonic\n} from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions from \"../../redux/global/globalActions\";\nimport actions from \"../../redux/wallet/walletActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport ConfirmBackupPhrase from \"./ConfirmBackupPhrase/ConfirmBackupPhrase\";\nimport \"./CreateWallet.css\";\nimport InputPassphrase from \"./InputPassphrase/InputPassphrase\";\nimport ShowBackupPhrase from \"./ShowBackupPhrase/ShowBackupPhrase\";\n\nenum PageState {\n    inputPassPhrase = 1,\n    showSecretPhrase,\n    confirmSecretPhrase\n}\n\ninterface State {\n    currentPage: PageState;\n    passphrase?: string | null;\n    mnemonic?: string[];\n    username?: string;\n}\n\ninterface DispatchProps {\n    login: (passpharase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n    createWalletAssetAddress: () => Promise<void>;\n    createWalletPlatformAddress: () => Promise<void>;\n}\n\ntype Props = RouteComponentProps & DispatchProps;\nclass CreateWallet extends React.Component<Props, State> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            currentPage: PageState.inputPassPhrase,\n            passphrase: undefined,\n            username: undefined\n        };\n    }\n    public async componentDidMount() {\n        const { clearData } = this.props;\n        clearPassphrase();\n        clearData();\n        clearWalletKeys();\n        await clearKeystore();\n    }\n    public render() {\n        const { currentPage, mnemonic } = this.state;\n        return (\n            <Container className=\"Create-wallet animated fadeIn\">\n                <div className=\"close-btn\">\n                    <Link to=\"/selectKeyfile\">\n                        <FontAwesomeIcon icon=\"times\" className=\"icon\" />\n                    </Link>\n                </div>\n                <div className=\"create-wallet-form-group\">\n                    {currentPage === PageState.inputPassPhrase && (\n                        <InputPassphrase\n                            onSubmit={this.handleSubmitPassphraseInput}\n                        />\n                    )}\n                    {currentPage === PageState.showSecretPhrase && (\n                        <ShowBackupPhrase\n                            onSubmit={this.handleSubmitShowPhrase}\n                            mnemonic={mnemonic!}\n                        />\n                    )}\n                    {currentPage === PageState.confirmSecretPhrase && (\n                        <ConfirmBackupPhrase\n                            phrases={mnemonic!}\n                            onConfirm={this.handleConfirmPhrase}\n                        />\n                    )}\n                </div>\n                <div className=\"dot-indicator-container\">\n                    {_.map(_.range(3), index => {\n                        return (\n                            <FontAwesomeIcon\n                                key={`dot-${index}`}\n                                icon=\"circle\"\n                                className={`indicator-icon ${\n                                    index < currentPage ? \"active\" : \"inactive\"\n                                }`}\n                            />\n                        );\n                    })}\n                </div>\n            </Container>\n        );\n    }\n\n    private handleSubmitPassphraseInput = async (\n        username: string,\n        passphrase: string\n    ) => {\n        await createSeed(passphrase);\n        const mnemonicString = await exportMnemonic(passphrase);\n        const mnemonic = mnemonicString.split(\" \");\n        this.setState({\n            currentPage: PageState.showSecretPhrase,\n            passphrase,\n            mnemonic,\n            username\n        });\n    };\n\n    private handleSubmitShowPhrase = () => {\n        this.setState({ currentPage: PageState.confirmSecretPhrase });\n    };\n\n    private handleConfirmPhrase = async () => {\n        const { login, history } = this.props;\n        const { passphrase, username } = this.state;\n        localStorage.setItem(\"USERNAME\", username!);\n        await login(passphrase!);\n        await this.props.createWalletAssetAddress();\n        await this.props.createWalletPlatformAddress();\n        history.push(`/`);\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(globalActions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(globalActions.clearData());\n    },\n    createWalletPlatformAddress: () => {\n        return dispatch(actions.createWalletPlatformAddress());\n    },\n    createWalletAssetAddress: () => {\n        return dispatch(actions.createWalletAssetAddress());\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withRouter(CreateWallet));\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./ConfirmBackupPhrase.css\";\n\ninterface OwnProps {\n    phrases: string[];\n    onConfirm: () => void;\n}\n\ninterface State {\n    selectedPhrasesIndex?: number[] | null;\n    suffledPhrases: string[];\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass ConfirmBackupPhrase extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            selectedPhrasesIndex: undefined,\n            suffledPhrases: _.shuffle(this.props.phrases)\n        };\n    }\n    public componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n    public render() {\n        const { phrases, onConfirm } = this.props;\n        const { selectedPhrasesIndex, suffledPhrases } = this.state;\n        return (\n            <div className=\"Confirm-backup-phrase animated fadeIn\">\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:confirm.title\" />\n                    </h4>\n                </div>\n                <div className=\"description\">\n                    <Trans i18nKey=\"create:confirm.detail\" />\n                </div>\n                <div>\n                    <div className=\"backup-phrase-input d-flex align-items-center justify-content-center\">\n                        {selectedPhrasesIndex &&\n                            this.indexToString(selectedPhrasesIndex).join(\" \")}\n                    </div>\n                    <div className=\"backup-phrase-button-container text-center\">\n                        <div>\n                            {_.map(suffledPhrases, (text, index) => {\n                                return (\n                                    <button\n                                        key={`phrase-${text}`}\n                                        className={`btn btn-primary backup-phrase-btn ${selectedPhrasesIndex &&\n                                            _.includes(\n                                                selectedPhrasesIndex,\n                                                index\n                                            ) &&\n                                            \"reverse\"}`}\n                                        onClick={_.partial(\n                                            this.toggleSelectPhrase,\n                                            index\n                                        )}\n                                    >\n                                        {text}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        disabled={\n                            selectedPhrasesIndex == null ||\n                            !_.isEqual(\n                                phrases,\n                                this.indexToString(selectedPhrasesIndex)\n                            )\n                        }\n                        onClick={onConfirm}\n                    >\n                        <Trans i18nKey=\"create:confirm.button\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n    private indexToString = (selectedPhraseIndex: number[]) => {\n        const { suffledPhrases } = this.state;\n        return _.map(selectedPhraseIndex, i => suffledPhrases[i]);\n    };\n    private toggleSelectPhrase = (index: number) => {\n        const { selectedPhrasesIndex } = this.state;\n        if (!selectedPhrasesIndex) {\n            this.setState({ selectedPhrasesIndex: [index] });\n            return;\n        }\n        if (_.includes(selectedPhrasesIndex, index)) {\n            this.setState({\n                selectedPhrasesIndex: _.filter(\n                    selectedPhrasesIndex,\n                    sp => sp !== index\n                )\n            });\n        } else {\n            this.setState({\n                selectedPhrasesIndex: [...selectedPhrasesIndex, index]\n            });\n        }\n    };\n}\nexport default withTranslation()(ConfirmBackupPhrase);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { Form } from \"reactstrap\";\nimport ValidationInput from \"../../ValidationInput/ValidationInput\";\nimport \"./InputPassphrase.css\";\n\ninterface State {\n    passphrase: string;\n    passphraseConfirm: string;\n    isPassphraseValid?: boolean;\n    passphraseError?: string;\n    isPassphraseConfirmValid?: boolean;\n    passphraseConfirmError?: string;\n    isSubmitted: boolean;\n    username: string;\n    isUsernameValid?: boolean;\n    usernameError?: string;\n    hasAgreeTOC: boolean;\n    hasAgreePP: boolean;\n}\n\nconst TermsOfConditionLink =\n    \"https://docs.google.com/document/d/1-HJep6vXMaiX4p62ijIfAc9yyX_rKAFkFLPsMod8tl0/edit?usp=sharing\";\nconst PPLink =\n    \"https://docs.google.com/document/d/13Bonpgp2Va4dDlAIzvH2JSKFyOBlSSUrvFQ_PE2YqWI/edit?usp=sharing\";\n\ninterface OwnProps {\n    onSubmit: (username: string, passphrase: string) => void;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass InputPassphrase extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            passphraseConfirm: \"\",\n            isPassphraseValid: undefined,\n            passphraseError: undefined,\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined,\n            isSubmitted: false,\n            username: \"\",\n            isUsernameValid: undefined,\n            usernameError: undefined,\n            hasAgreeTOC: false,\n            hasAgreePP: false\n        };\n    }\n    public render() {\n        const { t } = this.props;\n        const {\n            passphrase,\n            passphraseConfirm,\n            isPassphraseConfirmValid,\n            isPassphraseValid,\n            passphraseConfirmError,\n            passphraseError,\n            isSubmitted,\n            username,\n            isUsernameValid,\n            usernameError,\n            hasAgreeTOC,\n            hasAgreePP\n        } = this.state;\n        return (\n            <Form\n                className=\"Input-passphrase animated fadeIn\"\n                onSubmit={this.handleOnFormSubmit}\n            >\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:seed.title\" />\n                    </h4>\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.name\")}\n                        onChange={this.handleUsernameInput}\n                        value={username}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.name\")}\n                        type=\"text\"\n                        isValid={isUsernameValid}\n                        error={usernameError}\n                        onBlur={this.checkUsernameValid}\n                    />\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.password\")}\n                        onChange={this.handlePassphraseInput}\n                        value={passphrase}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.password\")}\n                        type=\"password\"\n                        isValid={isPassphraseValid}\n                        error={passphraseError}\n                        onBlur={this.checkPassphraseValid}\n                    />\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.password_confirm\")}\n                        onChange={this.handlePassphraseConfirmInput}\n                        value={passphraseConfirm}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.password_confirm\")}\n                        type=\"password\"\n                        isValid={isPassphraseConfirmValid}\n                        error={passphraseConfirmError}\n                        onBlur={this.checkPassphraseConfirm}\n                    />\n                </div>\n                <div className=\"form-container\">\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"tocCheck\"\n                            checked={hasAgreeTOC}\n                            onChange={this.handleTOCClick}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"tocCheck\">\n                            <Trans i18nKey=\"create:seed.terms\">\n                                {/* eslint-disable-next-line */}\n                                <a\n                                    href={`${TermsOfConditionLink}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                />\n                            </Trans>\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"ppCheck\"\n                            checked={hasAgreePP}\n                            onChange={this.handlePPClick}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"ppCheck\">\n                            <Trans i18nKey=\"create:seed.privacy\">\n                                {/* eslint-disable-next-line */}\n                                <a\n                                    href={`${PPLink}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                />\n                            </Trans>\n                        </label>\n                    </div>\n                </div>\n                <div className=\"mt-5\">\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        disabled={isSubmitted || !hasAgreePP || !hasAgreeTOC}\n                        type=\"submit\"\n                    >\n                        {isSubmitted\n                            ? t(\"create:seed.creating\")\n                            : t(\"create:seed.ok\")}\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleTOCClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasAgreeTOC: event.target.checked\n        });\n    };\n\n    private handlePPClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasAgreePP: event.target.checked\n        });\n    };\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleSubmit();\n    };\n\n    private handleSubmit = () => {\n        const { onSubmit } = this.props;\n        const { passphrase, username } = this.state;\n        if (!this.checkUsernameValid()) {\n            return;\n        }\n        if (!this.checkPassphraseValid()) {\n            return;\n        }\n        if (!this.checkPassphraseConfirm()) {\n            return;\n        }\n\n        this.setState({ isSubmitted: true });\n\n        setTimeout(() => {\n            onSubmit(username, passphrase);\n        }, 500);\n    };\n\n    private checkPassphraseValid = () => {\n        const { passphrase } = this.state;\n        if (passphrase.length < 8) {\n            this.setState({\n                passphraseError: this.props.t(\"create:seed.error.pass_minimum\"),\n                isPassphraseValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: true\n        });\n        return true;\n    };\n\n    private checkPassphraseConfirm = () => {\n        const { passphrase, passphraseConfirm } = this.state;\n        if (passphrase !== passphraseConfirm) {\n            this.setState({\n                passphraseConfirmError: this.props.t(\n                    \"create:seed.error.pass_mismatch\"\n                ),\n                isPassphraseConfirmValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: true\n        });\n        return true;\n    };\n\n    private checkUsernameValid = () => {\n        const { username } = this.state;\n        if (username === \"\") {\n            this.setState({\n                isUsernameValid: false,\n                usernameError: this.props.t(\"create:seed.error.name_required\")\n            });\n            return false;\n        }\n        if (username.length > 20) {\n            this.setState({\n                usernameError: this.props.t(\"create:seed.error.name_maximum\"),\n                isUsernameValid: false\n            });\n            return false;\n        }\n        this.setState({\n            isUsernameValid: true,\n            usernameError: undefined\n        });\n        return true;\n    };\n\n    private handlePassphraseInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: undefined\n        });\n        this.setState({\n            passphrase: event.target.value,\n            passphraseConfirm: \"\",\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n    };\n\n    private handlePassphraseConfirmInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n        this.setState({ passphraseConfirm: event.target.value });\n    };\n\n    private handleUsernameInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            username: event.target.value,\n            usernameError: undefined,\n            isUsernameValid: undefined\n        });\n    };\n}\n\nexport default withTranslation()(InputPassphrase);\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"./ShowBackupPhrase.css\";\n\ninterface OwnProps {\n    onSubmit: () => void;\n    mnemonic: string[];\n}\ntype Props = WithTranslation & OwnProps;\n\nclass ShowBackupPhrase extends React.Component<Props> {\n    public componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n    public render() {\n        const { mnemonic } = this.props;\n        return (\n            <div className=\"Show-backup-phrase animated fadeIn\">\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:mnemonic.title\" />\n                    </h4>\n                </div>\n                <div className=\"text-1\">\n                    <Trans i18nKey=\"create:mnemonic.detail\" />\n                </div>\n                <div className=\"warning-text\">\n                    <Trans i18nKey=\"create:mnemonic.warning\" />\n                </div>\n                <div className=\"tips-container\">\n                    <p className=\"tips-text mb-0\">\n                        <Trans i18nKey=\"create:mnemonic.tip\" />\n                    </p>\n                    <span className=\"text-2\">\n                        <Trans i18nKey=\"create:mnemonic.tip_detail\" />\n                    </span>\n                </div>\n                <div className=\"backup-phrase-container\">\n                    <div className=\"backup-phrase-panel d-flex align-items-center justify-content-center\">\n                        <span>{mnemonic.join(\" \")}</span>\n                        <CopyToClipboard\n                            text={mnemonic.join(\" \")}\n                            onCopy={this.handleCopyPhrase}\n                        >\n                            <div className=\"copy-btn\">\n                                <span>\n                                    <Trans i18nKey=\"create:mnemonic.copy\" />\n                                </span>\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        type=\"submit\"\n                        onClick={this.props.onSubmit}\n                    >\n                        <Trans i18nKey=\"create:mnemonic.button\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleCopyPhrase = () => {\n        toast.info(this.props.t(\"create:mnemonic.copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(ShowBackupPhrase);\n","import React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport facebook from \"./img/facebook.svg\";\nimport github from \"./img/github.svg\";\nimport gitter from \"./img/gitter.svg\";\nimport medium from \"./img/medium.svg\";\nimport telegram from \"./img/telegram.svg\";\nimport twitter from \"./img/twitter.svg\";\nimport \"./index.css\";\n\ntype Props = WithTranslation;\n\nclass Footer extends React.Component<Props> {\n    public render() {\n        return (\n            <div className=\"Footer\">\n                <Container>\n                    <Row>\n                        <Col lg={6} className=\"left-panel\">\n                            <ul className=\"left-menu-list list-inline list-unstyled\">\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://codechain.io\"\n                                    >\n                                        About Us\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://codechain.io/#contact\"\n                                    >\n                                        Contact\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://docs.google.com/document/d/13Bonpgp2Va4dDlAIzvH2JSKFyOBlSSUrvFQ_PE2YqWI/edit?usp=sharing\"\n                                    >\n                                        Privacy Policy\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://docs.google.com/document/d/1-HJep6vXMaiX4p62ijIfAc9yyX_rKAFkFLPsMod8tl0/edit?usp=sharing\"\n                                    >\n                                        Terms and Conditions\n                                    </a>\n                                </li>\n                            </ul>\n                        </Col>\n                        <Col lg={6} className=\"right-panel\">\n                            <ul className=\"right-menu-list list-unstyled list-unstyled\">\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://www.facebook.com/codechain/\"\n                                    >\n                                        <img src={facebook} alt={\"facebook\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://github.com/CodeChain-io/codechain-web-wallet\"\n                                    >\n                                        <img src={github} alt={\"github\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://gitter.im/CodeChain-io/codechain\"\n                                    >\n                                        <img src={gitter} alt={\"gitter\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://twitter.com/codechain_io\"\n                                    >\n                                        <img src={twitter} alt={\"twitter\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://medium.com/codechain\"\n                                    >\n                                        <img src={medium} alt={\"medium\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"http://t.me/codechain_protocol\"\n                                    >\n                                        <img src={telegram} alt={\"telegram\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item language-selector-container\">\n                                    <select\n                                        onChange={this.onLanguageChange}\n                                        className=\"language-selector\"\n                                        value={this.props.i18n.language}\n                                        defaultValue=\"en\"\n                                    >\n                                        <option value=\"en\">English</option>\n                                        <option value=\"ko\">한국어</option>\n                                    </select>\n                                </li>\n                            </ul>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n\n    public onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const lang = event.target.value;\n        this.props.i18n.changeLanguage(lang);\n    };\n}\n\nexport default withTranslation()(Footer);\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport Form from \"reactstrap/lib/Form\";\nimport { checkPassphrase, exportMnemonic } from \"../../model/keystore\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport \"./ExportBackupPopup.css\";\n\ninterface Props {\n    isOpen: boolean;\n    toggle: () => void;\n    className?: string;\n}\n\ninterface State {\n    passphrase: string;\n    isValidPassphrase?: boolean;\n    passphraseError?: string;\n    revealBackupPhrase: boolean;\n    backupPhraseString?: string | null;\n}\n\nclass ExportBackupPopup extends React.Component<\n    Props & WithTranslation,\n    State\n> {\n    constructor(props: Props & WithTranslation) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            isValidPassphrase: undefined,\n            passphraseError: undefined,\n            revealBackupPhrase: false,\n            backupPhraseString: undefined\n        };\n    }\n    public render() {\n        const { className, toggle, isOpen, t } = this.props;\n        const {\n            passphrase,\n            isValidPassphrase,\n            passphraseError,\n            revealBackupPhrase,\n            backupPhraseString\n        } = this.state;\n        return (\n            <Modal\n                isOpen={isOpen}\n                toggle={toggle}\n                className={`Export-backup-popup ${className}`}\n                size=\"sm\"\n                centered={true}\n            >\n                <ModalHeader toggle={toggle}>\n                    <Trans i18nKey=\"backup:title\" />\n                </ModalHeader>\n                <ModalBody>\n                    <Form onSubmit={this.handleOnFormSubmit}>\n                        <div className=\"passphrase-container\">\n                            <div className=\"d-flex align-items-center justify-content-center passphrase-panel\">\n                                {backupPhraseString && [\n                                    <span key=\"backup-phrase\">\n                                        {backupPhraseString}\n                                    </span>,\n                                    <CopyToClipboard\n                                        key=\"copy\"\n                                        text={backupPhraseString}\n                                        onCopy={this.handleCopyPhrase}\n                                    >\n                                        <div className=\"copy-btn\">\n                                            <span>COPY</span>\n                                        </div>\n                                    </CopyToClipboard>\n                                ]}\n                            </div>\n                            {!revealBackupPhrase && (\n                                <div className=\"d-flex align-items-center justify-content-center disable-panel\">\n                                    <span>\n                                        <Trans i18nKey=\"backup:reveal\" />\n                                    </span>\n                                </div>\n                            )}\n                        </div>\n                        <div className=\"mt-3\">\n                            <ValidationInput\n                                onChange={this.handlePassphrase}\n                                value={passphrase}\n                                showValidation={true}\n                                labelText={t(\"backup:password.label\")}\n                                placeholder={t(\"backup:password.placeholder\")}\n                                type=\"password\"\n                                isValid={isValidPassphrase}\n                                error={passphraseError}\n                                onBlur={this.checkPhrase}\n                                disable={revealBackupPhrase}\n                            />\n                        </div>\n                        <div className=\"mb-3\">\n                            <Button\n                                color=\"primary square reverse w-100\"\n                                disabled={\n                                    !passphrase ||\n                                    isValidPassphrase === false ||\n                                    revealBackupPhrase\n                                }\n                            >\n                                <Trans i18nKey=\"backup:see_btn\" />\n                            </Button>\n                        </div>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        );\n    }\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleButtonClick();\n    };\n    private handlePassphrase = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            passphrase: event.target.value,\n            isValidPassphrase: undefined,\n            passphraseError: undefined\n        });\n    };\n    private checkPhrase = async () => {\n        const { passphrase } = this.state;\n        const isValid = await checkPassphrase(passphrase);\n        if (isValid) {\n            this.setState({\n                isValidPassphrase: true,\n                passphraseError: undefined\n            });\n        } else {\n            this.setState({\n                isValidPassphrase: false,\n                passphraseError: this.props.t(\"backup:password_error\")\n            });\n        }\n    };\n    private handleButtonClick = async () => {\n        const { passphrase } = this.state;\n        if (!this.checkPhrase()) {\n            return;\n        }\n\n        const backupPhraseString = await exportMnemonic(passphrase);\n        this.setState({\n            revealBackupPhrase: true,\n            backupPhraseString\n        });\n    };\n    private handleCopyPhrase = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(ExportBackupPopup);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Popover, PopoverBody } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport globalActions from \"../../../redux/global/globalActions\";\nimport ExportBackupPopup from \"../../ExportBackupPopup/ExportBackupPopup\";\nimport \"./MenuButton.css\";\n\ninterface OwnProps {\n    className?: string;\n}\n\ninterface StateProps {\n    networkId: NetworkId;\n}\n\ninterface State {\n    popoverOpen: boolean;\n    exportPopupOpen: boolean;\n}\n\ninterface DispatchProps {\n    logout: () => void;\n}\n\ntype Props = WithTranslation & DispatchProps & StateProps & OwnProps;\nclass MenuButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            popoverOpen: false,\n            exportPopupOpen: false\n        };\n    }\n    public render() {\n        const { className, t } = this.props;\n        const { exportPopupOpen, popoverOpen } = this.state;\n        return (\n            <div\n                className={`Menu-button ${className}`}\n                onClick={this.toggle}\n                id=\"menu-button\"\n            >\n                {exportPopupOpen && (\n                    <ExportBackupPopup\n                        toggle={this.toggleExportPopup}\n                        isOpen={exportPopupOpen}\n                    />\n                )}\n                <div className=\"d-flex align-items-center network-btn\">\n                    <FontAwesomeIcon icon=\"ellipsis-h\" />\n                </div>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={popoverOpen}\n                    target=\"menu-button\"\n                    toggle={this.toggle}\n                >\n                    <PopoverBody className=\"popover-select-list\">\n                        <ul className=\"list-unstyled mb-0\">\n                            <li onClick={this.handleSignout}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-2\">\n                                        {t(\"main:menu.lock\")}\n                                    </span>\n                                    <FontAwesomeIcon icon=\"lock\" />\n                                </div>\n                            </li>\n                            <li onClick={this.openExportPopup}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-2\">\n                                        {t(\"main:menu.backup_phrase\")}\n                                    </span>\n                                    <FontAwesomeIcon icon=\"arrow-circle-down\" />\n                                </div>\n                            </li>\n                        </ul>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n    public handleSignout = () => {\n        const { logout } = this.props;\n        logout();\n    };\n    private openExportPopup = () => {\n        this.setState({\n            exportPopupOpen: !this.state.exportPopupOpen,\n            popoverOpen: false\n        });\n    };\n    private toggle = () => {\n        this.setState({ popoverOpen: !this.state.popoverOpen });\n    };\n    private toggleExportPopup = () => {\n        this.setState({ exportPopupOpen: !this.state.exportPopupOpen });\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    networkId: state.globalReducer.networkId,\n    passphrase: state.globalReducer.passphrase\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    logout: () => {\n        dispatch(globalActions.logout());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(MenuButton));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Popover, PopoverBody } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport { getNetworkNameById } from \"../../../utils/network\";\nimport MainNet from \"./img/mainnet.svg\";\nimport TestNet from \"./img/testnet.svg\";\n\nimport _ from \"lodash\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport globalActions from \"../../../redux/global/globalActions\";\nimport \"./NetworkButton.css\";\n\ninterface OwnProps {\n    className?: string;\n}\n\ninterface StateProps {\n    networkId: NetworkId;\n}\n\ninterface State {\n    popoverOpen: boolean;\n}\n\ninterface DispatchProps {\n    updateNetworkId: (networkId: NetworkId) => void;\n}\n\ntype Props = RouteComponentProps & StateProps & OwnProps & DispatchProps;\nclass NetworkButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            popoverOpen: false\n        };\n    }\n    public render() {\n        const { networkId, className } = this.props;\n        return (\n            <div\n                className={`Network-button ${className}`}\n                onClick={this.toggle}\n                id=\"network-button\"\n            >\n                <div className=\"d-flex align-items-center network-btn\">\n                    <div className=\"mr-1\">{getNetworkNameById(networkId)}</div>\n                    <img\n                        src={networkId === \"cc\" ? MainNet : TestNet}\n                        alt={\"network\"}\n                    />\n                </div>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={this.state.popoverOpen}\n                    target=\"network-button\"\n                    toggle={this.toggle}\n                >\n                    <PopoverBody className=\"popover-select-list\">\n                        <ul className=\"list-unstyled mb-0\">\n                            <li onClick={_.partial(this.chagneNetworkId, \"cc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">MAINNET</span>\n                                    <img src={MainNet} alt={\"mainnet\"} />\n                                </div>\n                            </li>\n                            {/*\n                            <li onClick={_.partial(this.chagneNetworkId, \"tc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">HUSKY</span>\n                                    <img src={TestNet} />\n                                </div>\n                            </li>\n                            <li onClick={_.partial(this.chagneNetworkId, \"sc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">SALUKI</span>\n                                    <img src={TestNet} />\n                                </div>\n                            </li>\n                            */}\n                            <li onClick={_.partial(this.chagneNetworkId, \"wc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">TESTNET</span>\n                                    <img src={TestNet} alt={\"testnet\"} />\n                                </div>\n                            </li>\n                        </ul>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n    private toggle = () => {\n        this.setState({ popoverOpen: !this.state.popoverOpen });\n    };\n    private chagneNetworkId = (networkId: NetworkId) => {\n        const { updateNetworkId, networkId: currentNetworkId } = this.props;\n        const { history } = this.props;\n        this.toggle();\n        if (networkId === currentNetworkId) {\n            return;\n        }\n        updateNetworkId(networkId);\n        history.replace(\"/\");\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    networkId: state.globalReducer.networkId,\n    passphrase: state.globalReducer.passphrase\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    updateNetworkId: (networkId: NetworkId) => {\n        dispatch(globalActions.updateNetworkId(networkId));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NetworkButton));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport globalActions from \"../../../redux/global/globalActions\";\n\nclass WalletSaver extends React.Component<any, any> {\n    public timer: NodeJS.Timeout | null = null;\n\n    public componentDidMount() {\n        this.startTimer();\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n        document.addEventListener(\"touchend\", this.handleTouchOutside);\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    public componentWillUnmount() {\n        this.clearTimer();\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\n        document.removeEventListener(\"touchend\", this.handleTouchOutside);\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    public render() {\n        return null;\n    }\n\n    private handleClickOutside = () => {\n        this.resetTimer();\n    };\n\n    private handleTouchOutside = () => {\n        this.resetTimer();\n    };\n\n    private handleKeyDown = () => {\n        this.resetTimer();\n    };\n\n    private startTimer = () => {\n        const { logout } = this.props;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            logout();\n        }, 60 * 10 * 1000);\n    };\n\n    private clearTimer = () => {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    };\n\n    private resetTimer = () => {\n        this.startTimer();\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    logout: () => {\n        dispatch(globalActions.logout());\n    }\n});\nexport default connect(\n    undefined,\n    mapDispatchToProps\n)(WalletSaver);\n","import React from \"react\";\nimport LoadingBar from \"react-redux-loading-bar\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\nimport Logo from \"./img/logo.svg\";\nimport MenuButton from \"./MenuButton/MenuButton\";\nimport NetworkButton from \"./NetworkButton/NetworkButton\";\nimport WalletSaver from \"./WalletSaver\";\n\nexport default class Header extends React.Component {\n    public render() {\n        return (\n            <div className=\"Header\" key=\"header\">\n                <div className=\"header-container d-flex align-items-center h-100\">\n                    <Link to=\"/\">\n                        <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    </Link>\n                    <WalletSaver />\n                    <NetworkButton className=\"ml-auto\" />\n                    <MenuButton className=\"\" />\n                </div>\n                <LoadingBar className=\"loading-bar\" />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { Form } from \"reactstrap\";\nimport ValidationInput from \"../../ValidationInput/ValidationInput\";\nimport \"./LoginForm.css\";\n\ninterface OwnProps {\n    onChange: (passphrase: string) => void;\n    onSignIn: () => void;\n    passphrase: string;\n    isValid?: boolean;\n    username?: string | null;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass LoginForm extends React.Component<Props> {\n    public render() {\n        const { t, passphrase, isValid, username } = this.props;\n        return (\n            <Form className=\"login-form\" onSubmit={this.handleOnFormSubmit}>\n                <h4 className=\"welcome-text\">\n                    <Trans\n                        i18nKey=\"welcome:title\"\n                        values={{ name: username ? username : \"\" }}\n                    />\n                </h4>\n                <div className=\"passphrase-input-container\">\n                    <ValidationInput\n                        onChange={this.handleOnChagne}\n                        value={passphrase}\n                        showValidation={true}\n                        labelText={t(\"welcome:password\")}\n                        placeholder={t(\"welcome:password_placeholder\")}\n                        type=\"password\"\n                        isValid={isValid}\n                        error={\n                            isValid === false\n                                ? (t(\"welcome:password_invalid\") as string)\n                                : undefined\n                        }\n                    />\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary square sign-in-btn\"\n                        type=\"submit\"\n                    >\n                        <Trans i18nKey=\"welcome:signin\" />\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.props.onSignIn();\n    };\n\n    private handleOnChagne = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { onChange } = this.props;\n        onChange(event.target.value);\n    };\n}\n\nexport default withTranslation()(LoginForm);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport actions from \"../../redux/global/globalActions\";\nimport \"./Login.css\";\n\nimport {\n    Link,\n    Redirect,\n    RouteComponentProps,\n    withRouter\n} from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { checkPassphrase } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport { getNetworkId, getPassphrase } from \"../../utils/storage\";\nimport Logo from \"./img/logo-vertical.svg\";\nimport LoginForm from \"./LoginForm/LoginForm\";\n\ninterface DispatchProps {\n    login: (passphrase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n    updateNetworkId: (networkId: NetworkId) => Promise<void>;\n}\n\ninterface OwnProps {\n    location: {\n        state: {\n            from: string;\n        };\n    };\n}\n\ninterface State {\n    passphrase: string;\n    isValid?: boolean;\n    redirectToReferrer: boolean;\n    username?: string | null;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps & OwnProps;\nclass Login extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            isValid: undefined,\n            redirectToReferrer: false,\n            username: undefined\n        };\n    }\n    public componentDidMount() {\n        const { login, updateNetworkId } = this.props;\n        this.props.clearData();\n\n        const savedNetworkId = getNetworkId();\n        if (savedNetworkId) {\n            updateNetworkId(savedNetworkId);\n        }\n\n        const savedPassphrase = getPassphrase();\n        if (savedPassphrase) {\n            login(savedPassphrase);\n            this.setState({ redirectToReferrer: true });\n        }\n\n        const username = localStorage.getItem(\"USERNAME\");\n        this.setState({ username });\n    }\n    public render() {\n        const {\n            passphrase,\n            isValid,\n            redirectToReferrer,\n            username\n        } = this.state;\n        const { from } = this.props.location.state || {\n            from: { pathname: \"/\" }\n        };\n        if (redirectToReferrer) {\n            return <Redirect to={from} />;\n        }\n        return (\n            <Container className=\"Login animated fadeIn\">\n                <div className=\"title-container text-center\">\n                    <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    <h1 className=\"mt-4 logo-title\">Wallet</h1>\n                </div>\n                <div className=\"login-form-container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <LoginForm\n                            onChange={this.handleOnChangePassphrase}\n                            passphrase={passphrase}\n                            onSignIn={this.handleSignIn}\n                            isValid={isValid}\n                            username={username}\n                        />\n                    </div>\n                </div>\n                <div className=\"text-center open-different-btn-container\">\n                    <Link className=\"open-different-btn\" to=\"/selectKeyfile\">\n                        <Trans i18nKey=\"welcome:different\" />\n                    </Link>\n                </div>\n            </Container>\n        );\n    }\n\n    public handleOnChangePassphrase = (passphrase: string) => {\n        this.setState({ passphrase, isValid: undefined });\n    };\n\n    public handleSignIn = async () => {\n        const { login, history } = this.props;\n        const { passphrase } = this.state;\n\n        const isValid = await checkPassphrase(passphrase);\n        if (!isValid) {\n            this.setState({ isValid: false, passphrase: \"\" });\n            return;\n        }\n\n        await login(passphrase);\n        history.push(`/`);\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(actions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(actions.clearData());\n    },\n    updateNetworkId: (netowrkId: NetworkId) => {\n        return dispatch(actions.updateNetworkId(netowrkId));\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withTranslation()(withRouter(Login)));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport BigNumber from \"bignumber.js\";\nimport { SignedTransaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport accountActions from \"../../redux/account/accountActions\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport TooltipLabel from \"../TooltipLabel\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport \"./index.css\";\n\ninterface State {\n    name: string;\n    iconURL: string;\n    supply: string;\n    description: string;\n    feePayer?: string;\n    fee: string;\n    nameError?: string;\n    isNameValid?: boolean;\n    supplyError?: string;\n    isSupplyValid?: boolean;\n    isFeeValid?: boolean;\n    feeError?: string;\n    isSendingTx: boolean;\n    isSentTx: boolean;\n    selectedAddress?: string;\n}\n\ninterface StateProps {\n    assetAddresses?: WalletAddress[] | null;\n    platformAddresses?: WalletAddress[] | null;\n    availableQuarkList: { [address: string]: U64 | null | undefined };\n    networkId: NetworkId;\n    passphrase: string;\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    fetchAvailableQuark: (address: string) => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => Promise<unknown>;\n}\n\nconst MinimumFee = 100000;\n\ntype Props = WithTranslation & RouteComponentProps & StateProps & DispatchProps;\nclass MintAsset extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            iconURL: \"\",\n            supply: \"\",\n            description: \"\",\n            feePayer: undefined,\n            fee: \"\",\n            isSendingTx: false,\n            isSentTx: false\n        };\n    }\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n        if (this.props.assetAddresses) {\n            if (this.props.assetAddresses.length > 0) {\n                this.setState({\n                    selectedAddress: this.props.assetAddresses[0].address\n                });\n            }\n        }\n        if (this.props.platformAddresses) {\n            if (this.props.platformAddresses.length > 0) {\n                this.selectFeePayer(this.props.platformAddresses[0].address);\n            }\n        }\n    }\n    public componentWillUpdate(nextProps: Props) {\n        if (!this.props.assetAddresses && nextProps.assetAddresses) {\n            if (nextProps.assetAddresses.length > 0) {\n                this.setState({\n                    selectedAddress: nextProps.assetAddresses[0].address\n                });\n            }\n        }\n        if (!this.props.platformAddresses && nextProps.platformAddresses) {\n            if (nextProps.platformAddresses) {\n                if (nextProps.platformAddresses.length > 0) {\n                    this.selectFeePayer(nextProps.platformAddresses[0].address);\n                }\n            }\n        }\n    }\n    public render() {\n        const {\n            t,\n            platformAddresses,\n            availableQuarkList,\n            assetAddresses\n        } = this.props;\n        const {\n            name,\n            iconURL,\n            supply,\n            description,\n            feePayer,\n            fee,\n            nameError,\n            isNameValid,\n            supplyError,\n            isSupplyValid,\n            isFeeValid,\n            feeError,\n            isSendingTx,\n            isSentTx,\n            selectedAddress\n        } = this.state;\n        return (\n            <div className=\"Mint-asset\">\n                <Container>\n                    <div className=\"page-container d-flex mb-4 back-icon-container\">\n                        <Link to=\"/\" className=\"ml-auto\">\n                            <FontAwesomeIcon\n                                className=\"back-icon\"\n                                icon=\"arrow-left\"\n                            />\n                        </Link>\n                    </div>\n                    <div className=\"page-container mint-container\">\n                        <h2 className=\"title\">\n                            <Trans i18nKey=\"mint:title\" />\n                        </h2>\n                        <span className=\"mint-description\">\n                            <Trans i18nKey=\"mint:detail\" />\n                        </span>\n                        {!assetAddresses ? (\n                            <span className=\"loading-text\">\n                                <Trans i18nKey=\"mint:loading\" />\n                            </span>\n                        ) : selectedAddress ? (\n                            <div>\n                                {isSentTx ? (\n                                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                                        <div className=\"text-center\">\n                                            <div>\n                                                <img\n                                                    src={CheckIcon}\n                                                    alt={\"check\"}\n                                                />\n                                            </div>\n                                            <div className=\"mt-3\">\n                                                <span>\n                                                    <Trans i18nKey=\"mint:complete\" />\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div className=\"asset-info-container\">\n                                            <ValidationInput\n                                                labelText={t(\"mint:name.label\")}\n                                                placeholder={t(\n                                                    \"mint:name.placeholder\"\n                                                )}\n                                                value={name}\n                                                onChange={this.handleNameChange}\n                                                showValidation={false}\n                                                isValid={isNameValid}\n                                                error={nameError}\n                                                onBlur={\n                                                    this.checkNameValidation\n                                                }\n                                            />\n                                            <ValidationInput\n                                                labelText={t(\n                                                    \"mint:supply.label\"\n                                                )}\n                                                decimalScale={0}\n                                                placeholder={t(\n                                                    \"mint:supply.placeholder\"\n                                                )}\n                                                value={supply}\n                                                type=\"number\"\n                                                onChange={\n                                                    this.handleSupplyChange\n                                                }\n                                                showValidation={false}\n                                                isValid={isSupplyValid}\n                                                error={supplyError}\n                                                tooltip={t(\n                                                    \"mint:supply.tooltip\"\n                                                )}\n                                                onBlur={\n                                                    this.checkSupplyValidation\n                                                }\n                                            />\n                                            <div className=\"d-flex\">\n                                                <div className=\"icon-url-input-container\">\n                                                    <ValidationInput\n                                                        labelText={t(\n                                                            \"mint:url.label\"\n                                                        )}\n                                                        placeholder={t(\n                                                            \"mint:url.placeholder\"\n                                                        )}\n                                                        value={iconURL}\n                                                        onChange={\n                                                            this\n                                                                .handleIconURLChange\n                                                        }\n                                                        tooltip={t(\n                                                            \"mint:url.tooltip\"\n                                                        )}\n                                                        showValidation={false}\n                                                    />\n                                                </div>\n                                                {iconURL !== \"\" && (\n                                                    <div\n                                                        className=\"preview-container\"\n                                                        style={{\n                                                            backgroundImage: `URL(${iconURL})`\n                                                        }}\n                                                    />\n                                                )}\n                                            </div>\n                                            <div className=\"mb-4\">\n                                                <span className=\"input-label d-block mb-2\">\n                                                    <Trans i18nKey=\"mint:description.title\" />\n                                                    <TooltipLabel tooltip=\"mint:description.tooltip\" />\n                                                </span>\n                                                <textarea\n                                                    className=\"form-control description-area\"\n                                                    value={description}\n                                                    onChange={\n                                                        this\n                                                            .handleDescriptionChange\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"select-address-container\">\n                                                <span className=\"select-address-label\">\n                                                    <Trans i18nKey=\"mint:address.title\" />\n                                                    <TooltipLabel tooltip=\"mint:address.tooltip\" />\n                                                </span>\n                                                <select\n                                                    onChange={\n                                                        this\n                                                            .handleChangeSelectAddress\n                                                    }\n                                                    className=\"form-control\"\n                                                >\n                                                    {assetAddresses.map(a => (\n                                                        <option\n                                                            key={a.address}\n                                                            value={a.address}\n                                                        >\n                                                            {t(\n                                                                \"mint:address.address_type\"\n                                                            )}{\" \"}\n                                                            {t(\"main:address\", {\n                                                                index:\n                                                                    a.index + 1\n                                                            })}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            </div>\n                                            {platformAddresses && (\n                                                // FIXME: This code is duplicated.\n                                                <div className=\"d-flex fee-container\">\n                                                    <div className=\"fee-input-container\">\n                                                        <ValidationInput\n                                                            value={fee}\n                                                            decimalScale={0}\n                                                            onChange={\n                                                                this\n                                                                    .handleChangeFee\n                                                            }\n                                                            type=\"number\"\n                                                            showValidation={\n                                                                true\n                                                            }\n                                                            labelText={t(\n                                                                \"mint:fee.title\"\n                                                            )}\n                                                            tooltip={t(\n                                                                \"mint:fee.tooltip\"\n                                                            )}\n                                                            placeholder={\n                                                                !feePayer\n                                                                    ? t(\n                                                                          \"mint:fee.placeholder_select_fee_payer\"\n                                                                      )\n                                                                    : !availableQuarkList[\n                                                                          feePayer\n                                                                      ]\n                                                                    ? t(\n                                                                          \"mint:fee.placeholder_loading\"\n                                                                      )\n                                                                    : \"100,000 (CCC)\"\n                                                            }\n                                                            disable={\n                                                                feePayer ==\n                                                                    null ||\n                                                                (feePayer !=\n                                                                    null &&\n                                                                    availableQuarkList[\n                                                                        feePayer\n                                                                    ] == null)\n                                                            }\n                                                            onBlur={\n                                                                this\n                                                                    .checkFeeValidation\n                                                            }\n                                                            isValid={isFeeValid}\n                                                            error={feeError}\n                                                        />\n                                                    </div>\n                                                    <div className=\"fee-payer-container\">\n                                                        <div className=\"input-label\">\n                                                            <Trans i18nKey=\"mint:payer.title\" />\n                                                            <TooltipLabel tooltip=\"mint:payer.tooltip\" />\n                                                        </div>\n                                                        {platformAddresses.length ===\n                                                        0 ? (\n                                                            <select\n                                                                className=\"form-control\"\n                                                                disabled={true}\n                                                            >\n                                                                <option>\n                                                                    {t(\n                                                                        \"mint:payer.no_address\"\n                                                                    )}\n                                                                </option>\n                                                            </select>\n                                                        ) : (\n                                                            <div>\n                                                                <select\n                                                                    className=\"form-control\"\n                                                                    value={\n                                                                        feePayer\n                                                                    }\n                                                                    defaultValue={\n                                                                        \"default\"\n                                                                    }\n                                                                    onChange={\n                                                                        this\n                                                                            .handleChangeFeePayer\n                                                                    }\n                                                                >\n                                                                    <option\n                                                                        value=\"default\"\n                                                                        disabled={\n                                                                            true\n                                                                        }\n                                                                    >\n                                                                        {t(\n                                                                            \"mint:payer.select_address\"\n                                                                        )}\n                                                                    </option>\n                                                                    {platformAddresses.map(\n                                                                        pa => (\n                                                                            <option\n                                                                                value={\n                                                                                    pa.address\n                                                                                }\n                                                                                key={\n                                                                                    pa.address\n                                                                                }\n                                                                            >\n                                                                                CCC{\" \"}\n                                                                                {t(\n                                                                                    \"main:address\",\n                                                                                    {\n                                                                                        index:\n                                                                                            pa.index +\n                                                                                            1\n                                                                                    }\n                                                                                )}\n                                                                            </option>\n                                                                        )\n                                                                    )}\n                                                                </select>\n                                                                {feePayer &&\n                                                                    availableQuarkList[\n                                                                        feePayer\n                                                                    ] && (\n                                                                        <span className=\"available-ccc-text number pl-2 pr-2\">\n                                                                            {availableQuarkList[\n                                                                                feePayer\n                                                                            ]!.toLocaleString()}{\" \"}\n                                                                            CCC\n                                                                        </span>\n                                                                    )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div className=\"submit-btn-container\">\n                                            <button\n                                                disabled={isSendingTx}\n                                                type=\"submit\"\n                                                className=\"btn btn-primary square w-100 send-btn\"\n                                                onClick={this.mintAsset}\n                                            >\n                                                <Trans\n                                                    i18nKey={\"mint:mint_btn\"}\n                                                />\n                                            </button>\n                                        </div>\n                                    </div>\n                                )}\n                                {isSendingTx && (\n                                    <div className=\"minting-panel d-flex align-items-center justify-content-center\">\n                                        <Spinner\n                                            name=\"line-scale\"\n                                            color=\"white\"\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        ) : (\n                            <span className=\"no-address-label\">\n                                <Trans i18nKey=\"mint:error.asset.required\" />\n                            </span>\n                        )}\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n\n    private handleChangeSelectAddress = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.setState({ selectedAddress: event.target.value });\n    };\n\n    private checkNameValidation = () => {\n        const { name } = this.state;\n        if (name.trim() === \"\") {\n            this.setState({\n                isNameValid: false,\n                nameError: this.props.t(\"mint:error.name.required\")\n            });\n            return false;\n        }\n        this.setState({\n            isNameValid: true,\n            nameError: undefined\n        });\n        return true;\n    };\n\n    private checkSupplyValidation = () => {\n        const { supply } = this.state;\n        if (supply.trim() === \"\") {\n            this.setState({\n                isSupplyValid: false,\n                supplyError: this.props.t(\"mint:error.supply.required\")\n            });\n            return false;\n        }\n\n        const amountSupply = new BigNumber(supply);\n        if (amountSupply.isNaN() || amountSupply.lt(0)) {\n            this.setState({\n                isSupplyValid: false,\n                supplyError: this.props.t(\"mint:error.supply.invalid\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isSupplyValid: true,\n            supplyError: undefined\n        });\n        return true;\n    };\n\n    private checkFeeValidation = () => {\n        const { fee, feePayer } = this.state;\n        const { availableQuarkList } = this.props;\n\n        if (!feePayer) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.not_selected\")\n            });\n            return false;\n        }\n        const availableQuark = availableQuarkList[feePayer];\n        if (!availableQuark) {\n            throw Error(this.props.t(\"mint:error.fee.invalid_balance\"));\n        }\n        if (fee.trim() === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.minimum\", {\n                    fee: MinimumFee\n                })\n            });\n            return false;\n        }\n\n        if (availableQuark.value.lt(amountFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.minimum_balance\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleChangeFee = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            fee: event.target.value\n        });\n    };\n\n    private handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            name: event.target.value\n        });\n    };\n\n    private handleDescriptionChange = (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        this.setState({\n            description: event.target.value\n        });\n    };\n\n    private handleIconURLChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            iconURL: event.target.value\n        });\n    };\n\n    private handleSupplyChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            supply: event.target.value\n        });\n    };\n\n    private handleChangeFeePayer = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.selectFeePayer(event.target.value);\n    };\n\n    private selectFeePayer = (address: string) => {\n        this.setState({\n            feePayer: address,\n            fee: `${MinimumFee}`,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n        this.props.fetchAvailableQuark(address);\n    };\n\n    private mintAsset = async () => {\n        const { networkId, passphrase } = this.props;\n        const { selectedAddress: address } = this.state;\n        const {\n            name,\n            description,\n            supply,\n            iconURL,\n            fee,\n            feePayer\n        } = this.state;\n        if (!this.checkNameValidation()) {\n            return;\n        }\n        if (!this.checkSupplyValidation()) {\n            return;\n        }\n        if (!this.checkFeeValidation()) {\n            return;\n        }\n        this.setState({ isSendingTx: true });\n        const signedTx = await TxUtil.createMintAssetTx({\n            name,\n            supply: new U64(supply),\n            iconURL,\n            description,\n            recipient: address!,\n            networkId,\n            fee: new U64(fee),\n            feePayer: feePayer!,\n            passphrase\n        });\n        try {\n            await this.props.sendSignedTransaction(\n                address!,\n                signedTx,\n                feePayer!\n            );\n            this.setState({ isSentTx: true });\n        } catch (e) {\n            toast.error(\"Server is not responding.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            console.error(e);\n        }\n        this.setState({ isSendingTx: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => {\n    const platformAddresses = state.walletReducer.platformAddresses;\n    const availableQuarkList = state.accountReducer.availableQuark;\n    const passphrase = state.globalReducer.passphrase!;\n    const networkId = state.globalReducer.networkId;\n    const assetAddresses = state.walletReducer.assetAddresses;\n    return {\n        assetAddresses,\n        platformAddresses,\n        availableQuarkList,\n        passphrase,\n        networkId\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    },\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(\n                address,\n                signedTransaction,\n                feePayer\n            )\n        );\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(MintAsset));\n","import React from \"react\";\nimport \"./NotFound.css\";\n\nexport default class NotFound extends React.Component<any, any> {\n    public render() {\n        return (\n            <div id=\"Not-found\">\n                <div className=\"not-found\">\n                    <div className=\"not-found-404\">\n                        <h3>Oops! Page not found</h3>\n                        <h1>\n                            <span>4</span>\n                            <span>0</span>\n                            <span>4</span>\n                        </h1>\n                    </div>\n                    <h2>\n                        we are sorry, but the page you requested was not found\n                    </h2>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { isKeystoreExisted } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\n\ninterface State {\n    isKeyExisted?: boolean | null;\n}\n\ninterface OwnProps {\n    component: any;\n    exact?: boolean;\n    path: string;\n}\n\ninterface StateProps {\n    passphrase?: string | null;\n}\n\ntype Props = StateProps & OwnProps;\nclass PrivateRoute extends React.Component<Props, State> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            isKeyExisted: undefined\n        };\n    }\n\n    public componentDidUpdate() {\n        const { passphrase } = this.props;\n        const { isKeyExisted } = this.state;\n        if (!passphrase && isKeyExisted == null) {\n            this.checkLogin();\n        }\n    }\n\n    public componentDidMount() {\n        const { passphrase } = this.props;\n        const { isKeyExisted } = this.state;\n        if (!passphrase && isKeyExisted == null) {\n            this.checkLogin();\n        }\n    }\n\n    public render() {\n        const { passphrase, component: Component, ...rest } = this.props;\n        const { isKeyExisted } = this.state;\n        return (\n            <Route\n                {...rest}\n                // tslint:disable-next-line:jsx-no-lambda\n                render={props =>\n                    passphrase ? (\n                        <Component {...props} />\n                    ) : isKeyExisted == null ? (\n                        <div>Loading...</div>\n                    ) : isKeyExisted ? (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: props.location }\n                            }}\n                        />\n                    ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/selectKeyfile\"\n                            }}\n                        />\n                    )\n                }\n            />\n        );\n    }\n\n    private checkLogin = async () => {\n        const keyExisted = await isKeystoreExisted();\n        if (keyExisted) {\n            this.setState({ isKeyExisted: true });\n        } else {\n            this.setState({ isKeyExisted: false });\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    passphrase: state.globalReducer.passphrase\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"reactstrap\";\nimport Form from \"reactstrap/lib/Form\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { clearKeystore, importMnemonic } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions, { Action } from \"../../redux/global/globalActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport \"./RestoreWallet.css\";\n\ninterface State {\n    secretPhrase: string;\n    passphrase: string;\n    passphraseConfirm: string;\n    isPassphraseValid?: boolean;\n    passphraseError?: string;\n    isPassphraseConfirmValid?: boolean;\n    passphraseConfirmError?: string;\n    username: string;\n    isUsernameValid?: boolean;\n    usernameError?: string;\n}\n\ninterface DispatchProps {\n    login: (passpharase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps;\nclass RestoreWallet extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            secretPhrase: \"\",\n            passphrase: \"\",\n            passphraseConfirm: \"\",\n            isPassphraseValid: undefined,\n            passphraseError: undefined,\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined,\n            username: \"\",\n            isUsernameValid: undefined,\n            usernameError: undefined\n        };\n    }\n    public async componentDidMount() {\n        const { clearData } = this.props;\n        clearPassphrase();\n        clearData();\n        clearWalletKeys();\n        await clearKeystore();\n    }\n    public render() {\n        const { t } = this.props;\n        const {\n            passphrase,\n            passphraseConfirm,\n            isPassphraseConfirmValid,\n            isPassphraseValid,\n            passphraseConfirmError,\n            passphraseError,\n            secretPhrase,\n            username,\n            isUsernameValid,\n            usernameError\n        } = this.state;\n        return (\n            <Container className=\"Restore-wallet animated fadeIn\">\n                <div className=\"close-btn\">\n                    <Link to=\"/selectKeyfile\">\n                        <FontAwesomeIcon icon=\"times\" className=\"icon\" />\n                    </Link>\n                </div>\n                <Form\n                    className=\"restore-content\"\n                    onSubmit={this.handleOnFormSubmit}\n                >\n                    <div className=\"title-container\">\n                        <h4 className=\"title\">\n                            <Trans i18nKey=\"restore:title\" />\n                        </h4>\n                    </div>\n                    <div className=\"description\">\n                        <Trans i18nKey=\"restore:description\" />\n                    </div>\n                    <div className=\"phrase-container\">\n                        <textarea\n                            className=\"phrase-input\"\n                            value={secretPhrase}\n                            onChange={this.handleChangeSecretPhraseInput}\n                        />\n                    </div>\n                    <div className=\"username-input-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:name.label\")}\n                            onChange={this.handleUsernameInput}\n                            value={username}\n                            showValidation={true}\n                            placeholder={t(\"restore:name.placeholder\")}\n                            type=\"text\"\n                            isValid={isUsernameValid}\n                            error={usernameError}\n                            onBlur={this.checkUsernameValid}\n                        />\n                    </div>\n                    <div className=\"passphrase-input-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:password.label\")}\n                            onChange={this.handlePassphraseInput}\n                            value={passphrase}\n                            showValidation={true}\n                            placeholder={t(\"restore:password.placeholder\")}\n                            type=\"password\"\n                            isValid={isPassphraseValid}\n                            error={passphraseError}\n                            onBlur={this.checkPassphraseValid}\n                        />\n                    </div>\n                    <div className=\"passphrase-confirm-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:confirm.label\")}\n                            onChange={this.handlePassphraseConfirmInput}\n                            value={passphraseConfirm}\n                            showValidation={true}\n                            placeholder={t(\"restore:confirm.placeholder\")}\n                            type=\"password\"\n                            isValid={isPassphraseConfirmValid}\n                            error={passphraseConfirmError}\n                            onBlur={this.checkPassphraseConfirm}\n                        />\n                    </div>\n                    <div className=\"password-description\">\n                        <span>\n                            <Trans i18nKey=\"restore:mnemonic.detail\" />\n                        </span>\n                    </div>\n                    <div className=\"main-btn-container\">\n                        <button\n                            className=\"btn btn-primary reverse square main-btn\"\n                            type=\"submit\"\n                        >\n                            {t(\"restore:ok\")}\n                        </button>\n                    </div>\n                </Form>\n            </Container>\n        );\n    }\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleSubmit();\n    };\n\n    private handleSubmit = async () => {\n        const { passphrase, username, secretPhrase } = this.state;\n        const { t, login, history } = this.props;\n\n        if (!this.checkUsernameValid()) {\n            return;\n        }\n\n        if (!this.checkPassphraseValid()) {\n            return;\n        }\n\n        if (!this.checkPassphraseConfirm()) {\n            return;\n        }\n        const splitPassphrases = secretPhrase.match(/\\S+/g);\n\n        if (!splitPassphrases || splitPassphrases.length !== 12) {\n            toast.error(t(\"restore:error.mnemonic.invalid\"), {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        try {\n            localStorage.setItem(\"USERNAME\", username!);\n            await importMnemonic(splitPassphrases.join(\" \"), passphrase);\n            await login(passphrase!);\n            history.push(`/`);\n        } catch (e) {\n            toast.error(t(\"restore:error.mnemonic.invalid\"), {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n        }\n    };\n\n    private handleChangeSecretPhraseInput = (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        this.setState({ secretPhrase: event.target.value });\n    };\n\n    private checkPassphraseValid = () => {\n        const { t } = this.props;\n        const { passphrase } = this.state;\n        if (passphrase.length < 8) {\n            this.setState({\n                passphraseError: t(\"restore:error.password.minimum\"),\n                isPassphraseValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: true\n        });\n        return true;\n    };\n\n    private checkUsernameValid = () => {\n        const { t } = this.props;\n        const { username } = this.state;\n        if (username === \"\") {\n            this.setState({\n                isUsernameValid: false,\n                usernameError: t(\"restore:error.name.required\")\n            });\n            return false;\n        }\n        if (username.length > 20) {\n            this.setState({\n                usernameError: t(\"restore:error.name.maximum\"),\n                isUsernameValid: false\n            });\n            return false;\n        }\n        this.setState({\n            isUsernameValid: true,\n            usernameError: undefined\n        });\n        return true;\n    };\n\n    private handleUsernameInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            username: event.target.value,\n            usernameError: undefined,\n            isUsernameValid: undefined\n        });\n    };\n\n    private checkPassphraseConfirm = () => {\n        const { t } = this.props;\n        const { passphrase, passphraseConfirm } = this.state;\n        if (passphrase !== passphraseConfirm) {\n            this.setState({\n                passphraseConfirmError: t(\"restore:error.confirm.mismatch\"),\n                isPassphraseConfirmValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: true\n        });\n        return true;\n    };\n\n    private handlePassphraseInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: undefined,\n            passphraseConfirm: \"\",\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined\n        });\n        this.setState({ passphrase: event.target.value });\n    };\n\n    private handlePassphraseConfirmInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n        this.setState({ passphraseConfirm: event.target.value });\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(globalActions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(globalActions.clearData());\n    }\n});\nexport default connect(\n    undefined,\n    mapDispatchToProps\n)(withTranslation()(withRouter(RestoreWallet)));\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { WalletAddress } from \"../../model/address\";\nimport { clearKeystore } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions from \"../../redux/global/globalActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport Logo from \"./img/logo-vertical.svg\";\nimport CreateNewWalletIconHover from \"./img/plus-hover.svg\";\nimport CreateNewWalletIcon from \"./img/plus-standard.svg\";\nimport ImportKeyIconHover from \"./img/restore-hover.svg\";\nimport ImportKeyIcon from \"./img/restore-standard.svg\";\nimport \"./SelectKeyFile.css\";\n\ninterface StateProps {\n    creatingAddresses?: WalletAddress[] | null;\n    walletName?: string | null;\n}\n\ninterface DispatchProps {\n    clearData: () => void;\n}\n\ninterface State {\n    isImportBtnHover: boolean;\n    isCreateBtnHover: boolean;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps & StateProps;\nclass SelectKeyFile extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isCreateBtnHover: false,\n            isImportBtnHover: false\n        };\n    }\n    public async componentDidMount() {\n        await clearKeystore();\n        clearWalletKeys();\n        clearPassphrase();\n        this.props.clearData();\n    }\n    public render() {\n        const { isImportBtnHover, isCreateBtnHover } = this.state;\n        return (\n            <Container className=\"Select-key-file animated fadeIn\">\n                <div className=\"text-center title-container\">\n                    <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    <h1 className=\"mt-4 logo-title\">Wallet</h1>\n                </div>\n                <div className=\"welcome-text-container\">\n                    <h4 className=\"welcome-text\">\n                        Welcome to CodeChain wallet\n                    </h4>\n                    <div>\n                        <span className=\"description-text\">\n                            <Trans i18nKey=\"create:select.title\" />\n                        </span>\n                    </div>\n                </div>\n                <div className=\"button-container d-flex justify-content-center\">\n                    <div\n                        className=\"button-item d-flex align-items-center justify-content-center\"\n                        onClick={this.onClickCreateWallet}\n                        onMouseEnter={this.handleCreateButtonHover}\n                        onMouseLeave={this.handleCreateButtonOut}\n                    >\n                        <div>\n                            <div>\n                                {isCreateBtnHover ? (\n                                    <img\n                                        src={CreateNewWalletIconHover}\n                                        alt={\"create\"}\n                                        className=\"icon\"\n                                    />\n                                ) : (\n                                    <img\n                                        src={CreateNewWalletIcon}\n                                        alt={\"create\"}\n                                        className=\"icon\"\n                                    />\n                                )}\n                            </div>\n                            <div className=\"text\">\n                                <Trans i18nKey=\"create:select.create.title\" />\n                            </div>\n                            <div className=\"button-description\">\n                                <span>\n                                    <Trans i18nKey=\"create:select.create.detail\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        className=\"button-item d-flex justify-content-center\"\n                        onClick={this.onClickRestore}\n                        onMouseEnter={this.handleImportButtonHover}\n                        onMouseLeave={this.handleImportButtopOut}\n                    >\n                        <div>\n                            <div>\n                                {isImportBtnHover ? (\n                                    <img\n                                        src={ImportKeyIconHover}\n                                        alt={\"import\"}\n                                        className=\"icon\"\n                                    />\n                                ) : (\n                                    <img\n                                        src={ImportKeyIcon}\n                                        alt={\"import\"}\n                                        className=\"icon\"\n                                    />\n                                )}\n                            </div>\n                            <div className=\"text\">\n                                <Trans i18nKey=\"create:select.restore.title\" />\n                            </div>\n                            <div className=\"button-description\">\n                                <span>\n                                    <Trans i18nKey=\"create:select.restore.detail\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n    private handleImportButtonHover = () => {\n        this.setState({ isImportBtnHover: true });\n    };\n    private handleImportButtopOut = () => {\n        this.setState({ isImportBtnHover: false });\n    };\n    private handleCreateButtonHover = () => {\n        this.setState({ isCreateBtnHover: true });\n    };\n    private handleCreateButtonOut = () => {\n        this.setState({ isCreateBtnHover: false });\n    };\n    private onClickRestore = () => {\n        const { history } = this.props;\n        history.push(`/restoreWallet`);\n    };\n    private onClickCreateWallet = () => {\n        const { history } = this.props;\n        history.push(`/createWallet`);\n    };\n}\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    clearData: () => {\n        dispatch(globalActions.clearData());\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withTranslation(\"select\")(withRouter(SelectKeyFile)));\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faAngleDoubleLeft,\n    faAngleDoubleRight,\n    faAngleLeft,\n    faAngleRight,\n    faArrowAltCircleDown,\n    faArrowCircleDown,\n    faArrowCircleRight,\n    faArrowLeft,\n    faArrowRight,\n    faBars,\n    faChevronLeft,\n    faCircle,\n    faCopy,\n    faEllipsisH,\n    faExchangeAlt,\n    faExclamationCircle,\n    faFileDownload,\n    faInfoCircle,\n    faLock,\n    faPlus,\n    faPlusCircle,\n    faQuestionCircle,\n    faRedoAlt,\n    faTimes,\n    faTrashAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport i18n from \"../../i18next\";\nimport { ReducerConfigure } from \"../../redux\";\nimport Account from \"../Account/Account\";\nimport AddressList from \"../AddressList/AddressList\";\nimport AssetDetail from \"../AssetDetail/AssetDetail\";\nimport AssetList from \"../AssetList/AssetList\";\nimport CreateWallet from \"../CreateWallet/CreateWallet\";\nimport Footer from \"../Footer\";\nimport Header from \"../Header/Header\";\nimport Login from \"../Login/Login\";\nimport MintAsset from \"../MintAsset\";\nimport NotFound from \"../NotFound/NotFound\";\nimport PrivateRoute from \"../PrivateRoute/PrivateRoute\";\nimport RestoreWallet from \"../RestoreWallet/RestoreWallet\";\nimport SelectKeyFile from \"../SelectKeyFile/SelectKeyFile\";\nimport \"./App.css\";\n\nlibrary.add(\n    faPlus,\n    faTrashAlt,\n    faFileDownload,\n    faBars,\n    faChevronLeft,\n    faArrowAltCircleDown,\n    faPlusCircle,\n    faTimes,\n    faInfoCircle,\n    faArrowLeft,\n    faCircle,\n    faEllipsisH,\n    faArrowCircleRight,\n    faArrowCircleDown,\n    faExchangeAlt,\n    faCopy,\n    faArrowRight,\n    faRedoAlt,\n    faExclamationCircle,\n    faQuestionCircle,\n    faChevronLeft,\n    faAngleRight,\n    faAngleDoubleRight,\n    faAngleLeft,\n    faAngleDoubleLeft,\n    faLock\n);\n\ninterface StateProps {\n    passphrase?: string | null;\n}\ntype Props = StateProps;\nclass App extends React.Component<Props, any> {\n    private appRef: React.RefObject<any>;\n    public constructor(props: any) {\n        super(props);\n        this.appRef = React.createRef();\n    }\n    public render() {\n        const { passphrase } = this.props;\n        return (\n            <I18nextProvider i18n={i18n}>\n                <Router basename={process.env.PUBLIC_URL || \"/\"}>\n                    <div id=\"app\" className=\"app\" ref={this.appRef}>\n                        <ToastContainer className=\"custom-toast\" />\n                        {passphrase && <Header />}\n                        <div className=\"app-container\">\n                            <Switch>\n                                <Route path=\"/login\" component={Login} />\n                                <Route\n                                    path=\"/selectKeyfile\"\n                                    component={SelectKeyFile}\n                                />\n                                <Route\n                                    path=\"/createWallet\"\n                                    component={CreateWallet}\n                                />\n                                <Route\n                                    path=\"/restoreWallet\"\n                                    component={RestoreWallet}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/\"\n                                    component={AddressList}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/index.html\"\n                                    component={AddressList}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/mint\"\n                                    component={MintAsset}\n                                />\n                                <PrivateRoute\n                                    path=\"/:address/assets\"\n                                    component={AssetList}\n                                />\n                                <PrivateRoute\n                                    path=\"/:address/account\"\n                                    component={Account}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/:address/:assetType\"\n                                    component={AssetDetail}\n                                />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </div>\n                        <Footer />\n                    </div>\n                </Router>\n            </I18nextProvider>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    passphrase: state.globalReducer.passphrase\n});\nexport default connect(mapStateToProps)(App);\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { PlatformAccount } from \"../../model/address\";\nimport { Action, ActionType } from \"./accountActions\";\n\nexport interface AccountState {\n    availableQuark: {\n        [address: string]: U64 | null | undefined;\n    };\n    accounts: {\n        [address: string]: {\n            data?: PlatformAccount | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n}\n\nexport const accountInitState: AccountState = {\n    availableQuark: {},\n    accounts: {}\n};\n\nexport const accountReducer = (state = accountInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UpdateAvailableQuark: {\n            const address = action.data.address;\n            const availableQuark = {\n                ...state.availableQuark,\n                [address]: action.data.amount\n            };\n            return {\n                ...state,\n                availableQuark\n            };\n        }\n        case ActionType.SetFetchingAccount: {\n            const accounts = {\n                ...state.accounts,\n                [action.data.address]: {\n                    ...state.accounts[action.data.address],\n                    isFetching: true\n                }\n            };\n            return {\n                ...state,\n                accounts\n            };\n        }\n        case ActionType.UpdateAccount: {\n            const accounts = {\n                ...state.accounts,\n                [action.data.address]: {\n                    data: action.data.account,\n                    isFetching: false,\n                    updatedAt: +new Date()\n                }\n            };\n            return {\n                ...state,\n                accounts\n            };\n        }\n    }\n    return state;\n};\n","import { NetworkId } from \"../../model/address\";\nimport { Action, ActionType } from \"./globalActions\";\n\nexport interface GlobalState {\n    passphrase?: string | null;\n    networkId: NetworkId;\n}\n\nexport const globalInitState: GlobalState = {\n    passphrase: undefined,\n    networkId: \"cc\"\n};\n\nexport const globalReducer = (state = globalInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.Login: {\n            return {\n                ...state,\n                passphrase: action.data.passphrase\n            };\n        }\n        case ActionType.Logout: {\n            return {\n                ...state,\n                passphrase: undefined\n            };\n        }\n        case ActionType.UpdateNetwork: {\n            return {\n                ...state,\n                networkId: action.data.networkId\n            };\n        }\n    }\n    return state;\n};\n","import { WalletAddress } from \"../../model/address\";\nimport { Action, ActionType } from \"./walletActions\";\n\nexport interface WalletState {\n    platformAddresses?: WalletAddress[] | null;\n    assetAddresses?: WalletAddress[] | null;\n    isLoadingPlatformAddresses?: boolean | null;\n    isLoadingAssetAddresses?: boolean | null;\n}\n\nexport const walletInitState: WalletState = {\n    platformAddresses: undefined,\n    assetAddresses: undefined,\n    isLoadingPlatformAddresses: undefined,\n    isLoadingAssetAddresses: undefined\n};\n\nexport const walletReducer = (state = walletInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UpdateWalletAssetAddresses:\n            return {\n                ...state,\n                assetAddresses: action.data.assetAddresses\n            };\n        case ActionType.UpdateWalletPlatformAddresses:\n            return {\n                ...state,\n                platformAddresses: action.data.platformAddresses\n            };\n        case ActionType.ClearWalletAddresses: {\n            return {\n                ...state,\n                platformAddresses: undefined,\n                assetAddresses: undefined\n            };\n        }\n        case ActionType.SetLoadingAssetAddresses: {\n            return {\n                ...state,\n                isLoadingAssetAddresses: action.data.isLoading\n            };\n        }\n        case ActionType.SetLoadingPlatformAddresses: {\n            return {\n                ...state,\n                isLoadingPlatformAddresses: action.data.isLoading\n            };\n        }\n    }\n    return state;\n};\n","import { loadingBarReducer } from \"react-redux-loading-bar\";\nimport { combineReducers } from \"redux\";\nimport { accountReducer, AccountState } from \"./account/accountReducer\";\nimport { assetReducer, AssetState } from \"./asset/assetReducer\";\nimport { chainReducer, ChainState } from \"./chain/chainReducer\";\nimport { ActionType } from \"./global/globalActions\";\nimport { globalReducer, GlobalState } from \"./global/globalReducer\";\nimport { walletReducer, WalletState } from \"./wallet/walletReducer\";\n\nexport interface ReducerConfigure {\n    globalReducer: GlobalState;\n    walletReducer: WalletState;\n    assetReducer: AssetState;\n    chainReducer: ChainState;\n    accountReducer: AccountState;\n}\n\nconst appReducer = combineReducers({\n    globalReducer,\n    walletReducer,\n    assetReducer,\n    chainReducer,\n    accountReducer,\n    loadingBar: loadingBarReducer\n});\n\nconst rootReducer = (state: any, action: any) => {\n    if (action.type === ActionType.ClearData) {\n        state = undefined;\n    }\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === \"installed\") {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    \"New content is available; please refresh.\"\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    \"Content is cached for offline use.\"\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\")!.indexOf(\"javascript\") ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport {\n    applyMiddleware as applyMiddlewareChrome,\n    Store\n} from \"react-chrome-redux\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport App from \"./components/App/App\";\nimport rootReducer from \"./redux\";\nimport { unregister } from \"./registerServiceWorker\";\nimport \"./styles/index.css\";\n\nif (process.env.REACT_APP_BUILD_TARGET === \"chrome-extension\") {\n    const store = new Store({\n        portName: \"WALLET_APP\"\n    });\n\n    // Apply middleware to proxy store\n    const middleware = [thunk, logger];\n    const storeWithMiddleware = applyMiddlewareChrome(store, ...middleware);\n\n    store.ready().then(() => {\n        ReactDOM.render(\n            <Provider store={storeWithMiddleware}>\n                <App />\n            </Provider>,\n            document.getElementById(\"root\") as HTMLElement\n        );\n    });\n} else {\n    const composeEnhancers = composeWithDevTools({});\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(thunk))\n    );\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById(\"root\") as HTMLElement\n    );\n}\n\nunregister();\n","module.exports = __webpack_public_path__ + \"static/media/mainnet.ef91ce98.svg\";","module.exports = __webpack_public_path__ + \"static/media/testnet.afbd2264.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy-hover.790a3790.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.f3de9253.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons-check.ab7566d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons-error.84ba3bbf.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy-hover.790a3790.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.f3a44cac.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.31c9b562.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.11edc2fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/gitter.038f66f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/medium.e5a5b160.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.afaec1a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.a2682b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.31e76966.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.8fe1be51.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.8fe1be51.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-hover.37f5ad9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-standard.e3e35367.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-hover.61f75205.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-standard.5ed52c2c.svg\";"],"sourceRoot":""}