{"version":3,"sources":["i18next/en/index.ts","i18next/ko/index.ts","i18next/index.ts","utils/network.ts","networks/Api.ts","utils/storage.ts","model/address.ts","model/keystore.ts","utils/transaction.ts","redux/asset/assetActions.ts","redux/asset/assetReducer.ts","redux/chain/chainActions.ts","redux/chain/chainReducer.ts","redux/account/accountActions.ts","redux/wallet/walletActions.ts","redux/global/globalActions.ts","components/AddressContainer/AddressContainer.tsx","components/PayTxHistory/PayTxItem/PayTxItem.tsx","components/PayTxHistory/PayTxHistory.tsx","components/TooltipLabel/index.tsx","components/ValidationInput/ValidationInput.tsx","components/Account/SendAsset/CCCReceiverContainer/CCCReceiverItem/CCCReceiverItem.tsx","components/Account/SendAsset/CCCReceiverContainer/CCCReceiverContainer.tsx","components/Account/SendAsset/SendCCC.tsx","components/Account/Account.tsx","utils/ImageLoader/ImageLoader.tsx","components/AddressList/AddressItem/AddressItem.tsx","components/AddressList/AddressList.tsx","utils/metadata.ts","components/AssetTxHistory/AssetTxItem/AssetTxItemEntity/index.tsx","components/AssetTxHistory/AssetTxItem/AssetTxItem.tsx","components/AssetTxHistory/AssetTxHistory.tsx","components/AssetDetail/AssetDetail.tsx","components/AssetList/AssetItem/AssetItem.tsx","components/AssetList/SendAsset/ReceiverContainer/ReceiverItem/ReceiverItem.tsx","components/AssetList/SendAsset/ReceiverContainer/ReceiverContainer.tsx","components/AssetList/SendAsset/SendAsset.tsx","components/AssetList/AssetList.tsx","components/CreateWallet/CreateWallet.tsx","components/CreateWallet/ConfirmBackupPhrase/ConfirmBackupPhrase.tsx","components/CreateWallet/InputPassphrase/InputPassphrase.tsx","components/CreateWallet/ShowBackupPhrase/ShowBackupPhrase.tsx","components/Footer/index.tsx","components/ExportBackupPopup/ExportBackupPopup.tsx","components/Header/MenuButton/MenuButton.tsx","components/Header/NetworkButton/NetworkButton.tsx","components/Header/WalletSaver/index.tsx","components/Header/Header.tsx","components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/MintAsset/index.tsx","components/NotFound/NotFound.tsx","components/PrivateRoute/PrivateRoute.tsx","components/RestoreWallet/RestoreWallet.tsx","components/SelectKeyFile/SelectKeyFile.tsx","components/App/App.tsx","redux/account/accountReducer.ts","redux/global/globalReducer.ts","redux/wallet/walletReducer.ts","redux/index.ts","registerServiceWorker.ts","index.tsx","components/Header/NetworkButton/img/mainnet.svg","components/Header/NetworkButton/img/testnet.svg","components/AddressContainer/img/copy-hover.svg","components/AddressContainer/img/copy.svg","components/PayTxHistory/img/cautiondisabled.svg","components/ValidationInput/img/icons-check.svg","components/ValidationInput/img/icons-error.svg","components/Account/SendAsset/img/check_icon.svg","components/AddressList/AddressItem/img/copy-hover.svg","components/AddressList/AddressItem/img/copy.svg","components/AssetTxHistory/img/cautiondisabled.svg","components/AssetList/img/cautiondisabled.svg","components/AssetList/SendAsset/img/check_icon.svg","components/Footer/img/facebook.svg","components/Footer/img/github.svg","components/Footer/img/gitter.svg","components/Footer/img/medium.svg","components/Footer/img/telegram.svg","components/Footer/img/twitter.svg","components/Header/img/logo.svg","components/Login/img/logo-vertical.svg","components/MintAsset/img/check_icon.svg","components/SelectKeyFile/img/logo-vertical.svg","components/SelectKeyFile/img/plus-hover.svg","components/SelectKeyFile/img/plus-standard.svg","components/SelectKeyFile/img/restore-hover.svg","components/SelectKeyFile/img/restore-standard.svg"],"names":["create","confirm","mnemonic","seed","select","main","mint","restore","send","asset","ccc","welcome","backup","i18next","use","languageDetector","initReactI18next","init","fallbackLng","detection","order","lookupQuerystring","lookupLocalStorage","caches","excludeCacheFor","resources","en","ko","getIndexerHost","networkId","server","indexer","getExplorerHost","getCodeChainHost","chain","cc","tc","sc","wc","getRequest","url","a","async","axios","get","response","status","data","Error","statusText","getAggsUTXOList","address","apiHost","aggsUTXOList","Promise","all","map","aggsUTXO","getAssetByAssetType","H160","assetType","assetScheme","value","getPlatformAccount","balance","U64","seq","getUTXOListByAssetType","sendTxToGateway","tx","gatewayURl","body","post","postRequest","getPendingTransactions","transactions","transaction","type","transferAsset","outputs","output","getTxsByAddress","pagination","query","itemsPerPage","lastEvaluatedKey","firstEvaluatedKey","hasNextPage","hasPreviousPage","localstorageKeyOfPlatform","localstorageKeyOfAsset","networkIdKey","passphraseKey","getStorageKeyOfPlatform","getStorageKeyOfAsset","getPlatformKeys","platformKeysString","localStorage","getItem","JSON","parse","e","console","log","getAssetKeys","assetKeysString","clearWalletKeys","_","each","network","removeItem","clearPassphrase","sessionStorage","savePlatformKeys","platformKeys","setItem","stringify","saveAssetKeys","assetKeys","netowrkId","AddressType","cryptoKey","savePassphrase","passphrase","encryptedKey","CryptoJS","AES","encrypt","toString","isAssetAddress","isPlatformAddress","globalCCKey","dbType","getCCKey","CCKey","clearKeystore","ccKey","clear","createSeed","hdwseed","seedLength","getFirstSeedHash","getSeedHashes","seedHashes","exportMnemonic","seedHash","importMnemonic","process","CI","platformAddressPath","assetAddressPath","restoringCheckingRange","getPlatformAddressPath","index","getAssetAddressPath","restorePlatformAddresses","currentPath","platformAddresses","getPublicKeyFromSeed","path","platformPubkey","key","blake160","PlatformAddress","fromAccountId","account","eq","lastValidPlatfromPathIndex","push","Platform","pathIndex","retValue","slice","retKeys","createPlatformAddress","savedPlatformKeys","newPathIndex","length","last","createAssetAddress","savedAssetKeys","assetPubKey","AssetTransferAddress","fromTypeAndPayload","Asset","checkPassphrase","restoreAssetAddresses","assetAddresses","lastValidAssetPathIndex","ActionType","TxUtil","getAggsAsset","mintAsset","recipient","inputQuantities","outputQuantities","supply","burnQuantities","filteredInputs","filter","inputs","input","prevOut","owner","filteredBurns","burns","burn","filteredOutputs","results","filteredInput","before","newObject","plus","quantity","filteredBurn","filteredOutput","values","getAggsQuark","txList","reduce","memo","pay","receiver","signer","fee","createMintAssetTx","storedPlatformKeys","storedAssetKeys","platformKeyMapping","storedPlatformKey","assetKeyMapping","storedAssetKey","keyStore","LocalKeyStore","platform","sdk","SDK","core","createMintAssetTransaction","scheme","shardId","metadata","name","description","icon_url","iconURL","rpc","getSeq","feePayer","newSeq","t","getSignerAddress","signTransaction","signedTransaction","assetInitState","UTXOList","availableAssets","getIdForCacheUTXO","cacheAssetScheme","CacheAssetScheme","cacheAggsUTXOList","CacheAggsUTXOList","cacheUTXOList","CacheUTXOList","cacheAvailableAssets","CacheAvailableAssets","setFetchingAssetScheme","SetFetchingAssetScheme","setFetchingAggsUTXOList","SetFetchingAggsUTXOList","setFetchingUTXOList","SetFetchingUTXOList","fetchAggsUTXOListIfNeed","dispatch","getState","cachedAggsUTXOList","assetReducer","isFetching","updatedAt","Date","showLoading","globalReducer","UTXOResponse","u","setTimeout","calculateAvailableAssets","hideLoading","addressUTXOListObj","pendingTxListObj","chainReducer","pendingTxList","txListObject","addressUTXOList","txHashList","hash","validPendingTxList","pendingTx","includes","aggregatedPendingAsset","flatMap","addressConfirmedUTXO","quantities","totalAssetQuantity","lt","minus","availableAssetsValue","fetchAssetSchemeIfNeed","cachedAssetScheme","responseAssetScheme","fetchUTXOListIfNeed","id","cachedUTXOList","UTXOListResponse","fetchAvailableAssets","chainActions","fetchPendingTxListIfNeed","fetchTxListIfNeed","chainInitState","bestBlockNumber","undefined","txListById","pendingTxListById","getIdByAddressAssetType","checkingIndexingFuncForSendingTx","cachePendingTxList","CachePendingTxList","setFetchingPendingTxList","SetFetchingPendingTxList","cachedPendingTxList","assetActions","accountActions","calculateAvailableQuark","params","force","cachedTxList","SetFetchingTxList","CacheTxList","fetchTxListByAssetTypeIfNeed","cachedTxListById","SetFetchingTxListById","CacheTxListById","sendSignedTransaction","observePlatformAddress","resolve","reject","setInterval","find","fetchAvailableQuark","clearInterval","error","sendTransactionByGateway","assetAddress","gatewayURL","unsignedHash","setFetchingAccount","SetFetchingAccount","updateAccount","UpdateAccount","fetchAccountIfNeed","cachedAccount","accountReducer","accounts","accountResponse","txListObj","accountObj","aggrPendingQuark","availableQuark","UpdateAvailableQuark","amount","updateWalletPlatformAddresses","UpdateWalletPlatformAddresses","updateWalletAssetAddresses","UpdateWalletAssetAddresses","walletReducer","SetLoadingAssetAddresses","isLoading","SetLoadingPlatformAddresses","toast","position","POSITION","BOTTOM_CENTER","autoClose","closeButton","hideProgressBar","newAddresses","AddressContainer","props","hoverCopyBtn","setState","isCopyHovering","outCopyBtn","handleCopyAddress","info","state","this","backButtonPath","addressIndex","className","Link","to","icon","size","i18nKey","text","onCopy","src","copyBtnHover","copyBtn","alt","onMouseOver","onMouseOut","onBlur","React","Component","withTranslation","PayTxItem","isPending","timestamp","aggrTx","moment","unix","format","target","rel","href","gte","toLocaleString","PayTxHistory","handleNextPage","handlePreviousPage","fetchAll","Empty","pendingTimestamp","onClick","connect","options","TooltipLabel","uniqueId","closeTooltip","tooltipOpen","toggleTooltip","makeId","possible","i","charAt","Math","floor","random","document","addEventListener","removeEventListener","tooltip","Tooltip","trigger","isOpen","toggle","ValidationInput","isFocus","onChange","placeholder","labelText","isValid","reverse","showValidation","disable","decimalScale","Label","for","autoComplete","disabled","thousandSeparator","onFocus","onBlurCapture","onValueChange","v","IconCheck","IconError","CCCReceiverItem","handleBlurAddressInput","onAddressValidationCheck","handleBlurAmountInput","onAmountValidationCheck","handleBlurFeeInput","onFeeValidationCheck","handleMaxValueClick","onAmountChange","remainingAmount","handleChangeAddressInput","event","onAddressChange","handleChangedAmountInput","handleChangeFeeInput","onFeeChange","isAddressValid","isAmountValid","addressError","amountError","isFeeValid","feeError","MinimumFee","CCCReceiverContainer","calculateRemainingCCCString","totalAmount","remainingCCC","gt","handleAddressValidationCheck","myAddress","fromString","handleAmountValidationCheck","cccString","amountCCC","BigNumber","isNaN","amountFee","handleFeeValidationCheck","feeString","minimum","handleAddressChange","handleAmountChange","handleFeeChange","handleSubmit","preventDefault","onSubmit","isSending","SendCCC","updateWindowDimensions","window","innerWidth","addModalOpenClass","removeModalOpenClass","createPayTransaction","signedTx","isSent","onClose","CheckIcon","color","ownProps","Account","refresher","openSendingCCC","scrollTo","sendingCCC","handleCloseSendingCCC","match","fetchWalletFromStorageIfNeed","aa","walletActions","Identicon","require","sha256","ImageLoader","prop","requestUrl","getDefaultImage","update","identiconData","hex","fallback","isAssetImage","host","style","verticalAlign","width","height","onError","AddressItem","handleClick","walletAddress","history","withRouter","AddressList","createWalletPlatformAddress","createWalletAssetAddress","Container","Row","Col","md","lg","xl","isLoadingAssetAddresses","isLoadingPlatformAddresses","actions","parseMetadata","AssetTxItemEntity","renderQuantity","AssetTxItem","assetHistory","AssetTxHistory","activePage","AssetDetail","availableAsset","approver","toFormat","AssetItem","onSelect","handleClickInfo","isSelected","ReceiverItem","handleRemove","onRemove","handleBlurQuantityInput","onQuantityValidationCheck","onQuantityChange","remainingAsset","handleChangeQuantitiesInput","isQuantityValid","quantityError","hideCancel","ReceiverContainer","handleChangeFeePayer","selectFeePayer","handleChangeMemo","checkMemo","isMemoValid","memoError","checkFeeValidation","availableQuarkList","handleChangeFee","handleRemoveReceiver","myIndex","receivers","receiversExceptIndex","clone","pullAt","handleAddReceiver","calculateRemainingAsset","totalQuantity","currentTotal","addressValidations","handleQuantityValidationCheck","quantityString","quantityValidations","lte","newIndex","newReceivers","handleQuantityChange","returnValue","r","payer","nextProps","isSendingTx","defaultValue","pa","SendAsset","selectedAssetType","sumOfSendingAsset","m","inputUTXO","inputUTXOSum","utxo","inputAssets","fromJSON","lockScriptHash","parameters","tracker","transactionTracker","transactionOutputIndex","orderHash","createTransferInput","outputData","refundAmount","o","AssetTransferOutput","transferTx","createTransferAssetTransaction","_A","signTransactionInput","message","Metadata","gateway","isSentTx","AssetList","handleSendAssetClose","handleSelectAsset","PageState","clearData","ClearData","login","Login","logout","Logout","updateNetworkId","WalletActions","ClearWalletAddresses","UpdateNetwork","ConfirmBackupPhrase","indexToString","selectedPhraseIndex","suffledPhrases","toggleSelectPhrase","selectedPhrasesIndex","sp","shuffle","phrases","onConfirm","join","partial","isEqual","InputPassphrase","handleTOCClick","hasAgreeTOC","checked","handlePPClick","hasAgreePP","handleOnFormSubmit","username","checkUsernameValid","checkPassphraseValid","checkPassphraseConfirm","isSubmitted","passphraseError","isPassphraseValid","passphraseConfirm","passphraseConfirmError","isPassphraseConfirmValid","isUsernameValid","usernameError","handlePassphraseInput","handlePassphraseConfirmInput","handleUsernameInput","Form","htmlFor","ShowBackupPhrase","handleCopyPhrase","CreateWallet","handleSubmitPassphraseInput","mnemonicString","split","currentPage","showSecretPhrase","handleSubmitShowPhrase","confirmSecretPhrase","handleConfirmPhrase","inputPassPhrase","range","globalActions","Footer","onLanguageChange","lang","i18n","changeLanguage","facebook","github","gitter","twitter","medium","telegram","language","ExportBackupPopup","handleButtonClick","handlePassphrase","isValidPassphrase","checkPhrase","backupPhraseString","revealBackupPhrase","Modal","centered","ModalHeader","ModalBody","Button","MenuButton","handleSignout","openExportPopup","exportPopupOpen","popoverOpen","toggleExportPopup","Popover","placement","PopoverBody","NetworkButton","chagneNetworkId","currentNetworkId","replace","getNetworkNameById","MainNet","TestNet","WalletSaver","timer","handleClickOutside","resetTimer","handleTouchOutside","handleKeyDown","startTimer","clearTimer","clearTimeout","Header","Logo","LoginForm","onSignIn","handleOnChagne","handleOnChangePassphrase","handleSignIn","redirectToReferrer","savedNetworkId","savedPassphrase","decrypt","enc","Utf8","getPassphrase","from","location","pathname","Redirect","MintAsset","handleChangeSelectAddress","selectedAddress","checkNameValidation","trim","isNameValid","nameError","checkSupplyValidation","isSupplyValid","supplyError","amountSupply","handleNameChange","handleDescriptionChange","handleIconURLChange","handleSupplyChange","backgroundImage","NotFound","PrivateRoute","checkLogin","exist","isKeyExisted","component","rest","Route","render","RestoreWallet","secretPhrase","splitPassphrases","handleChangeSecretPhraseInput","SelectKeyFile","handleImportButtonHover","isImportBtnHover","handleImportButtopOut","handleCreateButtonHover","isCreateBtnHover","handleCreateButtonOut","onClickRestore","onClickCreateWallet","onMouseEnter","onMouseLeave","CreateNewWalletIconHover","CreateNewWalletIcon","ImportKeyIconHover","ImportKeyIcon","library","add","faPlus","faTrashAlt","faFileDownload","faBars","faChevronLeft","faArrowAltCircleDown","faPlusCircle","faTimes","faInfoCircle","faArrowLeft","faCircle","faEllipsisH","faArrowCircleRight","faArrowCircleDown","faExchangeAlt","faCopy","faArrowRight","faRedoAlt","faExclamationCircle","faQuestionCircle","faAngleRight","faAngleDoubleRight","faAngleLeft","faAngleDoubleLeft","faLock","App","appRef","createRef","basename","ref","Switch","exact","accountInitState","globalInitState","walletInitState","appReducer","combineReducers","action","currentAssetScheme","currentAggsUTXOList","currentUTXO","currentPendingTxList","UpdateBestBlockNumber","SetFetchingBestBlockNumber","currentTxList","loadingBar","loadingBarReducer","rootReducer","Boolean","hostname","REACT_APP_BUILD_TARGET","store","Store","portName","middleware","thunk","logger","storeWithMiddleware","applyMiddlewareChrome","ready","then","ReactDOM","getElementById","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c2096493.chunk.js","sourcesContent":["import asset from \"./asset.json\";\nimport backup from \"./backup.json\";\nimport create_confirm from \"./create/confirm.json\";\nimport create_mnemonic from \"./create/mnemonic.json\";\nimport create_seed from \"./create/seed.json\";\nimport create_select from \"./create/select.json\";\nimport main from \"./main.json\";\nimport mint from \"./mint.json\";\nimport restore from \"./restore.json\";\nimport send_asset from \"./send/asset.json\";\nimport send_ccc from \"./send/ccc.json\";\nimport welcome from \"./welcome.json\";\n\nexport default {\n    create: {\n        confirm: create_confirm,\n        mnemonic: create_mnemonic,\n        seed: create_seed,\n        select: create_select\n    },\n    main,\n    mint,\n    restore,\n    send: {\n        asset: send_asset,\n        ccc: send_ccc\n    },\n    welcome,\n    asset,\n    backup\n};\n","import asset from \"./asset.json\";\nimport backup from \"./backup.json\";\nimport create_confirm from \"./create/confirm.json\";\nimport create_mnemonic from \"./create/mnemonic.json\";\nimport create_seed from \"./create/seed.json\";\nimport create_select from \"./create/select.json\";\nimport main from \"./main.json\";\nimport mint from \"./mint.json\";\nimport restore from \"./restore.json\";\nimport send_asset from \"./send/asset.json\";\nimport send_ccc from \"./send/ccc.json\";\nimport welcome from \"./welcome.json\";\n\nexport default {\n    create: {\n        confirm: create_confirm,\n        mnemonic: create_mnemonic,\n        seed: create_seed,\n        select: create_select\n    },\n    main,\n    mint,\n    restore,\n    send: {\n        asset: send_asset,\n        ccc: send_ccc\n    },\n    welcome,\n    asset,\n    backup\n};\n","import i18next from \"i18next\";\nimport languageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport en from \"./en\";\nimport ko from \"./ko\";\n\ni18next\n    .use(languageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: \"en\",\n        detection: {\n            order: [\"querystring\", \"localStorage\"],\n\n            lookupQuerystring: \"lang\",\n            lookupLocalStorage: \"i18nextLang\",\n\n            caches: [\"localStorage\"],\n            excludeCacheFor: [\"cimode\"]\n        },\n        resources: {\n            en,\n            ko\n        }\n    });\n\nexport default i18next;\n","import { NetworkId } from \"codechain-sdk/lib/core/types\";\n\nexport function getNetworkNameById(networkId: NetworkId) {\n    switch (networkId) {\n        case \"cc\":\n            return \"MAINNET\";\n        case \"tc\":\n            return \"HUSKY\";\n        case \"sc\":\n            return \"SALUKI\";\n        case \"wc\":\n            return \"TESTNET\";\n    }\n    throw new Error(\"Unknown networkId\");\n}\n\nexport function getIndexerHost(networkId: NetworkId) {\n    return server.indexer[networkId];\n}\n\nexport function getExplorerHost(networkId: NetworkId) {\n    return server.indexer[networkId];\n}\n\nexport function getCodeChainHost(networkId: NetworkId) {\n    return server.chain[networkId];\n}\n\nconst server = {\n    indexer: {\n        cc: \"https://explorer.codechain.io\",\n        tc: \"https://husky.codechain.io/explorer\",\n        sc: \"https://saluki.codechain.io/explorer\",\n        wc: \"https://corgi.codechain.io/explorer\"\n    },\n    chain: {\n        cc: \"https://rpc.codechain.io\",\n        tc: \"http://52.79.108.1:8080\",\n        sc: \"http://52.78.210.78:8080\",\n        wc: \"https://corgi-rpc.codechain.io\"\n    }\n};\n","import axios from \"axios\";\nimport {\n    AggsUTXODoc,\n    AssetSchemeDoc,\n    TransactionDoc,\n    UTXODoc\n} from \"codechain-indexer-types\";\nimport { H160, Transaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { NetworkId } from \"codechain-sdk/lib/core/types\";\nimport { PlatformAccount } from \"../model/address\";\nimport { getIndexerHost } from \"../utils/network\";\n\nasync function getRequest<T>(url: string) {\n    const response = await axios.get<T>(url);\n    if (response.status >= 200 && response.status < 300) {\n        return response.data;\n    }\n    throw new Error(response.statusText);\n}\n\nasync function postRequest<T>(url: string, body: any) {\n    const response = await axios.post<T>(url, body);\n    if (response.status >= 200 && response.status < 300) {\n        return response.data;\n    }\n    throw new Error(response.statusText);\n}\n\nexport async function getAggsUTXOList(\n    address: string,\n    networkId: NetworkId\n): Promise<AggsUTXODoc[]> {\n    const apiHost = getIndexerHost(networkId);\n    // FIXME: Read all pages\n    const { data: aggsUTXOList } = await getRequest<{ data: AggsUTXODoc[] }>(\n        `${apiHost}/api/aggs-utxo?address=${address}`\n    );\n    // FIXME: https://github.com/CodeChain-io/codechain-indexer/issues/59\n    return Promise.all(\n        aggsUTXOList.map(async (aggsUTXO: any) => {\n            const assetScheme = await getAssetByAssetType(\n                new H160(aggsUTXO.assetType),\n                networkId\n            );\n            aggsUTXO.assetScheme = assetScheme;\n            return aggsUTXO;\n        })\n    );\n}\n\nexport async function getAssetByAssetType(\n    assetType: H160,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    return getRequest<AssetSchemeDoc>(\n        `${apiHost}/api/asset-scheme/${assetType.value}`\n    );\n}\n\nexport async function getPlatformAccount(\n    address: string,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    const response = await getRequest<{ balance: string; seq: string }>(\n        `${apiHost}/api/account/${address}`\n    );\n\n    if (response) {\n        return {\n            balance: new U64(response.balance),\n            seq: new U64(response.seq)\n        } as PlatformAccount;\n    } else {\n        return {\n            balance: new U64(0),\n            seq: new U64(0)\n        } as PlatformAccount;\n    }\n}\n\nexport async function getUTXOListByAssetType(\n    address: string,\n    assetType: H160,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    // FIXME: Read all pages\n    const response = await getRequest<{ data: UTXODoc[] }>(\n        `${apiHost}/api/utxo?assetType=${\n            assetType.value\n        }&address=${address}&itemsPerPage=100`\n    );\n    return response.data;\n}\n\nexport function sendTxToGateway(tx: Transaction, gatewayURl: string) {\n    return postRequest<void>(`${gatewayURl}`, {\n        tx\n    });\n}\n\nexport async function getPendingTransactions(\n    address: string,\n    networkId: NetworkId\n) {\n    const apiHost = getIndexerHost(networkId);\n    const { data: transactions } = await getRequest<{ data: TransactionDoc[] }>(\n        `${apiHost}/api/pending-tx?itemsPerPage=100&address=${address}`\n    );\n\n    // FIXME: This is temporary code. https://github.com/CodeChain-io/codechain-indexer/issues/5\n    await Promise.all(\n        transactions.map(async transaction => {\n            if (transaction.type === \"transferAsset\") {\n                await Promise.all(\n                    transaction.transferAsset.outputs.map(async output => {\n                        const assetScheme: any = await getRequest<\n                            AssetSchemeDoc\n                        >(`${apiHost}/api/asset-scheme/${output.assetType}`);\n                        output.assetScheme = assetScheme;\n                    })\n                );\n            }\n        })\n    );\n    return transactions;\n}\n\nexport async function getTxsByAddress(\n    address: string,\n    pagination: {\n        lastEvaluatedKey?: string;\n        firstEvaluatedKey?: string;\n        itemsPerPage: number;\n    },\n    networkId: NetworkId,\n    assetType?: H160\n) {\n    const apiHost = getIndexerHost(networkId);\n    let query = `${apiHost}/api/tx?address=${address}&itemsPerPage=${\n        pagination.itemsPerPage\n    }`;\n    if (assetType) {\n        query += `&assetType=${assetType.value}`;\n    }\n    if (pagination.lastEvaluatedKey) {\n        query += `&lastEvaluatedKey=${pagination.lastEvaluatedKey}`;\n    }\n    if (pagination.firstEvaluatedKey) {\n        query += `&firstEvaluatedKey=${pagination.firstEvaluatedKey}`;\n    }\n    const {\n        data: transactions,\n        hasNextPage,\n        hasPreviousPage,\n        lastEvaluatedKey,\n        firstEvaluatedKey\n    } = await getRequest<{\n        data: TransactionDoc[];\n        hasNextPage: boolean;\n        hasPreviousPage: boolean;\n        lastEvaluatedKey?: string;\n        firstEvaluatedKey?: string;\n    }>(query);\n\n    // FIXME: This is temporary code. https://github.com/CodeChain-io/codechain-indexer/issues/5\n    await Promise.all(\n        transactions.map(async transaction => {\n            if (transaction.type === \"transferAsset\") {\n                await Promise.all(\n                    transaction.transferAsset.outputs.map(async output => {\n                        const assetScheme: any = await getRequest<\n                            AssetSchemeDoc\n                        >(`${apiHost}/api/asset-scheme/${output.assetType}`);\n                        output.assetScheme = assetScheme;\n                    })\n                );\n            }\n        })\n    );\n    return {\n        transactions,\n        hasNextPage,\n        hasPreviousPage,\n        lastEvaluatedKey,\n        firstEvaluatedKey\n    };\n}\n","import CryptoJS from \"crypto-js\";\nimport _ from \"lodash\";\nimport { AddressType, NetworkId } from \"../model/address\";\n\nconst localstorageKeyOfPlatform = \"platformKeys\";\nconst localstorageKeyOfAsset = \"assetKeys\";\nconst networkIdKey = \"netowrkId\";\nconst passphraseKey = \"authKey\";\nexport interface StoredKey {\n    pathIndex: number;\n    type: AddressType;\n    key: string;\n}\n\nfunction getStorageKeyOfPlatform(networkId: NetworkId) {\n    return `${localstorageKeyOfPlatform}_${networkId}`;\n}\n\nfunction getStorageKeyOfAsset(networkId: NetworkId) {\n    return `${localstorageKeyOfAsset}_${networkId}`;\n}\n\nexport function getPlatformKeys(networkId: NetworkId): StoredKey[] | null {\n    const platformKeysString = localStorage.getItem(\n        getStorageKeyOfPlatform(networkId)\n    );\n    if (platformKeysString) {\n        try {\n            return JSON.parse(platformKeysString);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return null;\n}\n\nexport function getAssetKeys(networkId: NetworkId): StoredKey[] | null {\n    const assetKeysString = localStorage.getItem(\n        getStorageKeyOfAsset(networkId)\n    );\n    if (assetKeysString) {\n        try {\n            return JSON.parse(assetKeysString);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return null;\n}\n\nexport function clearWalletKeys() {\n    _.each([\"cc\", \"tc\", \"wc\", \"sc\"], network => {\n        localStorage.removeItem(getStorageKeyOfAsset(network as NetworkId));\n        localStorage.removeItem(getStorageKeyOfPlatform(network as NetworkId));\n    });\n}\n\nexport function clearPassphrase() {\n    sessionStorage.removeItem(passphraseKey);\n}\n\nexport function saveNetworkId(netowrkId: NetworkId) {\n    sessionStorage.setItem(networkIdKey, netowrkId);\n}\n\nexport function getNetworkId(): NetworkId {\n    return sessionStorage.getItem(networkIdKey) as NetworkId;\n}\n\nexport function savePlatformKeys(\n    platformKeys: StoredKey[],\n    networkId: NetworkId\n) {\n    localStorage.setItem(\n        getStorageKeyOfPlatform(networkId),\n        JSON.stringify(platformKeys)\n    );\n}\n\nexport function saveAssetKeys(assetKeys: StoredKey[], netowrkId: NetworkId) {\n    localStorage.setItem(\n        getStorageKeyOfAsset(netowrkId),\n        JSON.stringify(assetKeys)\n    );\n}\n\nconst cryptoKey = \"secret key\";\nexport function savePassphrase(passphrase: string) {\n    const encryptedKey = CryptoJS.AES.encrypt(passphrase, cryptoKey).toString();\n    sessionStorage.setItem(passphraseKey, encryptedKey);\n}\n\nexport function getPassphrase() {\n    const encryptedKey = sessionStorage.getItem(passphraseKey);\n    if (encryptedKey) {\n        return CryptoJS.AES.decrypt(encryptedKey, cryptoKey).toString(\n            CryptoJS.enc.Utf8\n        );\n    }\n    return null;\n}\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\n\nexport type NetworkId = \"cc\" | \"tc\" | \"sc\" | \"wc\";\n\nexport interface WalletAddress {\n    index: number;\n    type: AddressType;\n    address: string;\n}\n\nexport enum AddressType {\n    Platform,\n    Asset\n}\n\nexport interface PlatformAccount {\n    balance: U64;\n    seq: U64;\n}\n\nexport function isAssetAddress(address: string) {\n    return address[2] === \"a\";\n}\n\nexport function isPlatformAddress(address: string) {\n    return address[2] === \"c\";\n}\n","import { CCKey } from \"codechain-keystore\";\nimport {\n    AssetTransferAddress,\n    PlatformAddress\n} from \"codechain-sdk/lib/core/classes\";\nimport { blake160 } from \"codechain-sdk/lib/utils\";\nimport _ from \"lodash\";\nimport { getAggsUTXOList, getPlatformAccount } from \"../networks/Api\";\nimport {\n    getAssetKeys,\n    getPlatformKeys,\n    saveAssetKeys,\n    savePlatformKeys,\n    StoredKey\n} from \"../utils/storage\";\nimport { AddressType, NetworkId, WalletAddress } from \"./address\";\n\nlet dbType = \"persistent\";\nif (process.env.CI) {\n    dbType = \"in-memory\";\n}\n\nlet globalCCKey: CCKey;\nexport async function getCCKey() {\n    if (!globalCCKey) {\n        globalCCKey = await CCKey.create({ dbType });\n    }\n    return globalCCKey;\n}\n\nexport async function clearKeystore() {\n    const ccKey = await getCCKey();\n    await ccKey.clear();\n}\n\nexport async function createSeed(passphrase: string) {\n    const ccKey = await getCCKey();\n    return await ccKey.hdwseed.createSeed({ passphrase, seedLength: 128 });\n}\n\nexport async function getFirstSeedHash() {\n    const ccKey = await getCCKey();\n    const seedHashes = await ccKey.hdwseed.getSeedHashes();\n    return seedHashes[0];\n}\n\nexport async function exportMnemonic(passphrase: string) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const mnemonic = await ccKey.hdwseed.exportMnemonic({\n        seedHash,\n        passphrase\n    });\n    return mnemonic;\n}\n\nexport async function importMnemonic(mnemonic: string, passphrase: string) {\n    const ccKey = await getCCKey();\n    await ccKey.hdwseed.importMnemonic({ mnemonic, passphrase });\n}\n\nexport async function isKeystoreExisted() {\n    return CCKey.exist({ dbType });\n}\n\n// m / purpose' / coin_type' / account' / change / address_index\nconst platformAddressPath = \"m/44'/3276/0'/0/\";\nconst assetAddressPath = \"m/44'/3276/1'/0/\";\nconst restoringCheckingRange = 10;\n\nexport function getPlatformAddressPath(index: number) {\n    return platformAddressPath + index;\n}\n\nexport function getAssetAddressPath(index: number) {\n    return assetAddressPath + index;\n}\n\nexport async function restorePlatformAddresses(\n    passphrase: string,\n    networkId: NetworkId\n): Promise<WalletAddress[]> {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    let currentPath = 0;\n    const platformAddresses: WalletAddress[] = [];\n    const platformKeys: StoredKey[] = [];\n    let lastValidPlatfromPathIndex: number | undefined | null;\n    while (currentPath < restoringCheckingRange) {\n        const platformPubkey = await ccKey.hdwseed.getPublicKeyFromSeed({\n            seedHash,\n            path: platformAddressPath + currentPath,\n            passphrase\n        });\n        const key = blake160(platformPubkey);\n        const address = PlatformAddress.fromAccountId(key, {\n            networkId\n        }).value;\n        const account = await getPlatformAccount(address, networkId);\n        if (!account.seq.eq(0) || !account.balance.eq(0)) {\n            lastValidPlatfromPathIndex = currentPath;\n        }\n        platformAddresses.push({\n            index: currentPath,\n            address,\n            type: AddressType.Platform\n        });\n        platformKeys.push({\n            pathIndex: currentPath,\n            type: AddressType.Platform,\n            key\n        });\n        currentPath += 1;\n    }\n    let retValue: WalletAddress[];\n    let retKeys: StoredKey[];\n    if (lastValidPlatfromPathIndex == null) {\n        retValue = platformAddresses.slice(0, 1);\n        retKeys = platformKeys.slice(0, 1);\n    } else {\n        retValue = platformAddresses.slice(0, lastValidPlatfromPathIndex + 1);\n        retKeys = platformKeys.slice(0, lastValidPlatfromPathIndex + 1);\n    }\n    savePlatformKeys(retKeys, networkId);\n    return retValue;\n}\n\nexport async function createPlatformAddress(\n    passphrase: string,\n    networkId: NetworkId\n) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const savedPlatformKeys = getPlatformKeys(networkId);\n    let newPathIndex;\n    if (savedPlatformKeys && savedPlatformKeys.length > 0) {\n        newPathIndex = _.last(savedPlatformKeys)!.pathIndex + 1;\n    } else {\n        newPathIndex = 0;\n    }\n    const platformPubkey = await ccKey.hdwseed.getPublicKeyFromSeed({\n        seedHash,\n        path: platformAddressPath + newPathIndex,\n        passphrase\n    });\n    const key = blake160(platformPubkey);\n    if (savedPlatformKeys && savedPlatformKeys.length > 0) {\n        savePlatformKeys(\n            [\n                ...savedPlatformKeys,\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    } else {\n        savePlatformKeys(\n            [\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    }\n    const address = PlatformAddress.fromAccountId(key, {\n        networkId\n    }).value;\n    return {\n        index: newPathIndex,\n        address,\n        type: AddressType.Platform\n    };\n}\n\nexport async function createAssetAddress(\n    passphrase: string,\n    networkId: NetworkId\n) {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    const savedAssetKeys = getAssetKeys(networkId);\n    let newPathIndex;\n    if (savedAssetKeys && savedAssetKeys.length > 0) {\n        newPathIndex = _.last(savedAssetKeys)!.pathIndex + 1;\n    } else {\n        newPathIndex = 0;\n    }\n    const assetPubKey = await ccKey.hdwseed.getPublicKeyFromSeed({\n        seedHash,\n        path: assetAddressPath + newPathIndex,\n        passphrase\n    });\n    const key = blake160(assetPubKey);\n    if (savedAssetKeys && savedAssetKeys.length > 0) {\n        saveAssetKeys(\n            [\n                ...savedAssetKeys,\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    } else {\n        saveAssetKeys(\n            [\n                {\n                    pathIndex: newPathIndex,\n                    type: AddressType.Platform,\n                    key\n                }\n            ],\n            networkId\n        );\n    }\n    const address = AssetTransferAddress.fromTypeAndPayload(1, key, {\n        networkId\n    }).value;\n    return {\n        index: newPathIndex,\n        address,\n        type: AddressType.Asset\n    };\n}\n\nexport async function checkPassphrase(passphrase: string) {\n    const ccKey = await getCCKey();\n    const seedHashes = await ccKey.hdwseed.getSeedHashes();\n    const seedHash = seedHashes[0];\n    try {\n        await ccKey.hdwseed.exportMnemonic({ seedHash, passphrase });\n        return true;\n    } catch (e) {\n        console.log(e);\n    }\n    return false;\n}\n\nexport async function restoreAssetAddresses(\n    passphrase: string,\n    networkId: NetworkId\n): Promise<WalletAddress[]> {\n    const ccKey = await getCCKey();\n    const seedHash = await getFirstSeedHash();\n    let currentPath = 0;\n    const assetAddresses: WalletAddress[] = [];\n    const assetKeys: StoredKey[] = [];\n    let lastValidAssetPathIndex: number | undefined | null;\n    while (currentPath < restoringCheckingRange) {\n        const assetPubKey = await ccKey.hdwseed.getPublicKeyFromSeed({\n            seedHash,\n            path: assetAddressPath + currentPath,\n            passphrase\n        });\n        const key = blake160(assetPubKey);\n        const address = AssetTransferAddress.fromTypeAndPayload(1, key, {\n            networkId\n        }).value;\n        const aggsUTXO = await getAggsUTXOList(address, networkId);\n        if (aggsUTXO.length !== 0) {\n            lastValidAssetPathIndex = currentPath;\n        }\n        assetAddresses.push({\n            index: currentPath,\n            address,\n            type: AddressType.Asset\n        });\n        assetKeys.push({\n            type: AddressType.Asset,\n            pathIndex: currentPath,\n            key\n        });\n        currentPath += 1;\n    }\n\n    let retValue: WalletAddress[];\n    let retKeys: StoredKey[];\n    if (lastValidAssetPathIndex == null) {\n        retValue = assetAddresses.slice(0, 1);\n        retKeys = assetKeys.slice(0, 1);\n    } else {\n        retValue = assetAddresses.slice(0, lastValidAssetPathIndex + 1);\n        retKeys = assetKeys.slice(0, lastValidAssetPathIndex + 1);\n    }\n    saveAssetKeys(retKeys, networkId);\n    return retValue;\n}\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { NetworkId } from \"../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../model/keystore\";\nimport { getCodeChainHost } from \"./network\";\nimport { getAssetKeys, getPlatformKeys } from \"./storage\";\n\nfunction getAggsQuark(address: string, txList: TransactionDoc[]) {\n    return _.reduce(\n        txList,\n        (memo, tx: TransactionDoc) => {\n            let output = new U64(0);\n            let input = new U64(0);\n            if (tx.type === \"pay\") {\n                const quantity = tx.pay.quantity;\n                if (tx.pay.receiver === address) {\n                    output = U64.plus(output, quantity);\n                }\n                if (tx.signer === address) {\n                    input = U64.plus(input, quantity);\n                }\n            }\n            if (tx.signer === address) {\n                const fee = tx.fee;\n                input = U64.plus(input, fee);\n            }\n            return {\n                input: U64.plus(memo.input, input),\n                output: U64.plus(memo.output, output)\n            };\n        },\n        {\n            input: new U64(0),\n            output: new U64(0)\n        }\n    );\n}\n\nfunction getAggsAsset(\n    address: string,\n    transaction: TransactionDoc\n): {\n    assetType: string;\n    inputQuantities: U64;\n    outputQuantities: U64;\n    burnQuantities: U64;\n}[] {\n    if (transaction.type === \"mintAsset\") {\n        if (transaction.mintAsset.recipient === address) {\n            return [\n                {\n                    assetType: transaction.mintAsset.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(transaction.mintAsset.supply),\n                    burnQuantities: new U64(0)\n                }\n            ];\n        } else {\n            return [];\n        }\n    } else if (transaction.type === \"transferAsset\") {\n        const filteredInputs = _.filter(\n            transaction.transferAsset.inputs,\n            input => input.prevOut.owner === address\n        );\n\n        const filteredBurns = _.filter(\n            transaction.transferAsset.burns,\n            burn => burn.prevOut.owner === address\n        );\n\n        const filteredOutputs = _.filter(\n            transaction.transferAsset.outputs,\n            output => output.owner === address\n        );\n        const results: {\n            [assetType: string]: {\n                assetType: string;\n                inputQuantities: U64;\n                outputQuantities: U64;\n                burnQuantities: U64;\n            };\n        } = {};\n        _.each(filteredInputs, filteredInput => {\n            if (results[filteredInput.prevOut.assetType]) {\n                const before = results[filteredInput.prevOut.assetType];\n                const newObject = {\n                    ...before,\n                    inputQuantities: U64.plus(\n                        before.inputQuantities,\n                        filteredInput.prevOut.quantity\n                    )\n                };\n                results[filteredInput.prevOut.assetType] = newObject;\n            } else {\n                results[filteredInput.prevOut.assetType] = {\n                    assetType: filteredInput.prevOut.assetType,\n                    inputQuantities: new U64(filteredInput.prevOut.quantity),\n                    outputQuantities: new U64(0),\n                    burnQuantities: new U64(0)\n                };\n            }\n        });\n        _.each(filteredBurns, filteredBurn => {\n            if (results[filteredBurn.prevOut.assetType]) {\n                const before = results[filteredBurn.prevOut.assetType];\n                const newObject = {\n                    ...before,\n                    burnQuantities: U64.plus(\n                        before.burnQuantities,\n                        filteredBurn.prevOut.quantity\n                    )\n                };\n                results[filteredBurn.prevOut.assetType] = newObject;\n            } else {\n                results[filteredBurn.prevOut.assetType] = {\n                    assetType: filteredBurn.prevOut.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(0),\n                    burnQuantities: new U64(filteredBurn.prevOut.quantity)\n                };\n            }\n        });\n        _.each(filteredOutputs, filteredOutput => {\n            if (results[filteredOutput.assetType]) {\n                const before = results[filteredOutput.assetType];\n                const newObject = {\n                    ...before,\n                    outputQuantities: U64.plus(\n                        before.outputQuantities,\n                        filteredOutput.quantity\n                    )\n                };\n                results[filteredOutput.assetType] = newObject;\n            } else {\n                results[filteredOutput.assetType] = {\n                    assetType: filteredOutput.assetType,\n                    inputQuantities: new U64(0),\n                    outputQuantities: new U64(filteredOutput.quantity),\n                    burnQuantities: new U64(0)\n                };\n            }\n        });\n        return _.values(results);\n    }\n    return [];\n}\n\nasync function createMintAssetTx(data: {\n    name: string;\n    supply: U64;\n    iconURL?: string;\n    description?: string;\n    recipient: string;\n    networkId: NetworkId;\n    feePayer: string;\n    fee: U64;\n    passphrase: string;\n}) {\n    const ccKey = await getCCKey();\n    const storedPlatformKeys = getPlatformKeys(data.networkId);\n    const storedAssetKeys = getAssetKeys(data.networkId);\n    const seedHash = await getFirstSeedHash();\n    const platformKeyMapping = _.reduce(\n        storedPlatformKeys,\n        (memo, storedPlatformKey) => {\n            return {\n                ...memo,\n                [storedPlatformKey.key]: {\n                    seedHash,\n                    path: getPlatformAddressPath(storedPlatformKey.pathIndex)\n                }\n            };\n        },\n        {}\n    );\n    const assetKeyMapping = _.reduce(\n        storedAssetKeys,\n        (memo, storedAssetKey) => {\n            return {\n                ...memo,\n                [storedAssetKey.key]: {\n                    seedHash,\n                    path: getAssetAddressPath(storedAssetKey.pathIndex)\n                }\n            };\n        },\n        {}\n    );\n    const keyStore = new LocalKeyStore(ccKey, {\n        platform: platformKeyMapping,\n        asset: assetKeyMapping\n    });\n\n    const sdk = new SDK({\n        server: getCodeChainHost(data.networkId),\n        networkId: data.networkId\n    });\n    const tx = sdk.core.createMintAssetTransaction({\n        scheme: {\n            shardId: 0,\n            metadata: JSON.stringify({\n                name: data.name,\n                description: data.description,\n                icon_url: data.iconURL\n            }),\n            supply: data.supply\n        },\n        recipient: data.recipient\n    });\n\n    const seq = await sdk.rpc.chain.getSeq(data.feePayer);\n\n    const { transactions } = await sdk.rpc.chain.getPendingTransactions();\n    const newSeq =\n        seq +\n        transactions.filter(\n            t =>\n                t.getSignerAddress({ networkId: data.networkId }).toString() ===\n                data.feePayer\n        ).length;\n\n    const signedTransaction = await sdk.key.signTransaction(tx, {\n        account: data.feePayer,\n        keyStore,\n        fee: data.fee,\n        seq: newSeq,\n        passphrase: data.passphrase\n    });\n    return signedTransaction;\n}\n\nexport const TxUtil = { getAggsAsset, getAggsQuark, createMintAssetTx };\n","import { AggsUTXODoc, AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport {\n    getAggsUTXOList,\n    getAssetByAssetType,\n    getUTXOListByAssetType\n} from \"../../networks/Api\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport chainActions from \"../chain/chainActions\";\nimport { getIdForCacheUTXO } from \"./assetReducer\";\n\nexport type Action =\n    | CacheAssetScheme\n    | CacheAggsUTXOList\n    | SetFetchingAggsUTXOList\n    | SetFetchingAssetScheme\n    | CacheUTXOList\n    | SetFetchingUTXOList\n    | CacheAvailableAssets;\n\nexport enum ActionType {\n    CacheAssetScheme = \"CacheAssetScheme\",\n    CacheAggsUTXOList = \"CacheAggsUTXOList\",\n    SetFetchingAggsUTXOList = \"SetFetchingAggsUTXOList\",\n    SetFetchingAssetScheme = \"SetFetchingAssetScheme\",\n    SetFetchingUTXOList = \"SetFetchingUTXOList\",\n    CacheUTXOList = \"CacheUTXOList\",\n    CacheAvailableAssets = \"CacheAvailableAssets\"\n}\n\nexport interface CacheAssetScheme {\n    type: ActionType.CacheAssetScheme;\n    data: {\n        assetType: string;\n        assetScheme: AssetSchemeDoc;\n    };\n}\n\nexport interface CacheAggsUTXOList {\n    type: ActionType.CacheAggsUTXOList;\n    data: {\n        address: string;\n        aggsUTXOList: AggsUTXODoc[];\n    };\n}\n\nexport interface SetFetchingAggsUTXOList {\n    type: ActionType.SetFetchingAggsUTXOList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingAssetScheme {\n    type: ActionType.SetFetchingAssetScheme;\n    data: {\n        assetType: string;\n    };\n}\n\nexport interface SetFetchingUTXOList {\n    type: ActionType.SetFetchingUTXOList;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheUTXOList {\n    type: ActionType.CacheUTXOList;\n    data: {\n        address: string;\n        assetType: H160;\n        UTXOList: UTXODoc[];\n    };\n}\n\nexport interface CacheAvailableAssets {\n    type: ActionType.CacheAvailableAssets;\n    data: {\n        address: string;\n        availableAssets: {\n            assetType: string;\n            quantities: U64;\n        }[];\n    };\n}\n\nconst cacheAssetScheme = (\n    assetType: H160,\n    assetScheme: AssetSchemeDoc\n): CacheAssetScheme => ({\n    type: ActionType.CacheAssetScheme,\n    data: {\n        assetType: assetType.value,\n        assetScheme\n    }\n});\n\nconst cacheAggsUTXOList = (\n    address: string,\n    aggsUTXOList: AggsUTXODoc[]\n): CacheAggsUTXOList => ({\n    type: ActionType.CacheAggsUTXOList,\n    data: {\n        address,\n        aggsUTXOList\n    }\n});\n\nconst cacheUTXOList = (\n    address: string,\n    assetType: H160,\n    UTXOList: UTXODoc[]\n): CacheUTXOList => ({\n    type: ActionType.CacheUTXOList,\n    data: {\n        address,\n        assetType,\n        UTXOList\n    }\n});\n\nconst cacheAvailableAssets = (\n    address: string,\n    availableAssets: {\n        assetType: string;\n        quantities: U64;\n    }[]\n): CacheAvailableAssets => ({\n    type: ActionType.CacheAvailableAssets,\n    data: {\n        address,\n        availableAssets\n    }\n});\n\nconst setFetchingAssetScheme = (assetType: H160): SetFetchingAssetScheme => ({\n    type: ActionType.SetFetchingAssetScheme,\n    data: {\n        assetType: assetType.value\n    }\n});\n\nconst setFetchingAggsUTXOList = (address: string): SetFetchingAggsUTXOList => ({\n    type: ActionType.SetFetchingAggsUTXOList,\n    data: {\n        address\n    }\n});\n\nconst setFetchingUTXOList = (\n    address: string,\n    assetType: H160\n): SetFetchingUTXOList => ({\n    type: ActionType.SetFetchingUTXOList,\n    data: {\n        address,\n        assetType\n    }\n});\n\nconst fetchAssetSchemeIfNeed = (assetType: H160) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAssetScheme = getState().assetReducer.assetScheme[\n            assetType.value\n        ];\n        if (cachedAssetScheme && cachedAssetScheme.isFetching) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAssetScheme(assetType));\n            const networkId = getState().globalReducer.networkId;\n            const responseAssetScheme = await getAssetByAssetType(\n                assetType,\n                networkId\n            );\n            dispatch(cacheAssetScheme(assetType, responseAssetScheme));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAggsUTXOListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAggsUTXOList = getState().assetReducer.aggsUTXOList[\n            address\n        ];\n        if (cachedAggsUTXOList && cachedAggsUTXOList.isFetching) {\n            return;\n        }\n        if (\n            cachedAggsUTXOList &&\n            cachedAggsUTXOList.updatedAt &&\n            +new Date() - cachedAggsUTXOList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAggsUTXOList(address));\n            const networkId = getState().globalReducer.networkId;\n            const UTXOResponse = await getAggsUTXOList(address, networkId);\n            dispatch(cacheAggsUTXOList(address, UTXOResponse));\n\n            _.each(UTXOResponse, (u: any) => {\n                dispatch(\n                    cacheAssetScheme(new H160(u.assetType), u.assetScheme)\n                );\n            });\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                dispatch(calculateAvailableAssets(address));\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchUTXOListIfNeed = (address: string, assetType: H160) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const id = getIdForCacheUTXO(address, assetType);\n        const UTXOList = getState().assetReducer.UTXOList[id];\n        const cachedUTXOList = UTXOList && UTXOList[assetType.value];\n        if (cachedUTXOList && cachedUTXOList.isFetching) {\n            return;\n        }\n        if (\n            cachedUTXOList &&\n            cachedUTXOList.updatedAt &&\n            +new Date() - cachedUTXOList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingUTXOList(address, assetType));\n            const networkId = getState().globalReducer.networkId;\n            const UTXOListResponse = await getUTXOListByAssetType(\n                address,\n                assetType,\n                networkId\n            );\n            dispatch(cacheUTXOList(address, assetType, UTXOListResponse));\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAvailableAssets = (address: string) => {\n    return async (dispatch: ThunkDispatch<ReducerConfigure, void, Action>) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n        dispatch(chainActions.fetchTxListIfNeed(address));\n        dispatch(fetchAggsUTXOListIfNeed(address));\n    };\n};\n\nconst calculateAvailableAssets = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const addressUTXOListObj = getState().assetReducer.aggsUTXOList[\n            address\n        ];\n        const pendingTxListObj = getState().chainReducer.pendingTxList[address];\n        const txListObject = getState().chainReducer.txList[address];\n\n        const addressUTXOList = addressUTXOListObj && addressUTXOListObj.data;\n        const pendingTxList = pendingTxListObj && pendingTxListObj.data;\n        const txList = txListObject && txListObject.data;\n\n        if (!addressUTXOList || !pendingTxList || !txList) {\n            return;\n        }\n\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        const aggregatedPendingAsset = _.flatMap(\n            validPendingTxList,\n            pendingTx => {\n                return TxUtil.getAggsAsset(address, pendingTx);\n            }\n        );\n\n        const availableAssets: {\n            [assetType: string]: {\n                assetType: string;\n                quantities: U64;\n            };\n        } = {};\n\n        _.each(addressUTXOList, addressConfirmedUTXO => {\n            availableAssets[addressConfirmedUTXO.assetType] = {\n                assetType: addressConfirmedUTXO.assetType,\n                quantities: new U64(addressConfirmedUTXO.totalAssetQuantity)\n            };\n        });\n        _.each(aggregatedPendingAsset, asset => {\n            if (\n                asset.outputQuantities.lt(\n                    U64.plus(asset.inputQuantities, asset.burnQuantities)\n                )\n            ) {\n                const quantity = U64.minus(\n                    U64.plus(asset.inputQuantities, asset.burnQuantities),\n                    asset.outputQuantities\n                );\n                if (!availableAssets[asset.assetType]) {\n                    availableAssets[asset.assetType] = {\n                        assetType: asset.assetType,\n                        quantities: new U64(0)\n                    };\n                }\n                availableAssets[asset.assetType] = {\n                    ...availableAssets[asset.assetType],\n                    quantities: U64.minus(\n                        availableAssets[asset.assetType].quantities,\n                        quantity\n                    )\n                };\n            }\n        });\n        const availableAssetsValue = _.filter(\n            _.values(availableAssets),\n            asset => !asset.quantities.eq(0)\n        );\n        dispatch(cacheAvailableAssets(address, availableAssetsValue));\n    };\n};\n\nexport default {\n    cacheAssetScheme,\n    fetchAggsUTXOListIfNeed,\n    fetchAssetSchemeIfNeed,\n    fetchUTXOListIfNeed,\n    calculateAvailableAssets,\n    fetchAvailableAssets\n};\n","import { AggsUTXODoc, AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { Action, ActionType } from \"./assetActions\";\n\nexport interface AssetState {\n    assetScheme: {\n        [assetType: string]: {\n            data?: AssetSchemeDoc;\n            isFetching: boolean;\n        } | null;\n    };\n    aggsUTXOList: {\n        [address: string]: {\n            data?: AggsUTXODoc[] | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n    UTXOList: {\n        [id: string]: {\n            data?: UTXODoc[] | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n    availableAssets: {\n        [address: string]:\n            | {\n                  assetType: string;\n                  quantities: U64;\n              }[]\n            | null;\n    };\n}\n\nexport const assetInitState: AssetState = {\n    assetScheme: {},\n    aggsUTXOList: {},\n    UTXOList: {},\n    availableAssets: {}\n};\n\nexport const getIdForCacheUTXO = (address: string, assetType: H160) => {\n    return `${address}-${assetType.value}`;\n};\n\nexport const assetReducer = (state = assetInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.CacheAssetScheme: {\n            const assetType = action.data.assetType;\n            const currentAssetScheme = {\n                data: action.data.assetScheme,\n                isFetching: false\n            };\n            const assetScheme = {\n                ...state.assetScheme,\n                [assetType]: currentAssetScheme\n            };\n            return {\n                ...state,\n                assetScheme\n            };\n        }\n        case ActionType.SetFetchingAssetScheme: {\n            const assetType = action.data.assetType;\n            const currentAssetScheme = {\n                ...state.assetScheme[assetType],\n                isFetching: true\n            };\n            const assetScheme = {\n                ...state.assetScheme,\n                [assetType]: currentAssetScheme\n            };\n            return {\n                ...state,\n                assetScheme\n            };\n        }\n        case ActionType.SetFetchingAggsUTXOList: {\n            const address = action.data.address;\n            const currentAggsUTXOList = {\n                ...state.aggsUTXOList[address],\n                isFetching: true\n            };\n            const aggsUTXOList = {\n                ...state.aggsUTXOList,\n                [address]: currentAggsUTXOList\n            };\n            return {\n                ...state,\n                aggsUTXOList\n            };\n        }\n        case ActionType.CacheAggsUTXOList: {\n            const address = action.data.address;\n            const currentAggsUTXOList = {\n                data: action.data.aggsUTXOList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const aggsUTXOList = {\n                ...state.aggsUTXOList,\n                [address]: currentAggsUTXOList\n            };\n            return {\n                ...state,\n                aggsUTXOList\n            };\n        }\n        case ActionType.CacheUTXOList: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdForCacheUTXO(address, assetType);\n            const currentUTXO = {\n                data: action.data.UTXOList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const UTXOList = {\n                ...state.UTXOList,\n                [id]: currentUTXO\n            };\n            return {\n                ...state,\n                UTXOList\n            };\n        }\n        case ActionType.SetFetchingUTXOList: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdForCacheUTXO(address, assetType);\n            const currentUTXO = {\n                ...state.UTXOList[id],\n                isFetching: true\n            };\n            const UTXOList = {\n                ...state.UTXOList,\n                [id]: currentUTXO\n            };\n            return {\n                ...state,\n                UTXOList\n            };\n        }\n        case ActionType.CacheAvailableAssets: {\n            const address = action.data.address;\n            const availableAssets = {\n                ...state.availableAssets,\n                [address]: action.data.availableAssets\n            };\n            return {\n                ...state,\n                availableAssets\n            };\n        }\n    }\n    return state;\n};\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport {\n    H160,\n    SignedTransaction,\n    Transaction\n} from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { isAssetAddress, isPlatformAddress } from \"../../model/address\";\nimport {\n    getPendingTransactions,\n    getTxsByAddress,\n    sendTxToGateway\n} from \"../../networks/Api\";\nimport { getCodeChainHost } from \"../../utils/network\";\nimport accountActions from \"../account/accountActions\";\nimport assetActions from \"../asset/assetActions\";\nimport { getIdByAddressAssetType } from \"./chainReducer\";\n\nexport type Action =\n    | CachePendingTxList\n    | CacheTxList\n    | SetFetchingPendingTxList\n    | SetFetchingTxList\n    | UpdateBestBlockNumber\n    | SetFetchingBestBlockNumber\n    | SetFetchingTxListById\n    | CacheTxListById;\n\nexport enum ActionType {\n    CachePendingTxList = \"CachePendingTxList\",\n    CacheTxList = \"CacheTxList\",\n    SetFetchingPendingTxList = \"SetFetchingPendingTxList\",\n    UpdateBestBlockNumber = \"UpdateBestBlockNumber\",\n    SetFetchingBestBlockNumber = \"SetFetchingBestBlockNumber\",\n    SetFetchingTxList = \"SetFetchingTxList\",\n    SetFetchingTxListById = \"SetFetchingTxListById\",\n    CacheTxListById = \"CacheTxListById\"\n}\n\nexport interface SetFetchingTxListById {\n    type: ActionType.SetFetchingTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n    };\n}\n\nexport interface CacheTxListById {\n    type: ActionType.CacheTxListById;\n    data: {\n        address: string;\n        assetType: H160;\n        txList: TransactionDoc[];\n        hasNextPage: boolean;\n        hasPreviousPage: boolean;\n        lastEvaluatedKey?: string;\n        firstEvaluatedKey?: string;\n    };\n}\n\nexport interface CachePendingTxList {\n    type: ActionType.CachePendingTxList;\n    data: {\n        address: string;\n        pendingTxList: TransactionDoc[];\n    };\n}\n\nexport interface CacheTxList {\n    type: ActionType.CacheTxList;\n    data: {\n        address: string;\n        txList: TransactionDoc[];\n        hasNextPage: boolean;\n        hasPreviousPage: boolean;\n        lastEvaluatedKey?: string;\n        firstEvaluatedKey?: string;\n    };\n}\n\nexport interface SetFetchingPendingTxList {\n    type: ActionType.SetFetchingPendingTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface SetFetchingTxList {\n    type: ActionType.SetFetchingTxList;\n    data: {\n        address: string;\n    };\n}\n\nexport interface UpdateBestBlockNumber {\n    type: ActionType.UpdateBestBlockNumber;\n    data: {\n        bestBlockNumber: number;\n    };\n}\n\nexport interface SetFetchingBestBlockNumber {\n    type: ActionType.SetFetchingBestBlockNumber;\n}\n\nconst cachePendingTxList = (\n    address: string,\n    pendingTxList: TransactionDoc[]\n): CachePendingTxList => ({\n    type: ActionType.CachePendingTxList,\n    data: {\n        address,\n        pendingTxList\n    }\n});\n\nconst setFetchingPendingTxList = (\n    address: string\n): SetFetchingPendingTxList => ({\n    type: ActionType.SetFetchingPendingTxList,\n    data: {\n        address\n    }\n});\n\nconst fetchPendingTxListIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedPendingTxList = getState().chainReducer.pendingTxList[\n            address\n        ];\n        if (cachedPendingTxList && cachedPendingTxList.isFetching) {\n            return;\n        }\n        if (\n            cachedPendingTxList &&\n            cachedPendingTxList.updatedAt &&\n            +new Date() - cachedPendingTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingPendingTxList(address));\n            const networkId = getState().globalReducer.networkId;\n            const pendingTxList = await getPendingTransactions(\n                address,\n                networkId\n            );\n            dispatch(cachePendingTxList(address, pendingTxList));\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                if (isAssetAddress(address)) {\n                    dispatch(assetActions.calculateAvailableAssets(address));\n                } else if (isPlatformAddress(address)) {\n                    dispatch(accountActions.calculateAvailableQuark(address));\n                }\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchTxListIfNeed = (\n    address: string,\n    params?: {\n        firstEvaluatedKey?: string | null;\n        lastEvaluatedKey?: string | null;\n        itemsPerPage?: number;\n        force: boolean;\n    }\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const { itemsPerPage = 10, force = false } = params || {};\n        const cachedTxList = getState().chainReducer.txList[address];\n        if (!force && cachedTxList && cachedTxList.isFetching) {\n            return;\n        }\n        if (\n            !force &&\n            cachedTxList &&\n            cachedTxList.updatedAt &&\n            +new Date() - cachedTxList.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch({\n                type: ActionType.SetFetchingTxList,\n                data: {\n                    address\n                }\n            });\n            const networkId = getState().globalReducer.networkId;\n            const {\n                transactions: txList,\n                hasNextPage,\n                hasPreviousPage,\n                lastEvaluatedKey,\n                firstEvaluatedKey\n            } = await getTxsByAddress(\n                address,\n                {\n                    itemsPerPage,\n                    lastEvaluatedKey: params\n                        ? params.lastEvaluatedKey || undefined\n                        : undefined,\n                    firstEvaluatedKey: params\n                        ? params.firstEvaluatedKey || undefined\n                        : undefined\n                },\n                networkId\n            );\n            dispatch({\n                type: ActionType.CacheTxList,\n                data: {\n                    address,\n                    txList,\n                    hasNextPage,\n                    hasPreviousPage,\n                    lastEvaluatedKey,\n                    firstEvaluatedKey\n                }\n            });\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                if (isAssetAddress(address)) {\n                    dispatch(assetActions.calculateAvailableAssets(address));\n                } else if (isPlatformAddress(address)) {\n                    dispatch(accountActions.calculateAvailableQuark(address));\n                }\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst sendSignedTransaction = (\n    address: string,\n    signedTransaction: SignedTransaction,\n    observePlatformAddress?: string | null\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const networkId = getState().globalReducer.networkId;\n                const sdk = new SDK({\n                    server: getCodeChainHost(networkId),\n                    networkId\n                });\n                await sdk.rpc.chain.sendSignedTransaction(signedTransaction);\n                checkingIndexingFuncForSendingTx = setInterval(() => {\n                    dispatch(fetchPendingTxListIfNeed(address));\n                    dispatch(fetchTxListIfNeed(address));\n                    const pendingTxList = getState().chainReducer.pendingTxList[\n                        address\n                    ];\n                    const txList = getState().chainReducer.txList[address];\n                    if (\n                        (pendingTxList &&\n                            pendingTxList.data &&\n                            _.find(\n                                pendingTxList.data,\n                                tx => tx.hash === signedTransaction.hash().value\n                            )) ||\n                        (txList &&\n                            txList.data &&\n                            _.find(\n                                txList.data,\n                                tx => tx.hash === signedTransaction.hash().value\n                            ))\n                    ) {\n                        if (isAssetAddress(address)) {\n                            dispatch(\n                                assetActions.fetchAvailableAssets(address)\n                            );\n                        } else if (isPlatformAddress(address)) {\n                            dispatch(\n                                accountActions.fetchAvailableQuark(address)\n                            );\n                        }\n                        if (observePlatformAddress) {\n                            dispatch(\n                                accountActions.fetchAvailableQuark(\n                                    observePlatformAddress\n                                )\n                            );\n                        }\n                        clearInterval(checkingIndexingFuncForSendingTx);\n                        resolve();\n                    }\n                }, 1000);\n            } catch (e) {\n                reject(e);\n                console.error(e);\n            }\n        });\n    };\n};\n\nlet checkingIndexingFuncForSendingTx: NodeJS.Timer;\nconst sendTransactionByGateway = (\n    assetAddress: string,\n    transaction: Transaction,\n    gatewayURL: string\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        return new Promise(async (resolve, reject) => {\n            try {\n                await sendTxToGateway(transaction, gatewayURL);\n                checkingIndexingFuncForSendingTx = setInterval(() => {\n                    dispatch(fetchPendingTxListIfNeed(assetAddress));\n                    dispatch(fetchTxListIfNeed(assetAddress));\n                    const pendingTxList = getState().chainReducer.pendingTxList[\n                        assetAddress\n                    ];\n                    const txList = getState().chainReducer.txList[assetAddress];\n                    if (\n                        (pendingTxList &&\n                            pendingTxList.data &&\n                            _.find(\n                                pendingTxList.data,\n                                tx =>\n                                    tx.hash === transaction.unsignedHash().value\n                            )) ||\n                        (txList &&\n                            txList.data &&\n                            _.find(\n                                txList.data,\n                                tx =>\n                                    tx.hash === transaction.unsignedHash().value\n                            ))\n                    ) {\n                        dispatch(\n                            assetActions.fetchAvailableAssets(assetAddress)\n                        );\n                        clearInterval(checkingIndexingFuncForSendingTx);\n                        resolve();\n                    }\n                }, 1000);\n            } catch (e) {\n                reject(e);\n                console.error(e);\n            }\n        });\n    };\n};\n\nconst fetchTxListByAssetTypeIfNeed = (\n    address: string,\n    assetType: H160,\n    params?: {\n        firstEvaluatedKey?: string | null;\n        lastEvaluatedKey?: string | null;\n        itemsPerPage?: number;\n        force: boolean;\n    }\n) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const { itemsPerPage = 10, force = false } = params || {};\n        const id = getIdByAddressAssetType(address, assetType);\n        const cachedTxListById = getState().chainReducer.txListById[id];\n        if (!force && cachedTxListById && cachedTxListById.isFetching) {\n            return;\n        }\n        if (\n            !force &&\n            cachedTxListById &&\n            cachedTxListById.updatedAt &&\n            +new Date() - cachedTxListById.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch({\n                type: ActionType.SetFetchingTxListById,\n                data: {\n                    address,\n                    assetType\n                }\n            });\n            const networkId = getState().globalReducer.networkId;\n            const {\n                transactions: txList,\n                hasNextPage,\n                hasPreviousPage,\n                lastEvaluatedKey,\n                firstEvaluatedKey\n            } = await getTxsByAddress(\n                address,\n                {\n                    itemsPerPage,\n                    lastEvaluatedKey: params\n                        ? params.lastEvaluatedKey || undefined\n                        : undefined,\n                    firstEvaluatedKey: params\n                        ? params.firstEvaluatedKey || undefined\n                        : undefined\n                },\n                networkId,\n                assetType\n            );\n            dispatch({\n                type: ActionType.CacheTxListById,\n                data: {\n                    address,\n                    assetType,\n                    txList,\n                    hasNextPage,\n                    hasPreviousPage,\n                    lastEvaluatedKey,\n                    firstEvaluatedKey\n                }\n            });\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nexport default {\n    fetchPendingTxListIfNeed,\n    fetchTxListIfNeed,\n    fetchTxListByAssetTypeIfNeed,\n    sendSignedTransaction,\n    sendTransactionByGateway\n};\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { H160 } from \"codechain-sdk/lib/core/classes\";\nimport { Action, ActionType } from \"./chainActions\";\n\nexport interface ChainState {\n    pendingTxList: {\n        [address: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    txList: {\n        [address: string]: {\n            data?: TransactionDoc[] | null;\n            hasNextPage?: boolean | null;\n            hasPreviousPage?: boolean | null;\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    pendingTxListById: {\n        [id: string]: {\n            data?: TransactionDoc[] | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    txListById: {\n        [id: string]: {\n            data?: TransactionDoc[] | null;\n            hasNextPage?: boolean | null;\n            hasPreviousPage?: boolean | null;\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n            isFetching: boolean;\n            updatedAt?: number | null;\n        } | null;\n    };\n    bestBlockNumber?: {\n        data?: number | null;\n        isFetching: boolean;\n        updatedAt?: number | null;\n    } | null;\n}\n\nexport const chainInitState: ChainState = {\n    pendingTxList: {},\n    txList: {},\n    bestBlockNumber: undefined,\n    txListById: {},\n    pendingTxListById: {}\n};\n\nexport const getIdByAddressAssetType = (address: string, assetType: H160) => {\n    return `${address}-${assetType.value}`;\n};\n\nexport const chainReducer = (\n    state = chainInitState,\n    action: Action\n): ChainState => {\n    switch (action.type) {\n        case ActionType.CachePendingTxList: {\n            const address = action.data.address;\n            const currentPendingTxList = {\n                data: action.data.pendingTxList,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const pendingTxList = {\n                ...state.pendingTxList,\n                [address]: currentPendingTxList\n            };\n            return {\n                ...state,\n                pendingTxList\n            };\n        }\n        case ActionType.SetFetchingPendingTxList: {\n            const address = action.data.address;\n            const currentPendingTxList = {\n                ...state.pendingTxList[address],\n                isFetching: true\n            };\n            const pendingTxList = {\n                ...state.pendingTxList,\n                [address]: currentPendingTxList\n            };\n            return {\n                ...state,\n                pendingTxList\n            };\n        }\n        case ActionType.UpdateBestBlockNumber: {\n            return {\n                ...state,\n                bestBlockNumber: {\n                    data: action.data.bestBlockNumber,\n                    updatedAt: +new Date(),\n                    isFetching: false\n                }\n            };\n        }\n        case ActionType.SetFetchingBestBlockNumber: {\n            return {\n                ...state,\n                bestBlockNumber: {\n                    ...state.bestBlockNumber,\n                    isFetching: true\n                }\n            };\n        }\n        case ActionType.CacheTxList: {\n            const address = action.data.address;\n            const currentTxList = {\n                data: action.data.txList,\n                hasNextPage: action.data.hasNextPage,\n                hasPreviousPage: action.data.hasPreviousPage,\n                lastEvaluatedKey: action.data.lastEvaluatedKey,\n                firstEvaluatedKey: action.data.firstEvaluatedKey,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const txList = {\n                ...state.txList,\n                [address]: currentTxList\n            };\n            return {\n                ...state,\n                txList\n            };\n        }\n        case ActionType.SetFetchingTxList: {\n            const address = action.data.address;\n            const currentTxList = {\n                ...state.txList[address],\n                isFetching: true\n            };\n            const txList = {\n                ...state.txList,\n                [address]: currentTxList\n            };\n            return {\n                ...state,\n                txList\n            };\n        }\n        case ActionType.SetFetchingTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            const currentTxList = {\n                ...state.txListById[id],\n                isFetching: true\n            };\n            const txListById = {\n                ...state.txListById,\n                [id]: currentTxList\n            };\n            return {\n                ...state,\n                txListById\n            };\n        }\n        case ActionType.CacheTxListById: {\n            const address = action.data.address;\n            const assetType = action.data.assetType;\n            const id = getIdByAddressAssetType(address, assetType);\n            const currentTxList = {\n                data: action.data.txList,\n                hasNextPage: action.data.hasNextPage,\n                hasPreviousPage: action.data.hasPreviousPage,\n                lastEvaluatedKey: action.data.lastEvaluatedKey,\n                firstEvaluatedKey: action.data.firstEvaluatedKey,\n                updatedAt: +new Date(),\n                isFetching: false\n            };\n            const txListById = {\n                ...state.txListById,\n                [id]: currentTxList\n            };\n            return {\n                ...state,\n                txListById\n            };\n        }\n    }\n    return state;\n};\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { PlatformAccount } from \"../../model/address\";\nimport { getPlatformAccount } from \"../../networks/Api\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport chainActions from \"../chain/chainActions\";\n\nexport type Action = UpdateAvailableQuark | UpdateAccount | SetFetchingAccount;\n\nexport enum ActionType {\n    UpdateAvailableQuark = \"UpdateAvailableQuark\",\n    UpdateAccount = \"UpdateAccount\",\n    SetFetchingAccount = \"SetFetchingAccount\"\n}\n\nexport interface UpdateAvailableQuark {\n    type: ActionType.UpdateAvailableQuark;\n    data: {\n        address: string;\n        amount: U64;\n    };\n}\n\nexport interface UpdateAccount {\n    type: ActionType.UpdateAccount;\n    data: {\n        address: string;\n        account: PlatformAccount;\n    };\n}\n\nconst setFetchingAccount = (address: string): SetFetchingAccount => ({\n    type: ActionType.SetFetchingAccount,\n    data: {\n        address\n    }\n});\n\nconst updateAccount = (\n    address: string,\n    account: PlatformAccount\n): UpdateAccount => ({\n    type: ActionType.UpdateAccount,\n    data: {\n        address,\n        account\n    }\n});\n\nconst fetchAccountIfNeed = (address: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const cachedAccount = getState().accountReducer.accounts[address];\n        if (cachedAccount && cachedAccount.isFetching) {\n            return;\n        }\n        if (\n            cachedAccount &&\n            cachedAccount.updatedAt &&\n            +new Date() - cachedAccount.updatedAt < 3000\n        ) {\n            return;\n        }\n        try {\n            dispatch(showLoading() as any);\n            dispatch(setFetchingAccount(address));\n            const networkId = getState().globalReducer.networkId;\n            const accountResponse = await getPlatformAccount(\n                address,\n                networkId\n            );\n            dispatch(updateAccount(address, accountResponse));\n            // FIXME: Currently, React-chrome-redux saves data to the background script asynchronously.\n            // This code is temporary for solving this problem.\n            setTimeout(() => {\n                dispatch(calculateAvailableQuark(address));\n            }, 300);\n            dispatch(hideLoading() as any);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n};\n\nconst fetchAvailableQuark = (address: string) => {\n    return (dispatch: ThunkDispatch<ReducerConfigure, void, Action>) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n        dispatch(chainActions.fetchTxListIfNeed(address));\n        dispatch(fetchAccountIfNeed(address));\n    };\n};\n\nexport interface SetFetchingAccount {\n    type: ActionType.SetFetchingAccount;\n    data: {\n        address: string;\n    };\n}\n\nconst calculateAvailableQuark = (address: string) => {\n    return (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const txListObj = getState().chainReducer.txList[address];\n        const accountObj = getState().accountReducer.accounts[address];\n        const pendingTxListObj = getState().chainReducer.pendingTxList[address];\n        const txList = txListObj && txListObj.data;\n        const account = accountObj && accountObj.data;\n        const pendingTxList = pendingTxListObj && pendingTxListObj.data;\n        if (!txList || !account || !pendingTxList) {\n            return;\n        }\n\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        const aggrPendingQuark = TxUtil.getAggsQuark(\n            address,\n            validPendingTxList\n        );\n        const availableQuark = U64.minus(\n            account.balance,\n            aggrPendingQuark.input\n        );\n        dispatch({\n            type: ActionType.UpdateAvailableQuark,\n            data: {\n                address,\n                amount: availableQuark\n            }\n        });\n    };\n};\n\nexport default {\n    calculateAvailableQuark,\n    fetchAccountIfNeed,\n    fetchAvailableQuark\n};\n","import {\n    AssetTransferAddress,\n    PlatformAddress\n} from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport { hideLoading, showLoading } from \"react-redux-loading-bar\";\nimport { toast } from \"react-toastify\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { AddressType, WalletAddress } from \"../../model/address\";\nimport {\n    createAssetAddress,\n    createPlatformAddress,\n    restoreAssetAddresses,\n    restorePlatformAddresses\n} from \"../../model/keystore\";\nimport { getAssetKeys, getPlatformKeys } from \"../../utils/storage\";\n\nexport type Action =\n    | UpdateWalletPlatformAddresses\n    | UpdateWalletAssetAddresses\n    | ClearWalletAddresses\n    | SetLoadingAssetAddresses\n    | SetLoadingPlatformAddresses;\n\nexport enum ActionType {\n    UpdateWalletPlatformAddresses = \"UpdateWalletPlatformAddresses\",\n    UpdateWalletAssetAddresses = \"UpdateWalletAssetAddresses\",\n    ClearWalletAddresses = \"ClearWalletAddresses\",\n    SetLoadingPlatformAddresses = \"SetLoadingPlatformAddresses\",\n    SetLoadingAssetAddresses = \"SetLoadingAssetAddresses\"\n}\n\nexport interface UpdateWalletPlatformAddresses {\n    type: ActionType.UpdateWalletPlatformAddresses;\n    data: {\n        platformAddresses: WalletAddress[];\n    };\n}\n\nexport interface UpdateWalletAssetAddresses {\n    type: ActionType.UpdateWalletAssetAddresses;\n    data: {\n        assetAddresses: WalletAddress[];\n    };\n}\n\nexport interface ClearWalletAddresses {\n    type: ActionType.ClearWalletAddresses;\n}\n\nexport interface SetLoadingAssetAddresses {\n    type: ActionType.SetLoadingAssetAddresses;\n    data: {\n        isLoading: boolean;\n    };\n}\n\nexport interface SetLoadingPlatformAddresses {\n    type: ActionType.SetLoadingPlatformAddresses;\n    data: {\n        isLoading: boolean;\n    };\n}\n\nconst updateWalletPlatformAddresses = (\n    platformAddresses: WalletAddress[]\n): UpdateWalletPlatformAddresses => ({\n    type: ActionType.UpdateWalletPlatformAddresses,\n    data: {\n        platformAddresses\n    }\n});\n\nconst updateWalletAssetAddresses = (\n    assetAddresses: WalletAddress[]\n): UpdateWalletAssetAddresses => ({\n    type: ActionType.UpdateWalletAssetAddresses,\n    data: {\n        assetAddresses\n    }\n});\n\nconst fetchWalletFromStorageIfNeed = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch(showLoading() as any);\n        const networkId = getState().globalReducer.networkId;\n        const passphrase = getState().globalReducer.passphrase!;\n        if (!getState().walletReducer.assetAddresses) {\n            const savedAssetKeys = getAssetKeys(networkId);\n            let assetAddresses;\n            if (savedAssetKeys) {\n                assetAddresses = _.map(savedAssetKeys, key => {\n                    const address = AssetTransferAddress.fromTypeAndPayload(\n                        1,\n                        key.key,\n                        {\n                            networkId\n                        }\n                    ).value;\n                    return {\n                        index: key.pathIndex,\n                        address,\n                        type: AddressType.Asset\n                    };\n                });\n            } else {\n                dispatch({\n                    type: ActionType.SetLoadingAssetAddresses,\n                    data: {\n                        isLoading: true\n                    }\n                });\n                assetAddresses = await restoreAssetAddresses(\n                    passphrase,\n                    networkId\n                );\n                dispatch({\n                    type: ActionType.SetLoadingAssetAddresses,\n                    data: {\n                        isLoading: false\n                    }\n                });\n            }\n            dispatch(updateWalletAssetAddresses(assetAddresses));\n        }\n        if (!getState().walletReducer.platformAddresses) {\n            const savedPlatformKeys = getPlatformKeys(networkId);\n            let platformAddresses;\n            if (savedPlatformKeys) {\n                platformAddresses = _.map(savedPlatformKeys, key => {\n                    const address = PlatformAddress.fromAccountId(key.key, {\n                        networkId\n                    }).value;\n                    return {\n                        index: key.pathIndex,\n                        address,\n                        type: AddressType.Platform\n                    };\n                });\n            } else {\n                dispatch({\n                    type: ActionType.SetLoadingPlatformAddresses,\n                    data: {\n                        isLoading: true\n                    }\n                });\n                platformAddresses = await restorePlatformAddresses(\n                    passphrase,\n                    networkId\n                );\n                dispatch({\n                    type: ActionType.SetLoadingPlatformAddresses,\n                    data: {\n                        isLoading: false\n                    }\n                });\n            }\n            dispatch(updateWalletPlatformAddresses(platformAddresses));\n        }\n        dispatch(hideLoading() as any);\n    };\n};\n\nconst createWalletPlatformAddress = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const networkId = getState().globalReducer.networkId;\n        const platformAddresses = getState().walletReducer.platformAddresses;\n        if (platformAddresses && platformAddresses.length >= 10) {\n            toast.error(\"Sorry, you can make up to 10 addresses.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        const passphrase = getState().globalReducer.passphrase!;\n        const newAddresses = await createPlatformAddress(passphrase, networkId);\n        if (platformAddresses) {\n            dispatch(\n                updateWalletPlatformAddresses([\n                    ...platformAddresses,\n                    newAddresses\n                ])\n            );\n        } else {\n            dispatch(updateWalletPlatformAddresses([newAddresses]));\n        }\n    };\n};\n\nconst createWalletAssetAddress = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        const networkId = getState().globalReducer.networkId;\n        const assetAddresses = getState().walletReducer.assetAddresses;\n        if (assetAddresses && assetAddresses.length >= 10) {\n            toast.error(\"Sorry, you can make up to 10 addresses.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        const passphrase = getState().globalReducer.passphrase!;\n        const newAddresses = await createAssetAddress(passphrase, networkId);\n        if (assetAddresses) {\n            dispatch(\n                updateWalletAssetAddresses([...assetAddresses, newAddresses])\n            );\n        } else {\n            dispatch(updateWalletAssetAddresses([newAddresses]));\n        }\n    };\n};\n\nexport default {\n    fetchWalletFromStorageIfNeed,\n    createWalletAssetAddress,\n    createWalletPlatformAddress\n};\n","import { Action as ReduxAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"..\";\nimport { NetworkId } from \"../../model/address\";\nimport {\n    clearPassphrase,\n    saveNetworkId,\n    savePassphrase\n} from \"../../utils/storage\";\nimport { ActionType as WalletActions } from \"../wallet/walletActions\";\n\nexport type Action = Login | ClearData | Logout | UpdateNetwork;\n\nexport enum ActionType {\n    Login = \"Login\",\n    ClearData = \"ClearData\",\n    Logout = \"Logout\",\n    UpdateNetwork = \"UpdateNetwork\"\n}\n\nexport interface Login {\n    type: ActionType.Login;\n    data: {\n        passphrase: string;\n    };\n}\n\nexport interface ClearData {\n    type: ActionType.ClearData;\n}\n\nexport interface Logout {\n    type: ActionType.Logout;\n}\n\nexport interface UpdateNetwork {\n    type: ActionType.UpdateNetwork;\n    data: {\n        networkId: NetworkId;\n    };\n}\n\nconst updateNetworkId = (networkId: NetworkId) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, ReduxAction>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch({\n            type: WalletActions.ClearWalletAddresses\n        });\n        dispatch({\n            type: ActionType.UpdateNetwork,\n            data: {\n                networkId\n            }\n        });\n        saveNetworkId(networkId);\n    };\n};\n\nconst login = (passphrase: string) => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        savePassphrase(passphrase);\n        dispatch({\n            type: ActionType.Login,\n            data: {\n                passphrase\n            }\n        });\n    };\n};\n\nconst logout = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        clearPassphrase();\n        dispatch(clearData());\n        dispatch({\n            type: ActionType.Logout\n        });\n    };\n};\n\nconst clearData = () => {\n    return async (\n        dispatch: ThunkDispatch<ReducerConfigure, void, Action>,\n        getState: () => ReducerConfigure\n    ) => {\n        dispatch({\n            type: ActionType.ClearData\n        });\n    };\n};\n\nexport default {\n    login,\n    logout,\n    clearData,\n    updateNetworkId\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport QRCode from \"qrcode.react\";\nimport React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport MediaQuery from \"react-responsive\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport copyBtnHover from \"./img/copy-hover.svg\";\nimport copyBtn from \"./img/copy.svg\";\n\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport \"./AddressContainer.css\";\n\ninterface Props {\n    address: string;\n    backButtonPath: string;\n    addressIndex?: number | null;\n}\n\ninterface State {\n    isCopyHovering: boolean;\n}\n\nclass AddressContainer extends React.Component<Props & WithTranslation, State> {\n    public constructor(props: Props & WithTranslation) {\n        super(props);\n        this.state = {\n            isCopyHovering: false\n        };\n    }\n    public render() {\n        const { address, backButtonPath, addressIndex } = this.props;\n        const { isCopyHovering } = this.state;\n        return (\n            <div className=\"Address-container d-flex align-items-center\">\n                <Link to={backButtonPath}>\n                    <FontAwesomeIcon className=\"back-btn\" icon=\"arrow-left\" />\n                </Link>\n                <div className=\"qr-container\">\n                    <QRCode value={address} size={57} />\n                </div>\n                <div className=\"ml-3 name-address-container\">\n                    <h2 className=\"mb-0\">\n                        <Trans\n                            i18nKey=\"main:address\"\n                            values={{\n                                index:\n                                    addressIndex != null ? addressIndex + 1 : \"\"\n                            }}\n                        />\n                    </h2>\n                    <span className=\"mono address-text mr-3\">\n                        <MediaQuery query=\"(max-width: 768px)\">\n                            {address.slice(0, 8)}\n                            ...\n                            {address.slice(address.length - 8, address.length)}\n                        </MediaQuery>\n                        <MediaQuery query=\"(min-width: 769px)\">\n                            {address}\n                        </MediaQuery>\n                    </span>\n                    <CopyToClipboard\n                        text={address}\n                        onCopy={this.handleCopyAddress}\n                    >\n                        <img\n                            className=\"copy-btn\"\n                            src={isCopyHovering ? copyBtnHover : copyBtn}\n                            alt={\"copy\"}\n                            onMouseOver={this.hoverCopyBtn}\n                            onMouseOut={this.outCopyBtn}\n                            onBlur={this.outCopyBtn}\n                        />\n                    </CopyToClipboard>\n                </div>\n            </div>\n        );\n    }\n\n    private hoverCopyBtn = () => {\n        this.setState({ isCopyHovering: true });\n    };\n\n    private outCopyBtn = () => {\n        this.setState({ isCopyHovering: false });\n    };\n\n    private handleCopyAddress = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(AddressContainer);\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport MediaQuery from \"react-responsive\";\nimport { NetworkId } from \"../../../model/address\";\nimport { getExplorerHost } from \"../../../utils/network\";\nimport { TxUtil } from \"../../../utils/transaction\";\nimport \"./PayTxItem.css\";\n\ninterface Props {\n    tx: TransactionDoc;\n    isPending: boolean;\n    timestamp: number;\n    address: string;\n    networkId: NetworkId;\n}\nclass PayTxItem extends React.Component<Props & WithTranslation, any> {\n    public render() {\n        const { tx, address, networkId, isPending, timestamp } = this.props;\n        const aggrTx = TxUtil.getAggsQuark(address, [tx]);\n        return (\n            <div className=\"d-flex Pay-tx-item align-items-center\">\n                <div className=\"date-container number\">\n                    <MediaQuery query=\"(max-width: 768px)\">\n                        {moment.unix(timestamp).format(\"MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                    <MediaQuery query=\"(min-width: 769px)\">\n                        {moment.unix(timestamp).format(\"YYYY-MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                </div>\n                <div className=\"pay-info-container\">\n                    <a\n                        className=\"mono transaction-hash\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`${getExplorerHost(networkId)}/tx/${tx.hash}`}\n                    >\n                        0x\n                        {tx.hash}\n                    </a>\n                </div>\n                <div className=\"balance-container number\">\n                    <span>\n                        {aggrTx.output.gte(aggrTx.input)\n                            ? `+${U64.minus(\n                                  aggrTx.output,\n                                  aggrTx.input\n                              ).toLocaleString()}`\n                            : `-${U64.minus(\n                                  aggrTx.input,\n                                  aggrTx.output\n                              ).toLocaleString()}`}{\" \"}\n                        CCC\n                    </span>\n                </div>\n                <div className=\"status-container\">\n                    {isPending ? (\n                        <span className=\"pending\">\n                            <Trans i18nKey=\"main:pending\" />\n                        </span>\n                    ) : (\n                        <span className=\"confirmed\">\n                            <Trans i18nKey=\"main:confirmed\" />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\nexport default withTranslation()(PayTxItem);\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TransactionDoc } from \"codechain-indexer-types\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport Empty from \"./img/cautiondisabled.svg\";\nimport \"./PayTxHistory.css\";\nimport PayTxItem from \"./PayTxItem/PayTxItem\";\n\ninterface OwnProps {\n    address: string;\n}\n\ninterface StateProps {\n    pendingTxList?: TransactionDoc[] | null;\n    txList?: TransactionDoc[] | null;\n    hasNextPage?: boolean | null;\n    hasPreviousPage?: boolean | null;\n    lastEvaluatedKey?: string | null;\n    firstEvaluatedKey?: string | null;\n    networkId: NetworkId;\n}\n\ninterface DispatchProps {\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchTxListIfNeed: (\n        address: string,\n        options?: {\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n        }\n    ) => void;\n}\n\ntype Props = WithTranslation & StateProps & OwnProps & DispatchProps;\n\nclass PayTxHistory extends React.Component<Props> {\n    public constructor(props: Props) {\n        super(props);\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const { pendingTxList, txList, address, networkId } = this.props;\n        if (!pendingTxList || !txList) {\n            return <div>Loading...</div>;\n        }\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        return (\n            <div className=\"Asset-tx-history\">\n                {validPendingTxList.length + txList.length === 0 && (\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div>\n                            <div className=\"text-center mt-3\">\n                                <img src={Empty} alt={\"empty\"} />\n                            </div>\n                            <div className=\"mt-3 empty\">\n                                <Trans i18nKey=\"send:ccc.recent.empty\" />\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {_.map(validPendingTxList, pendingTx => (\n                    <PayTxItem\n                        key={pendingTx.hash}\n                        tx={pendingTx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={true}\n                        timestamp={pendingTx.pendingTimestamp!}\n                    />\n                ))}\n                {_.map(txList, tx => (\n                    <PayTxItem\n                        key={tx.hash}\n                        tx={tx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={false}\n                        timestamp={tx.timestamp!}\n                    />\n                ))}\n                {txList.length > 0 && (\n                    <div className=\"pagination-container\">\n                        <ul className=\"pagination\">\n                            <li\n                                className={`page-item ${\n                                    !this.props.hasPreviousPage\n                                        ? \"disabled\"\n                                        : \"\"\n                                }`}\n                            >\n                                <Link\n                                    className=\"page-link\"\n                                    to=\"#\"\n                                    onClick={this.handlePreviousPage}\n                                >\n                                    <FontAwesomeIcon\n                                        icon=\"angle-left\"\n                                        className=\"navigation-icon\"\n                                    />\n                                </Link>\n                            </li>\n                            <li\n                                className={`page-item ${\n                                    !this.props.hasNextPage ? \"disabled\" : \"\"\n                                }`}\n                            >\n                                <Link\n                                    className=\"page-link\"\n                                    to=\"#\"\n                                    onClick={this.handleNextPage}\n                                >\n                                    <FontAwesomeIcon\n                                        icon=\"angle-right\"\n                                        className=\"navigation-icon\"\n                                    />\n                                </Link>\n                            </li>\n                        </ul>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private handleNextPage = () => {\n        const { address, fetchTxListIfNeed, lastEvaluatedKey } = this.props;\n        fetchTxListIfNeed(address, { lastEvaluatedKey });\n    };\n\n    private handlePreviousPage = () => {\n        const { address, fetchTxListIfNeed, firstEvaluatedKey } = this.props;\n        fetchTxListIfNeed(address, { firstEvaluatedKey });\n    };\n\n    private init = async () => {\n        this.fetchAll();\n    };\n\n    private fetchAll = () => {\n        const {\n            address,\n            fetchPendingTxListIfNeed,\n            fetchTxListIfNeed\n        } = this.props;\n        fetchPendingTxListIfNeed(address);\n        fetchTxListIfNeed(address);\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { address } = props;\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const txList = state.chainReducer.txList[address];\n    const networkId = state.globalReducer.networkId;\n    return {\n        pendingTxList: pendingTxList && pendingTxList.data,\n        txList: txList && txList.data,\n        hasNextPage: txList && txList.hasNextPage,\n        hasPreviousPage: txList && txList.hasPreviousPage,\n        lastEvaluatedKey: txList && txList.lastEvaluatedKey,\n        firstEvaluatedKey: txList && txList.firstEvaluatedKey,\n        networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchTxListIfNeed: (\n        address: string,\n        options?: {\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n        }\n    ) => {\n        dispatch(\n            chainActions.fetchTxListIfNeed(address, {\n                itemsPerPage: 10,\n                force: true,\n                ...options\n            })\n        );\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(PayTxHistory));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { Tooltip } from \"reactstrap\";\nimport \"./index.css\";\n\ninterface OwnProps {\n    tooltip: string;\n}\n\ninterface State {\n    tooltipOpen: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass TooltipLabel extends React.Component<Props, State> {\n    public uniqueId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = { tooltipOpen: false };\n        this.uniqueId = this.makeId(10);\n    }\n\n    public componentDidMount() {\n        document.addEventListener(\"mousedown\", this.closeTooltip);\n        document.addEventListener(\"touchend\", this.closeTooltip);\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.closeTooltip);\n        document.removeEventListener(\"touchend\", this.closeTooltip);\n    }\n\n    public render() {\n        const { t, tooltip } = this.props;\n        return (\n            <div className=\"Tooltip-label\">\n                <span\n                    key=\"tooltip-text\"\n                    className=\"ml-1\"\n                    id={`tooltip-${this.uniqueId}`}\n                >\n                    <FontAwesomeIcon\n                        icon=\"question-circle\"\n                        className=\"question-circle\"\n                    />\n                </span>\n                <Tooltip\n                    trigger=\"click\"\n                    key=\"tooltip-object\"\n                    position=\"right\"\n                    isOpen={this.state.tooltipOpen}\n                    target={`tooltip-${this.uniqueId}`}\n                    toggle={this.toggleTooltip}\n                >\n                    {t(tooltip)}\n                </Tooltip>\n            </div>\n        );\n    }\n\n    private closeTooltip = () => {\n        this.setState({\n            tooltipOpen: false\n        });\n    };\n\n    private toggleTooltip = () => {\n        this.setState({\n            tooltipOpen: !this.state.tooltipOpen\n        });\n    };\n\n    private makeId = (length: number) => {\n        let text = \"\";\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(\n                Math.floor(Math.random() * possible.length)\n            );\n        }\n\n        return text;\n    };\n}\n\nexport default withTranslation()(TooltipLabel);\n","import React from \"react\";\nimport NumberFormat from \"react-number-format\";\nimport { Label } from \"reactstrap\";\nimport TooltipLabel from \"../TooltipLabel\";\nimport IconCheck from \"./img/icons-check.svg\";\nimport IconError from \"./img/icons-error.svg\";\nimport \"./ValidationInput.css\";\n\ninterface Props {\n    placeholder?: string;\n    className?: string;\n    error?: string | null;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    value: string | number;\n    type?: string;\n    labelText?: string;\n    onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n    isValid?: boolean;\n    showValidation: boolean;\n    reverse?: boolean;\n    disable?: boolean;\n    decimalScale?: number;\n    tooltip?: string;\n}\ninterface State {\n    isFocus: boolean;\n}\nexport default class ValidationInput extends React.Component<Props, State> {\n    public uniqueId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = { isFocus: false };\n        this.uniqueId = this.makeId(10);\n    }\n    public render() {\n        const {\n            onChange,\n            value,\n            placeholder,\n            className,\n            type,\n            labelText,\n            error,\n            onBlur,\n            isValid,\n            reverse,\n            showValidation,\n            disable,\n            decimalScale,\n            tooltip\n        } = this.props;\n        const { isFocus } = this.state;\n        return (\n            <div className={`Validation-input ${className} mb-4`}>\n                {labelText && [\n                    <Label\n                        key=\"label\"\n                        for={`id-${this.uniqueId}`}\n                        className={`mb-0 label-text ${reverse && \"reverse\"}`}\n                    >\n                        {labelText}\n                    </Label>,\n                    tooltip && <TooltipLabel tooltip={tooltip} key=\"tooltip\" />\n                ]}\n                {type === \"number\" ? (\n                    <NumberFormat\n                        value={value}\n                        decimalScale={decimalScale}\n                        autoComplete=\"off\"\n                        className={`form-control ${reverse &&\n                            \"reverse\"} ${showValidation && \"validation-form\"}`}\n                        id={`id-${this.uniqueId}`}\n                        placeholder={placeholder}\n                        // onChange={onChange}\n                        onBlur={onBlur}\n                        disabled={disable}\n                        thousandSeparator={true}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onFocus={() => {\n                            this.setState({ isFocus: true });\n                        }}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onBlurCapture={() => {\n                            this.setState({ isFocus: false });\n                        }}\n                        // tslint:disable-next-line:jsx-no-lambda\n                        onValueChange={values => {\n                            const { value: v } = values;\n                            if (onChange && isFocus) {\n                                onChange({ target: { value: v } } as any);\n                            }\n                        }}\n                    />\n                ) : (\n                    <input\n                        autoComplete=\"off\"\n                        type={`${type || \"text\"}`}\n                        className={`form-control ${reverse &&\n                            \"reverse\"} ${showValidation && \"validation-form\"}`}\n                        id={`id-${this.uniqueId}`}\n                        placeholder={placeholder}\n                        value={value}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        disabled={disable}\n                    />\n                )}\n                {isValid && (\n                    <img\n                        className=\"valid-icon animated fadeIn\"\n                        src={IconCheck}\n                        alt={\"check\"}\n                    />\n                )}\n                {error && (\n                    <img\n                        className=\"error-icon animated fadeIn\"\n                        src={IconError}\n                        alt={\"error\"}\n                    />\n                )}\n                {error && (\n                    <span className=\"error-text animated fadeIn\">{error}</span>\n                )}\n            </div>\n        );\n    }\n\n    private makeId = (length: number) => {\n        let text = \"\";\n        const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(\n                Math.floor(Math.random() * possible.length)\n            );\n        }\n\n        return text;\n    };\n}\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport ValidationInput from \"../../../../ValidationInput/ValidationInput\";\nimport \"./CCCReceiverItem.css\";\n\ninterface OwnProps {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    remainingAmount: string;\n    fee: string;\n    onAddressChange: (address: string) => void;\n    onAmountChange: (quantity: string) => void;\n    onAddressValidationCheck: () => void;\n    onAmountValidationCheck: () => void;\n    onFeeValidationCheck: () => void;\n    onFeeChange: (quantity: string) => void;\n    isAddressValid?: boolean;\n    isAmountValid?: boolean;\n    addressError?: string;\n    amountError?: string;\n    feeError?: string;\n    isFeeValid?: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass CCCReceiverItem extends React.Component<Props> {\n    public render() {\n        const {\n            t,\n            receiver,\n            isAddressValid,\n            isAmountValid,\n            addressError,\n            amountError,\n            fee,\n            isFeeValid,\n            feeError\n        } = this.props;\n        return (\n            <div className=\"CCCReceiver-item animated fadeIn\">\n                <ValidationInput\n                    value={receiver.address}\n                    onChange={this.handleChangeAddressInput}\n                    labelText={t(\"send:ccc.receiver.label\")}\n                    placeholder={t(\"send:ccc.receiver.placeholder\")}\n                    showValidation={true}\n                    isValid={isAddressValid}\n                    onBlur={this.handleBlurAddressInput}\n                    error={addressError}\n                />\n                <div className=\"d-flex align-items-end\">\n                    <ValidationInput\n                        value={receiver.quantity}\n                        onChange={this.handleChangedAmountInput}\n                        labelText={t(\"send:ccc.amount.label\")}\n                        placeholder={t(\"send:ccc.amount.placeholder\")}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isAmountValid}\n                        onBlur={this.handleBlurAmountInput}\n                        error={amountError}\n                        decimalScale={0}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary max-btn\"\n                        onClick={this.handleMaxValueClick}\n                    >\n                        <Trans i18nKey=\"main:max\" />\n                    </button>\n                </div>\n                <div>\n                    <ValidationInput\n                        value={fee}\n                        onChange={this.handleChangeFeeInput}\n                        labelText={t(\"send:ccc.fee.label\")}\n                        placeholder={`100 (CCC)`}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isFeeValid}\n                        tooltip=\"send:ccc.fee.tooltip\"\n                        onBlur={this.handleBlurFeeInput}\n                        error={feeError}\n                        decimalScale={0}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private handleBlurAddressInput = () => {\n        const { onAddressValidationCheck } = this.props;\n        onAddressValidationCheck();\n    };\n\n    private handleBlurAmountInput = () => {\n        const { onAmountValidationCheck } = this.props;\n        onAmountValidationCheck();\n    };\n\n    private handleBlurFeeInput = () => {\n        const { onFeeValidationCheck } = this.props;\n        onFeeValidationCheck();\n    };\n\n    private handleMaxValueClick = () => {\n        const { onAmountChange, remainingAmount } = this.props;\n        onAmountChange(remainingAmount);\n    };\n\n    private handleChangeAddressInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onAddressChange } = this.props;\n        onAddressChange(event.target.value);\n    };\n\n    private handleChangedAmountInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onAmountChange } = this.props;\n        onAmountChange(event.target.value);\n    };\n\n    private handleChangeFeeInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { onFeeChange } = this.props;\n        onFeeChange(event.target.value);\n    };\n}\n\nexport default withTranslation()(CCCReceiverItem);\n","import BigNumber from \"bignumber.js\";\nimport { PlatformAddress, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./CCCReceiverContainer.css\";\nimport CCCReceiverItem from \"./CCCReceiverItem/CCCReceiverItem\";\n\ninterface State {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    fee: string;\n    isAddressValid?: boolean;\n    addressError?: string;\n    isAmountValid?: boolean;\n    amountError?: string;\n    isFeeValid?: boolean;\n    feeError?: string;\n}\n\ninterface OwnProps {\n    address: string;\n    totalAmount: U64;\n    isSending: boolean;\n    onSubmit: (receiver: { address: string; quantity: U64 }, fee: U64) => void;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nconst MinimumFee = 100;\n\nclass CCCReceiverContainer extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            receiver: {\n                address: \"\",\n                quantity: \"\"\n            },\n            fee: `${MinimumFee}`,\n            isFeeValid: undefined,\n            feeError: undefined,\n            isAddressValid: undefined,\n            addressError: undefined,\n            isAmountValid: undefined,\n            amountError: undefined\n        };\n    }\n    public render() {\n        const {\n            receiver,\n            isAddressValid,\n            addressError,\n            isAmountValid,\n            amountError,\n            isFeeValid,\n            feeError,\n            fee\n        } = this.state;\n        const { isSending } = this.props;\n        return (\n            <div className=\"CCCReceiver-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"receivers\">\n                        <CCCReceiverItem\n                            fee={fee}\n                            receiver={receiver}\n                            onAddressChange={this.handleAddressChange}\n                            onAmountChange={this.handleAmountChange}\n                            onFeeChange={this.handleFeeChange}\n                            remainingAmount={this.calculateRemainingCCCString()}\n                            onAddressValidationCheck={\n                                this.handleAddressValidationCheck\n                            }\n                            onAmountValidationCheck={\n                                this.handleAmountValidationCheck\n                            }\n                            onFeeValidationCheck={this.handleFeeValidationCheck}\n                            isAddressValid={isAddressValid}\n                            isAmountValid={isAmountValid}\n                            addressError={addressError}\n                            amountError={amountError}\n                            feeError={feeError}\n                            isFeeValid={isFeeValid}\n                        />\n                    </div>\n                    <div className=\"mt-5\">\n                        <button\n                            disabled={isSending}\n                            type=\"submit\"\n                            className=\"btn btn-primary square w-100 send-btn\"\n                        >\n                            <Trans i18nKey=\"send:ccc.button\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    private calculateRemainingCCCString = () => {\n        const { totalAmount } = this.props;\n        const { fee } = this.state;\n        const remainingCCC = totalAmount.value.minus(fee);\n        if (remainingCCC.gt(0)) {\n            return remainingCCC.toString();\n        } else {\n            return \"0\";\n        }\n    };\n\n    private handleAddressValidationCheck = () => {\n        const { receiver } = this.state;\n        const { t, address: myAddress } = this.props;\n        const address = receiver.address;\n        if (address === \"\") {\n            this.setState({\n                isAddressValid: false,\n                addressError: t(\"send:ccc.error.address.required\")\n            });\n            return false;\n        }\n        if (address === myAddress) {\n            this.setState({\n                isAddressValid: false,\n                addressError: t(\"send:ccc.error.address.not_equal\")\n            });\n            return false;\n        }\n        if (address) {\n            try {\n                PlatformAddress.fromString(address);\n                this.setState({\n                    isAddressValid: true,\n                    addressError: undefined\n                });\n                return true;\n            } catch (e) {\n                // nothing\n            }\n        }\n        this.setState({\n            isAddressValid: false,\n            addressError: t(\"send:ccc.error.address.invalid\")\n        });\n        return false;\n    };\n\n    private handleAmountValidationCheck = () => {\n        const { receiver, fee } = this.state;\n        const { t, totalAmount } = this.props;\n        const cccString = receiver.quantity;\n        if (cccString === \"\") {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.required\")\n            });\n            return false;\n        }\n        console.log(cccString);\n        const amountCCC = new BigNumber(cccString);\n        if (amountCCC.isNaN()) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.invalid\")\n            });\n            return false;\n        }\n        if (amountCCC.lt(1)) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.minimum\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountCCC.plus(amountFee).gt(totalAmount.value)) {\n            this.setState({\n                isAmountValid: false,\n                amountError: t(\"send:ccc.error.amount.not_enough\")\n            });\n            return false;\n        }\n        this.setState({\n            isAmountValid: true,\n            amountError: undefined\n        });\n        return true;\n    };\n\n    private handleFeeValidationCheck = () => {\n        const { receiver, fee } = this.state;\n        const { t, totalAmount } = this.props;\n        const feeString = fee;\n        if (feeString === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(feeString);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.minimum\", {\n                    minimum: MinimumFee\n                })\n            });\n            return false;\n        }\n        const amountCCC = new BigNumber(\n            receiver.quantity === \"\" ? \"0\" : receiver.quantity\n        );\n        if (amountCCC.plus(amountFee).gt(totalAmount.value)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:ccc.error.fee.not_enough\")\n            });\n            return false;\n        }\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleAddressChange = (address: string) => {\n        const { receiver } = this.state;\n        this.setState({\n            receiver: {\n                address,\n                quantity: receiver.quantity\n            },\n            addressError: undefined,\n            isAddressValid: undefined\n        });\n    };\n\n    private handleAmountChange = (quantity: string) => {\n        const { receiver } = this.state;\n        this.setState({\n            receiver: {\n                address: receiver.address,\n                quantity\n            },\n            amountError: undefined,\n            isAmountValid: undefined\n        });\n    };\n\n    private handleFeeChange = (amount: string) => {\n        this.setState({\n            fee: amount,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { receiver, fee } = this.state;\n\n        if (!this.handleAmountValidationCheck()) {\n            return;\n        }\n\n        if (!this.handleAddressValidationCheck()) {\n            return;\n        }\n\n        if (!this.handleFeeValidationCheck()) {\n            return;\n        }\n\n        const amountCCC = new BigNumber(receiver.quantity);\n        const amountFee = new BigNumber(fee);\n        this.props.onSubmit(\n            {\n                address: receiver.address,\n                quantity: new U64(amountCCC)\n            },\n            new U64(amountFee)\n        );\n    };\n}\n\nexport default withTranslation()(CCCReceiverContainer);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { SDK } from \"codechain-sdk\";\nimport { SignedTransaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../../../model/keystore\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport accountActions from \"../../../redux/account/accountActions\";\nimport chainActions from \"../../../redux/chain/chainActions\";\nimport { getCodeChainHost } from \"../../../utils/network\";\nimport { getAssetKeys, getPlatformKeys } from \"../../../utils/storage\";\nimport CCCReceiverContainer from \"./CCCReceiverContainer/CCCReceiverContainer\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport \"./SendCCC.css\";\n\ninterface OwnProps {\n    address: string;\n    onClose: () => void;\n}\n\ninterface StateProps {\n    availableQuark?: U64 | null;\n    networkId: NetworkId;\n    passphrase: string;\n}\n\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction\n    ) => Promise<unknown>;\n}\n\ninterface State {\n    isSending: boolean;\n    isSent: boolean;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass SendCCC extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isSending: false,\n            isSent: false\n        };\n    }\n    public render() {\n        const { onClose, availableQuark, address } = this.props;\n        const { isSending, isSent } = this.state;\n        if (!availableQuark) {\n            return (\n                <div>\n                    <div className=\"Send-CCC\">\n                        <div className=\"loading-container\" />\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className=\"Send-CCC animated fadeIn\">\n                <div className=\"cancel-icon-container\" onClick={onClose}>\n                    <FontAwesomeIcon className=\"cancel-icon\" icon=\"times\" />\n                </div>\n                <h2 className=\"title\">\n                    <Trans i18nKey=\"send:ccc.title\" />\n                </h2>\n                {isSent ? (\n                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                        <div className=\"text-center\">\n                            <div>\n                                <img src={CheckIcon} alt={\"check\"} />\n                            </div>\n                            <div className=\"mt-3\">\n                                <span>\n                                    <Trans i18nKey=\"send:ccc.complete\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className=\"d-flex align-items-center balance-container mb-4\">\n                            <div className=\"mr-auto balance-text\">\n                                <Trans i18nKey=\"send:ccc.balance\" />\n                            </div>\n                            <span className=\"amount number\">\n                                {availableQuark.toLocaleString()} CCC\n                            </span>\n                        </div>\n                        <CCCReceiverContainer\n                            address={address}\n                            onSubmit={this.handleSubmit}\n                            totalAmount={availableQuark}\n                            isSending={isSending}\n                        />\n                    </div>\n                )}\n                {isSending && (\n                    <div className=\"sending-panel d-flex align-items-center justify-content-center\">\n                        <Spinner name=\"line-scale\" color=\"white\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    public updateWindowDimensions = () => {\n        if (window.innerWidth <= 872) {\n            this.addModalOpenClass();\n        } else {\n            this.removeModalOpenClass();\n        }\n    };\n\n    public async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.removeModalOpenClass();\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    private addModalOpenClass = () => {\n        document.body.className = \"modal-open\";\n    };\n\n    private removeModalOpenClass = () => {\n        document.body.className = \"\";\n    };\n\n    private init = () => {\n        const { address, fetchAvailableQuark } = this.props;\n        fetchAvailableQuark(address);\n    };\n\n    private handleSubmit = async (\n        receiver: {\n            address: string;\n            quantity: U64;\n        },\n        fee: U64\n    ) => {\n        const { networkId, address, passphrase } = this.props;\n        const sdk = new SDK({\n            server: getCodeChainHost(networkId),\n            networkId\n        });\n\n        const tx = sdk.core.createPayTransaction({\n            recipient: receiver.address,\n            quantity: receiver.quantity\n        });\n\n        const ccKey = await getCCKey();\n\n        const storedPlatformKeys = getPlatformKeys(networkId);\n        const storedAssetKeys = getAssetKeys(networkId);\n        const seedHash = await getFirstSeedHash();\n\n        const platformKeyMapping = _.reduce(\n            storedPlatformKeys,\n            (memo, storedPlatformKey) => {\n                return {\n                    ...memo,\n                    [storedPlatformKey.key]: {\n                        seedHash,\n                        path: getPlatformAddressPath(\n                            storedPlatformKey.pathIndex\n                        )\n                    }\n                };\n            },\n            {}\n        );\n\n        const assetKeyMapping = _.reduce(\n            storedAssetKeys,\n            (memo, storedAssetKey) => {\n                return {\n                    ...memo,\n                    [storedAssetKey.key]: {\n                        seedHash,\n                        path: getAssetAddressPath(storedAssetKey.pathIndex)\n                    }\n                };\n            },\n            {}\n        );\n\n        const keyStore = new LocalKeyStore(ccKey, {\n            platform: platformKeyMapping,\n            asset: assetKeyMapping\n        });\n        const seq = await sdk.rpc.chain.getSeq(address);\n        const { transactions } = await sdk.rpc.chain.getPendingTransactions();\n        const newSeq =\n            seq +\n            transactions.filter(\n                t => t.getSignerAddress({ networkId }).toString() === address\n            ).length;\n        const signedTx = await sdk.key.signTransaction(tx, {\n            account: address,\n            keyStore,\n            fee,\n            seq: newSeq,\n            passphrase\n        });\n        this.setState({ isSending: true });\n        try {\n            await this.props.sendSignedTransaction(address, signedTx);\n            this.setState({ isSent: true });\n        } catch (e) {\n            toast.error(\"Server is not responding.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            console.error(e);\n        }\n        this.setState({ isSending: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const { address } = ownProps;\n    const availableQuark = state.accountReducer.availableQuark[address];\n    const networkId = state.globalReducer.networkId;\n    const passphrase = state.globalReducer.passphrase!;\n    return {\n        availableQuark,\n        networkId,\n        passphrase\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(address, signedTransaction)\n        );\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(SendCCC));\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"../../redux\";\nimport accountActions from \"../../redux/account/accountActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport PayTxHistory from \"../PayTxHistory/PayTxHistory\";\nimport \"./Account.css\";\nimport SendCCC from \"./SendAsset/SendCCC\";\n\ninterface OwnProps {\n    match: match<{ address: string }>;\n}\n\ninterface StateProps {\n    availableQuark?: U64 | null;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ninterface State {\n    sendingCCC: boolean;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass Account extends React.Component<Props, State> {\n    private refresher: any;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            sendingCCC: false\n        };\n    }\n    public componentWillReceiveProps(props: Props) {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            match: {\n                params: { address: nextAddress }\n            }\n        } = props;\n        if (nextAddress !== address) {\n            this.init();\n        }\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    public render() {\n        const {\n            availableQuark,\n            match: {\n                params: { address }\n            },\n            addressIndex\n        } = this.props;\n        const { sendingCCC } = this.state;\n        if (!availableQuark) {\n            return null;\n        }\n        return (\n            <div className=\"Account animated fadeIn\">\n                <div className=\"d-flex\">\n                    <div className=\"left-panel mx-auto\">\n                        <AddressContainer\n                            address={address}\n                            backButtonPath=\"/\"\n                            addressIndex={addressIndex}\n                        />\n                        <div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"element-title\">\n                                    <Trans i18nKey=\"send:ccc.balance\" />\n                                </h4>\n                                <div className=\"ccc-text number\">\n                                    <span className=\"mr-2\">\n                                        {availableQuark.toLocaleString()}\n                                    </span>\n                                    <span>CCC</span>\n                                </div>\n                                <div className=\"mt-4\">\n                                    <button\n                                        className=\"btn btn-primary square reverse send-btn mr-3 mb-3\"\n                                        onClick={this.openSendingCCC}\n                                        disabled={sendingCCC}\n                                    >\n                                        <Trans i18nKey=\"send:ccc.button\" />\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"element-container\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:ccc.recent.title\" />\n                                </h4>\n                                <PayTxHistory address={address} />\n                            </div>\n                        </div>\n                    </div>\n                    {sendingCCC && (\n                        <div className=\"right-container\">\n                            <div className=\"right-panel\">\n                                <SendCCC\n                                    address={address}\n                                    onClose={this.handleCloseSendingCCC}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    private openSendingCCC = () => {\n        window.scrollTo(0, 0);\n        this.setState({ sendingCCC: true });\n    };\n\n    private handleCloseSendingCCC = () => {\n        this.setState({\n            sendingCCC: false\n        });\n    };\n\n    private init = async () => {\n        this.clearInterval();\n        this.refresher = setInterval(() => {\n            this.fetchAll();\n        }, 10000);\n        this.fetchAll();\n    };\n    private clearInterval = () => {\n        if (this.refresher) {\n            clearInterval(this.refresher);\n        }\n    };\n    private fetchAll = async () => {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        this.props.fetchAvailableQuark(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const {\n        match: {\n            params: { address }\n        }\n    } = props;\n    const availableQuark = state.accountReducer.availableQuark[address];\n    const assetAddress = _.find(\n        state.walletReducer.platformAddresses,\n        aa => aa.address === address\n    );\n    return {\n        availableQuark,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(Account));\n","import React from \"react\";\nimport { NetworkId } from \"../../model/address\";\nimport { getIndexerHost } from \"../network\";\nconst Identicon = require(\"identicon.js\");\nconst sha256 = require(\"js-sha256\");\n\ninterface Props {\n    data: string;\n    className?: string;\n    size: number;\n    isAssetImage: boolean;\n    networkId: NetworkId;\n}\ninterface State {\n    requestUrl?: string;\n}\n\nexport class ImageLoader extends React.Component<Props, State> {\n    constructor(prop: Props) {\n        super(prop);\n        let requestUrl;\n        if (prop.isAssetImage) {\n            const host = getIndexerHost(prop.networkId || \"cc\");\n            requestUrl = `${host}/api/asset-image/${prop.data}`;\n        } else {\n            requestUrl = this.getDefaultImage();\n        }\n        this.state = {\n            requestUrl\n        };\n    }\n\n    public render() {\n        const { className, size } = this.props;\n        const { requestUrl } = this.state;\n\n        return (\n            <img\n                className={className}\n                style={{ verticalAlign: \"middle\", width: size, height: size }}\n                src={requestUrl}\n                alt={\"loader\"}\n                onError={this.fallback}\n            />\n        );\n    }\n\n    private getDefaultImage = () => {\n        const hash = sha256.create();\n        hash.update(this.props.data);\n        const identiconData = new Identicon(\n            hash.hex(),\n            this.props.size\n        ).toString();\n        return `data:image/png;base64,${identiconData}`;\n    };\n\n    private fallback = () => {\n        this.setState({ requestUrl: this.getDefaultImage() });\n    };\n}\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AddressType, NetworkId, WalletAddress } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport \"./AddressItem.css\";\n\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport accountActions from \"../../../redux/account/accountActions\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport copyBtnHover from \"./img/copy-hover.svg\";\nimport copyBtn from \"./img/copy.svg\";\n\ninterface OwnProps {\n    walletAddress: WalletAddress;\n    className?: string | null;\n}\ninterface DispatchProps {\n    fetchAvailableQuark: (address: string) => void;\n    fetchAvailableAssets: (address: string) => void;\n}\ninterface StateProps {\n    availableQuark?: U64 | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n}\ninterface State {\n    isCopyHovering: boolean;\n}\n\ntype Props = WithTranslation &\n    RouteComponentProps &\n    OwnProps &\n    DispatchProps &\n    StateProps;\n\nclass AddressItem extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isCopyHovering: false\n        };\n    }\n    public componentDidMount() {\n        const {\n            walletAddress,\n            fetchAvailableQuark,\n            fetchAvailableAssets\n        } = this.props;\n        if (walletAddress.type === AddressType.Platform) {\n            fetchAvailableQuark(walletAddress.address);\n        }\n        if (walletAddress.type === AddressType.Asset) {\n            fetchAvailableAssets(walletAddress.address);\n        }\n    }\n    public render() {\n        const {\n            walletAddress,\n            className,\n            availableQuark,\n            availableAssets,\n            networkId\n        } = this.props;\n        const { isCopyHovering } = this.state;\n        return (\n            <div\n                className={`Address-item animated fadeIn ${className}`}\n                onClick={this.handleClick}\n            >\n                <div\n                    className={`item-body ${\n                        walletAddress.type === AddressType.Platform\n                            ? \"platform-type\"\n                            : \"asset-type\"\n                    }`}\n                >\n                    <div>\n                        <p className=\"address-name mb-0\">\n                            <Trans\n                                i18nKey=\"main:address\"\n                                values={{\n                                    index: walletAddress.index + 1\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <span className=\"address-text mono\">\n                        {walletAddress.address.slice(0, 10)}\n                        ...\n                        {walletAddress.address.slice(\n                            walletAddress.address.length - 10,\n                            walletAddress.address.length\n                        )}\n                    </span>\n                    <CopyToClipboard\n                        text={walletAddress.address}\n                        onCopy={this.handleCopyAddress}\n                    >\n                        <img\n                            className=\"ml-3\"\n                            src={isCopyHovering ? copyBtnHover : copyBtn}\n                            alt={\"copy\"}\n                            onMouseOver={this.hoverCopyBtn}\n                            onMouseOut={this.outCopyBtn}\n                        />\n                    </CopyToClipboard>\n                </div>\n                {walletAddress.type === AddressType.Platform && (\n                    <div className=\"platform-account\">\n                        {availableQuark ? (\n                            <span className=\"number balance\">\n                                {availableQuark.toLocaleString()} CCC\n                            </span>\n                        ) : (\n                            <span className=\"number balance\">\n                                <Trans i18nKey=\"main:address_loading\" />\n                            </span>\n                        )}\n                    </div>\n                )}\n                {walletAddress.type === AddressType.Asset && (\n                    <div className=\"platform-account\">\n                        {availableAssets ? (\n                            availableAssets.length > 0 ? (\n                                [\n                                    availableAssets.slice(0, 3).map(a => (\n                                        <div\n                                            className=\"asset-image\"\n                                            key={a.assetType}\n                                        >\n                                            <ImageLoader\n                                                isAssetImage={true}\n                                                data={a.assetType}\n                                                size={37}\n                                                networkId={networkId}\n                                            />\n                                        </div>\n                                    )),\n                                    availableAssets.length > 3 && (\n                                        <span key=\"others\" className=\"balance\">\n                                            + {availableAssets.length - 3}\n                                        </span>\n                                    )\n                                ]\n                            ) : (\n                                <span className=\"balance\">\n                                    <Trans i18nKey=\"main:asset.no_asset\" />\n                                </span>\n                            )\n                        ) : (\n                            <span className=\"number balance\">\n                                <Trans i18nKey=\"main:address_loading\" />\n                            </span>\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n    private handleClick = () => {\n        const { walletAddress, history } = this.props;\n        const { isCopyHovering } = this.state;\n        if (isCopyHovering) {\n            return;\n        }\n        if (walletAddress.type === AddressType.Platform) {\n            history.push(`/${walletAddress.address}/account`);\n        } else {\n            history.push(`/${walletAddress.address}/assets`);\n        }\n    };\n    private hoverCopyBtn = () => {\n        this.setState({ isCopyHovering: true });\n    };\n    private outCopyBtn = () => {\n        this.setState({ isCopyHovering: false });\n    };\n    private handleCopyAddress = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { walletAddress } = props;\n    const availableQuark =\n        state.accountReducer.availableQuark[walletAddress.address];\n    const availableAssets =\n        state.assetReducer.availableAssets[walletAddress.address];\n    return {\n        availableQuark,\n        availableAssets,\n        networkId: state.globalReducer.networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(withTranslation()(AddressItem)));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport actions from \"../../redux/wallet/walletActions\";\nimport AddressItem from \"./AddressItem/AddressItem\";\nimport \"./AddressList.css\";\n\ninterface StateProps {\n    platformAddresses?: WalletAddress[] | null;\n    assetAddresses?: WalletAddress[] | null;\n    networkId: NetworkId;\n    isLoadingAssetAddresses?: boolean | null;\n    isLoadingPlatformAddresses?: boolean | null;\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    createWalletAssetAddress: () => void;\n    createWalletPlatformAddress: () => void;\n}\ntype Props = WithTranslation & StateProps & DispatchProps;\n\nclass AddressList extends React.Component<Props> {\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n    }\n    public componentWillReceiveProps(props: Props) {\n        const { networkId } = this.props;\n        const { networkId: nextNetworkId } = props;\n        if (networkId !== nextNetworkId) {\n            this.props.fetchWalletFromStorageIfNeed();\n        }\n    }\n    public render() {\n        const { platformAddresses, assetAddresses, networkId } = this.props;\n        return (\n            <div className=\"Address-list animated fadeIn\">\n                <Container>\n                    <div className=\"asset-address-container mb-5\">\n                        <div className=\"deco asset-title-deco\" />\n                        <h5 className=\"mb-1\">\n                            <Trans i18nKey=\"main:asset.title\" />\n                        </h5>\n                        <div className=\"mb-4 address-description\">\n                            <span>\n                                <Trans i18nKey=\"main:asset.detail\" />\n                            </span>\n                        </div>\n                        <Row className=\"address-item-container\">\n                            {_.map(assetAddresses, (address, index: number) => (\n                                <Col md={6} lg={4} xl={3} key={index}>\n                                    <AddressItem walletAddress={address} />\n                                </Col>\n                            ))}\n                            <Col md={6} lg={4} xl={3}>\n                                {!assetAddresses ? (\n                                    <div className=\"restoring\">\n                                        <Trans i18nKey=\"main:asset.restore\" />\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div\n                                            onClick={this.createAssetAddress}\n                                            className=\"add-address-btn d-flex align-items-center justify-content-center\"\n                                        >\n                                            <Trans i18nKey=\"main:asset.add\" />\n                                            <FontAwesomeIcon\n                                                className=\"ml-2\"\n                                                icon=\"plus-circle\"\n                                            />\n                                        </div>\n                                        {assetAddresses.length > 0 && (\n                                            <Link to=\"/mint\">\n                                                <div className=\"mint-asset-btn d-flex align-items-center justify-content-center\">\n                                                    <Trans i18nKey=\"main:asset.mint\" />\n                                                </div>\n                                            </Link>\n                                        )}\n                                    </div>\n                                )}\n                            </Col>\n                        </Row>\n                    </div>\n                    <hr />\n                    <div className=\"platform-address-container\">\n                        <div className=\"deco platform-title-deco\" />\n                        <h5 className=\"mb-1\">\n                            <Trans i18nKey=\"main:ccc.title\" />\n                        </h5>\n                        <div className=\"mb-4 address-description\">\n                            <span>\n                                <Trans i18nKey=\"main:ccc.detail\" />\n                            </span>\n                        </div>\n                        <Row className=\"address-item-container\">\n                            {_.map(\n                                platformAddresses,\n                                (address, index: number) => (\n                                    <Col md={6} lg={4} xl={3} key={index}>\n                                        <AddressItem walletAddress={address} />\n                                    </Col>\n                                )\n                            )}\n                            <Col md={6} lg={4} xl={3}>\n                                {!platformAddresses ? (\n                                    <div className=\"restoring\">\n                                        <Trans i18nKey=\"main:ccc.restore\" />\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div\n                                            onClick={this.createPlatformAddress}\n                                            className=\"add-address-btn d-flex align-items-center justify-content-center\"\n                                        >\n                                            <Trans i18nKey=\"main:ccc.add\" />\n                                            <FontAwesomeIcon\n                                                className=\"ml-2\"\n                                                icon=\"plus-circle\"\n                                            />\n                                        </div>\n                                        {platformAddresses.length > 0 &&\n                                            (networkId === \"wc\" && (\n                                                <a\n                                                    href=\"https://corgi.codechain.io/faucet\"\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                >\n                                                    <div className=\"buy-CCC-btn d-flex align-items-center justify-content-center\">\n                                                        <Trans i18nKey=\"main:ccc.faucet\" />\n                                                    </div>\n                                                </a>\n                                            ))}\n                                    </div>\n                                )}\n                            </Col>\n                        </Row>\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n    private createPlatformAddress = async () => {\n        const { createWalletPlatformAddress } = this.props;\n        createWalletPlatformAddress();\n    };\n\n    private createAssetAddress = async () => {\n        const { createWalletAssetAddress } = this.props;\n        createWalletAssetAddress();\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    platformAddresses: state.walletReducer.platformAddresses,\n    assetAddresses: state.walletReducer.assetAddresses,\n    networkId: state.globalReducer.networkId,\n    isLoadingAssetAddresses: state.walletReducer.isLoadingAssetAddresses,\n    isLoadingPlatformAddresses: state.walletReducer.isLoadingPlatformAddresses\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(actions.fetchWalletFromStorageIfNeed());\n    },\n    createWalletPlatformAddress: () => {\n        dispatch(actions.createWalletPlatformAddress());\n    },\n    createWalletAssetAddress: () => {\n        dispatch(actions.createWalletAssetAddress());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AddressList));\n","export const parseMetadata = (metadata: string): Metadata => {\n    try {\n        return JSON.parse(metadata);\n    } catch {\n        return {};\n    }\n};\n\nexport interface Metadata {\n    name?: string;\n    description?: string;\n    icon_url?: string;\n    gateway?: { url?: string };\n}\n","import { AssetSchemeDoc, TransactionDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport MediaQuery from \"react-responsive\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../../model/address\";\nimport { ReducerConfigure } from \"../../../../redux\";\nimport assetActions from \"../../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../../../utils/metadata\";\nimport { getExplorerHost } from \"../../../../utils/network\";\n\ninterface OwnProps {\n    index: number;\n    timestamp: number;\n    networkId: NetworkId;\n    tx: TransactionDoc;\n    isPending: boolean;\n    history: {\n        assetType: string;\n        inputQuantities: U64;\n        outputQuantities: U64;\n        burnQuantities: U64;\n    };\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\nclass AssetTxItemEntity extends React.Component<Props, any> {\n    public componentDidMount() {\n        this.props.fetchAssetSchemeIfNeed(\n            new H160(this.props.history.assetType)\n        );\n    }\n    public render() {\n        const {\n            history,\n            timestamp,\n            networkId,\n            tx,\n            isPending,\n            assetScheme,\n            t\n        } = this.props;\n\n        let metadata;\n        if (assetScheme) {\n            metadata = parseMetadata(assetScheme.metadata);\n        }\n        return (\n            <div className=\"d-flex Asset-tx-item align-items-center\">\n                <div className=\"date-container number\">\n                    <MediaQuery query=\"(max-width: 768px)\">\n                        {moment.unix(timestamp).format(\"MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                    <MediaQuery query=\"(min-width: 769px)\">\n                        {moment.unix(timestamp).format(\"YYYY-MM-DD[\\r\\n]HH:mm\")}\n                    </MediaQuery>\n                </div>\n                <div className=\"asset-info-container\">\n                    <div className=\"d-flex\">\n                        <ImageLoader\n                            className=\"asset-image mr-2\"\n                            data={history.assetType}\n                            size={18}\n                            isAssetImage={true}\n                            networkId={networkId}\n                        />\n                        <span className=\"asset-name\">\n                            {(metadata && metadata.name) ||\n                                `0x${history.assetType}`}\n                        </span>\n                    </div>\n                    <a\n                        className=\"mono transaction-hash\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        href={`${getExplorerHost(networkId)}/tx/${tx.hash}`}\n                    >\n                        0x\n                        {tx.hash}\n                    </a>\n                    {tx.type === \"transferAsset\" &&\n                        tx.transferAsset.metadata &&\n                        tx.transferAsset.metadata !== \"\" && (\n                            <div className=\"memo-container\">\n                                <span className=\"memo-text\">\n                                    {t(\"main:memo\")}:{\" \"}\n                                    {tx.transferAsset.metadata}\n                                </span>\n                            </div>\n                        )}\n                </div>\n                <div className=\"balance-container number\">\n                    {this.renderQuantity(history)}\n                </div>\n                <div className=\"status-container\">\n                    {isPending ? (\n                        <span className=\"pending\">\n                            <Trans i18nKey=\"main:pending\" />\n                        </span>\n                    ) : (\n                        <span className=\"confirmed\">\n                            <Trans i18nKey=\"main:confirmed\" />\n                        </span>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    private renderQuantity = (history: {\n        assetType: string;\n        inputQuantities: U64;\n        outputQuantities: U64;\n        burnQuantities: U64;\n    }) => {\n        if (\n            history.outputQuantities.gt(\n                U64.plus(history.inputQuantities, history.burnQuantities)\n            )\n        ) {\n            const quantity = U64.minus(\n                history.outputQuantities,\n                U64.plus(history.inputQuantities, history.burnQuantities)\n            );\n            return `+${quantity.toLocaleString()}`;\n        } else {\n            const quantity = U64.minus(\n                U64.plus(history.inputQuantities, history.burnQuantities),\n                history.outputQuantities\n            );\n            return `-${quantity.toLocaleString()}`;\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const assetScheme =\n        state.assetReducer.assetScheme[ownProps.history.assetType];\n    return {\n        assetScheme: assetScheme && assetScheme.data\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetTxItemEntity));\n","import { TransactionDoc } from \"codechain-indexer-types\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { NetworkId } from \"../../../model/address\";\nimport { TxUtil } from \"../../../utils/transaction\";\nimport \"./AssetTxItem.css\";\nimport AssetTxItemEntity from \"./AssetTxItemEntity\";\n\ninterface Props {\n    tx: TransactionDoc;\n    isPending: boolean;\n    timestamp: number;\n    address: string;\n    networkId: NetworkId;\n}\n\nexport default class AssetTxItem extends React.Component<Props, any> {\n    public render() {\n        const { tx, address, networkId, isPending, timestamp } = this.props;\n        const assetHistory = TxUtil.getAggsAsset(address, tx);\n        return _.map(assetHistory, (history, index) => (\n            <AssetTxItemEntity\n                key={`${history.assetType}-${index}`}\n                tx={tx}\n                history={history}\n                index={index}\n                timestamp={timestamp}\n                isPending={isPending}\n                networkId={networkId}\n            />\n        ));\n    }\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { TransactionDoc } from \"codechain-indexer-types\";\nimport { H160 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport { getIdByAddressAssetType } from \"../../redux/chain/chainReducer\";\nimport \"./AssetTxHistory.css\";\nimport AssetTxItem from \"./AssetTxItem/AssetTxItem\";\nimport Empty from \"./img/cautiondisabled.svg\";\n\ninterface OwnProps {\n    address: string;\n    assetType?: H160;\n}\n\ninterface StateProps {\n    pendingTxList?: TransactionDoc[] | null;\n    txList?: TransactionDoc[] | null;\n    hasNextPage?: boolean | null;\n    hasPreviousPage?: boolean | null;\n    lastEvaluatedKey?: string | null;\n    firstEvaluatedKey?: string | null;\n    networkId: NetworkId;\n}\n\ninterface DispatchProps {\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchTxListIfNeed: (\n        address: string,\n        options?: {\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n        }\n    ) => void;\n    fetchTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160,\n        options?: {\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n        }\n    ) => void;\n}\n\ntype Props = WithTranslation & StateProps & OwnProps & DispatchProps;\n\nclass AssetTxHistory extends React.Component<Props> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            activePage: 1\n        };\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const { pendingTxList, txList, address, networkId } = this.props;\n        if (!pendingTxList || !txList) {\n            return <div>Loading...</div>;\n        }\n        const txHashList = _.map(txList, tx => tx.hash);\n        const validPendingTxList = _.filter(\n            pendingTxList,\n            pendingTx => !_.includes(txHashList, pendingTx.hash)\n        );\n        return (\n            <div className=\"Asset-tx-history\">\n                {validPendingTxList.length + txList.length === 0 && (\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div>\n                            <div className=\"text-center mt-3\">\n                                <img src={Empty} alt={\"empty\"} />\n                            </div>\n                            <div className=\"mt-3 empty\">\n                                <Trans i18nKey=\"send:asset.recent.empty\" />\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {_.map(validPendingTxList, pendingTx => (\n                    <AssetTxItem\n                        key={pendingTx.hash}\n                        tx={pendingTx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={true}\n                        timestamp={pendingTx.pendingTimestamp!}\n                    />\n                ))}\n                {_.map(txList, tx => (\n                    <AssetTxItem\n                        key={tx.hash}\n                        tx={tx}\n                        address={address}\n                        networkId={networkId}\n                        isPending={false}\n                        timestamp={tx.timestamp!}\n                    />\n                ))}\n                {txList.length > 0 && (\n                    <div className=\"pagination-container\">\n                        <ul className=\"pagination\">\n                            <li\n                                className={`page-item ${\n                                    !this.props.hasPreviousPage\n                                        ? \"disabled\"\n                                        : \"\"\n                                }`}\n                            >\n                                <Link\n                                    className=\"page-link\"\n                                    to=\"#\"\n                                    onClick={this.handlePreviousPage}\n                                >\n                                    <FontAwesomeIcon\n                                        icon=\"angle-left\"\n                                        className=\"navigation-icon\"\n                                    />\n                                </Link>\n                            </li>\n                            <li\n                                className={`page-item ${\n                                    !this.props.hasNextPage ? \"disabled\" : \"\"\n                                }`}\n                            >\n                                <Link\n                                    className=\"page-link\"\n                                    to=\"#\"\n                                    onClick={this.handleNextPage}\n                                >\n                                    <FontAwesomeIcon\n                                        icon=\"angle-right\"\n                                        className=\"navigation-icon\"\n                                    />\n                                </Link>\n                            </li>\n                        </ul>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private handleNextPage = () => {\n        const {\n            address,\n            fetchTxListIfNeed,\n            fetchTxListByAssetTypeIfNeed,\n            assetType,\n            lastEvaluatedKey\n        } = this.props;\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType, {\n                lastEvaluatedKey\n            });\n        } else {\n            fetchTxListIfNeed(address, { lastEvaluatedKey });\n        }\n    };\n\n    private handlePreviousPage = () => {\n        const {\n            address,\n            fetchTxListIfNeed,\n            fetchTxListByAssetTypeIfNeed,\n            assetType,\n            firstEvaluatedKey\n        } = this.props;\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType, {\n                firstEvaluatedKey\n            });\n        } else {\n            fetchTxListIfNeed(address, { firstEvaluatedKey });\n        }\n    };\n\n    private init = async () => {\n        this.fetchAll();\n    };\n\n    private fetchAll = () => {\n        const {\n            address,\n            fetchPendingTxListIfNeed,\n            fetchTxListIfNeed,\n            assetType,\n            fetchTxListByAssetTypeIfNeed\n        } = this.props;\n        fetchPendingTxListIfNeed(address);\n\n        if (assetType) {\n            fetchTxListByAssetTypeIfNeed(address, assetType);\n        } else {\n            fetchTxListIfNeed(address);\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const { address, assetType } = props;\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const txList = assetType\n        ? state.chainReducer.txListById[\n              getIdByAddressAssetType(address, assetType)\n          ]\n        : state.chainReducer.txList[address];\n    const networkId = state.globalReducer.networkId;\n    return {\n        pendingTxList: pendingTxList && pendingTxList.data,\n        txList: txList && txList.data,\n        hasNextPage: txList && txList.hasNextPage,\n        hasPreviousPage: txList && txList.hasPreviousPage,\n        lastEvaluatedKey: txList && txList.lastEvaluatedKey,\n        firstEvaluatedKey: txList && txList.firstEvaluatedKey,\n        networkId\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchTxListIfNeed: (\n        address: string,\n        options?: {\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n        }\n    ) => {\n        dispatch(\n            chainActions.fetchTxListIfNeed(address, {\n                itemsPerPage: 10,\n                force: true,\n                ...options\n            })\n        );\n    },\n    fetchTxListByAssetTypeIfNeed: (\n        address: string,\n        assetType: H160,\n        options?: {\n            lastEvaluatedKey?: string | null;\n            firstEvaluatedKey?: string | null;\n        }\n    ) => {\n        dispatch(\n            chainActions.fetchTxListByAssetTypeIfNeed(address, assetType, {\n                itemsPerPage: 10,\n                force: true,\n                ...options\n            })\n        );\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetTxHistory));\n","import BigNumber from \"bignumber.js\";\nimport { AssetSchemeDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Col, Row } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport assetActions from \"../../redux/asset/assetActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport { ImageLoader } from \"../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../utils/metadata\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport AssetTxHistory from \"../AssetTxHistory/AssetTxHistory\";\nimport \"./AssetDetail.css\";\n\ninterface OwnProps {\n    match: match<{ address: string; assetType: string }>;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n    networkId: NetworkId;\n    availableAsset?: {\n        assetType: string;\n        quantities: U64;\n    } | null;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps & WithTranslation;\n\nclass AssetDetail extends React.Component<Props, any> {\n    public async componentDidMount() {\n        this.init();\n    }\n\n    public render() {\n        const {\n            assetScheme,\n            match: {\n                params: { assetType, address }\n            },\n            networkId,\n            availableAsset,\n            addressIndex,\n            t\n        } = this.props;\n        if (!assetScheme || !availableAsset) {\n            return null;\n        }\n\n        const metadata = parseMetadata(assetScheme.metadata);\n        return (\n            <div className=\"Asset-detail d-flex animated fadeIn\">\n                <div className=\"panel mx-auto\">\n                    <AddressContainer\n                        address={address}\n                        backButtonPath={`/${address}/assets`}\n                        addressIndex={addressIndex}\n                    />\n                    <div className=\"detail-history-container\">\n                        <h4 className=\"mr-auto\">\n                            <Trans i18nKey={\"asset:title\"} />\n                        </h4>\n                        <div className=\"d-flex mt-4 mb-4 align-itmes-center\">\n                            <ImageLoader\n                                className=\"asset-image\"\n                                data={assetType}\n                                size={65}\n                                isAssetImage={true}\n                                networkId={networkId}\n                            />\n                            <div className=\"ml-4 name-quantity-container\">\n                                <h4 className=\"mb-0\">\n                                    {metadata.name || \"None\"}\n                                </h4>\n                                <div className=\"mono asset-type\">\n                                    0x\n                                    {new H160(assetType).value}\n                                </div>\n                                <div>\n                                    <span className=\"total-text mr-3\">\n                                        <Trans i18nKey={\"asset:total\"} />\n                                    </span>\n                                    <span className=\"quantity-text number\">\n                                        {availableAsset.quantities.toLocaleString()}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className=\"info-container\">\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey={\"asset:description\"} />\n                                </Col>\n                                <Col md={10}>\n                                    {metadata.description || t(\"asset:none\")}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey=\"asset:approver\" />\n                                </Col>\n                                <Col md={10}>\n                                    {assetScheme.approver || t(\"asset:none\")}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={2}>\n                                    <Trans i18nKey=\"asset:total_supply\" />\n                                </Col>\n                                <Col md={10}>\n                                    {new BigNumber(\n                                        assetScheme.supply\n                                    ).toFormat()}\n                                </Col>\n                            </Row>\n                        </div>\n                        <h4 className=\"mb-3\">\n                            <Trans i18nKey=\"asset:recent_transactions\" />\n                        </h4>\n                        <AssetTxHistory\n                            address={address}\n                            assetType={new H160(assetType)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private init = () => {\n        const {\n            match: {\n                params: { assetType, address }\n            }\n        } = this.props;\n        this.props.fetchAssetSchemeIfNeed(new H160(assetType));\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const {\n        match: {\n            params: { assetType, address }\n        }\n    } = ownProps;\n    const assetScheme =\n        state.assetReducer.assetScheme[new H160(assetType).value];\n    const networkId = state.globalReducer.networkId;\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const availableAsset = _.find(\n        availableAssets,\n        asset => asset.assetType === new H160(assetType).value\n    );\n    const assetAddress = _.find(\n        state.walletReducer.assetAddresses,\n        aa => aa.address === address\n    );\n    return {\n        assetScheme: assetScheme && assetScheme.data,\n        networkId,\n        availableAsset,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetDetail));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { AssetSchemeDoc } from \"codechain-indexer-types\";\nimport { H160, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport { parseMetadata } from \"../../../utils/metadata\";\nimport \"./AssetItem.css\";\n\ninterface OwnProps {\n    assetType: string;\n    quantities: U64;\n    networkId: NetworkId;\n    address: string;\n\n    isSelected: boolean;\n    onSelect: (assetType: string) => void;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n}\n\ntype Props = RouteComponentProps & OwnProps & StateProps & DispatchProps;\n\nclass AssetItem extends React.Component<Props, any> {\n    public constructor(props: Props) {\n        super(props);\n    }\n    public componentDidMount() {\n        this.props.fetchAssetSchemeIfNeed(new H160(this.props.assetType));\n    }\n    public render() {\n        const {\n            assetType,\n            quantities,\n            networkId,\n            isSelected,\n            assetScheme\n        } = this.props;\n        let metadata;\n        if (assetScheme) {\n            metadata = parseMetadata(assetScheme.metadata);\n        }\n        return (\n            <div\n                onClick={this.handleClick}\n                className={`Asset-item animated-fadeIn ${isSelected &&\n                    \"selected\"}`}\n            >\n                <div className=\"d-flex align-items-center\">\n                    <div className=\"image-container\">\n                        <ImageLoader\n                            data={assetType}\n                            size={48}\n                            isAssetImage={true}\n                            networkId={networkId}\n                        />\n                    </div>\n                    <div className=\"name-container\">\n                        <span className=\"mb-0 asset-name\">\n                            {(metadata && metadata.name) ||\n                                `...${assetType.slice(\n                                    assetType.length - 8,\n                                    assetType.length\n                                )}`}\n                        </span>\n                    </div>\n                    <span className=\"mb-0 number asset-quantities\">\n                        {quantities.toLocaleString()}\n                    </span>\n                    <div onClick={this.handleClickInfo} className=\"info-icon\">\n                        <FontAwesomeIcon icon=\"info-circle\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private handleClick = () => {\n        const { assetType, onSelect } = this.props;\n        onSelect(assetType);\n    };\n\n    private handleClickInfo = () => {\n        const { assetType, address } = this.props;\n        this.props.history.push(`/${address}/${assetType}`);\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const assetScheme = state.assetReducer.assetScheme[ownProps.assetType];\n    return {\n        assetScheme: assetScheme && assetScheme.data\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(AssetItem));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport ValidationInput from \"../../../../ValidationInput/ValidationInput\";\n\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport \"./ReceiverItem.css\";\n\ninterface OwnProps {\n    receiver: {\n        address: string;\n        quantity: string;\n    };\n    remainingAsset: U64;\n    onAddressChange: (index: number, address: string) => void;\n    onQuantityChange: (index: number, quantity: string) => void;\n    onAddressValidationCheck: (index: number) => void;\n    onQuantityValidationCheck: (index: number) => void;\n    isAddressValid?: boolean;\n    isQuantityValid?: boolean;\n    addressError?: string;\n    quantityError?: string;\n    index: number;\n    onRemove: (index: number) => void;\n    hideCancel?: boolean;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass ReceiverItem extends React.Component<Props> {\n    public render() {\n        const {\n            t,\n            receiver,\n            index,\n            isAddressValid,\n            isQuantityValid,\n            addressError,\n            quantityError,\n            hideCancel\n        } = this.props;\n        return (\n            <div className=\"Receiver-item animated fadeIn\">\n                <div className=\"d-flex align-items-end\">\n                    {!hideCancel && (\n                        <span className=\"mr-auto receiver-item-index\">\n                            {index + 1}\n                        </span>\n                    )}\n                    {!hideCancel && (\n                        <span\n                            className=\"receiver-item-cancel\"\n                            onClick={this.handleRemove}\n                        >\n                            {t(\"send:asset.remove\")}{\" \"}\n                            <FontAwesomeIcon icon=\"times\" />\n                        </span>\n                    )}\n                </div>\n                <ValidationInput\n                    value={receiver.address}\n                    onChange={this.handleChangeAddressInput}\n                    labelText={t(\"send:asset.receiver.label\")}\n                    placeholder={t(\"send:asset.receiver.placeholder\")}\n                    showValidation={true}\n                    isValid={isAddressValid}\n                    onBlur={this.handleBlurAddressInput}\n                    error={addressError}\n                />\n                <div className=\"d-flex align-items-end\">\n                    <ValidationInput\n                        value={receiver.quantity}\n                        onChange={this.handleChangeQuantitiesInput}\n                        labelText={t(\"send:asset.quantity.label\")}\n                        placeholder={t(\"send:asset.quantity.placeholder\")}\n                        type=\"number\"\n                        className=\"flex-grow-1 flex-shrink-1\"\n                        showValidation={true}\n                        isValid={isQuantityValid}\n                        onBlur={this.handleBlurQuantityInput}\n                        error={quantityError}\n                        decimalScale={0}\n                    />\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-primary max-btn\"\n                        onClick={this.handleMaxValueClick}\n                    >\n                        <Trans i18nKey=\"main:max\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleRemove = () => {\n        const { index, onRemove } = this.props;\n        onRemove(index);\n    };\n\n    private handleBlurAddressInput = () => {\n        const { index, onAddressValidationCheck } = this.props;\n        onAddressValidationCheck(index);\n    };\n\n    private handleBlurQuantityInput = () => {\n        const { index, onQuantityValidationCheck } = this.props;\n        onQuantityValidationCheck(index);\n    };\n\n    private handleMaxValueClick = () => {\n        const { index, onQuantityChange, remainingAsset } = this.props;\n        onQuantityChange(index, remainingAsset.toString(10));\n    };\n\n    private handleChangeAddressInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { index, onAddressChange } = this.props;\n        onAddressChange(index, event.target.value);\n    };\n\n    private handleChangeQuantitiesInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const { index, onQuantityChange } = this.props;\n        onQuantityChange(index, event.target.value);\n    };\n}\n\nexport default withTranslation()(ReceiverItem);\n","import BigNumber from \"bignumber.js\";\nimport { AssetTransferAddress, U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { WalletAddress } from \"../../../../model/address\";\nimport { ReducerConfigure } from \"../../../../redux\";\nimport accountActions from \"../../../../redux/account/accountActions\";\nimport walletActions from \"../../../../redux/wallet/walletActions\";\nimport TooltipLabel from \"../../../TooltipLabel\";\nimport ValidationInput from \"../../../ValidationInput/ValidationInput\";\nimport \"./ReceiverContainer.css\";\nimport ReceiverItem from \"./ReceiverItem/ReceiverItem\";\n\ninterface State {\n    receivers: {\n        address: string;\n        quantity: string;\n    }[];\n    addressValidations: {\n        [index: number]:\n            | {\n                  isAddressValid?: boolean;\n                  addressError?: string;\n              }\n            | undefined;\n    };\n    quantityValidations: {\n        [index: number]:\n            | {\n                  isQuantityValid?: boolean;\n                  quantityError?: string;\n              }\n            | undefined;\n    };\n    fee: string;\n    feePayer?: string;\n    isFeeValid?: boolean;\n    feeError?: string;\n    memo: string;\n    memoError?: string;\n    isMemoValid?: boolean;\n}\n\ninterface OwnProps {\n    address: string;\n    totalQuantity: U64;\n    onSubmit: (\n        receivers: { address: string; quantity: U64 }[],\n        memo: string,\n        fee?: {\n            payer: string;\n            quantity: U64;\n        } | null\n    ) => void;\n    gatewayURL?: string | null;\n    isSendingTx: boolean;\n}\n\ninterface StateProps {\n    platformAddresses?: WalletAddress[] | null;\n    availableQuarkList: { [address: string]: U64 | null | undefined };\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    fetchAvailableQuark: (address: string) => void;\n}\n\ntype Props = WithTranslation & OwnProps & DispatchProps & StateProps;\n\nconst MinimumFee = 100;\nclass ReceiverContainer extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            receivers: [\n                {\n                    address: \"\",\n                    quantity: \"\"\n                }\n            ],\n            addressValidations: {},\n            quantityValidations: {},\n            fee: \"\",\n            feePayer: undefined,\n            isFeeValid: undefined,\n            feeError: undefined,\n            memo: \"\",\n            memoError: undefined,\n            isMemoValid: undefined\n        };\n    }\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n        if (this.props.platformAddresses) {\n            if (this.props.platformAddresses.length > 0) {\n                this.selectFeePayer(this.props.platformAddresses[0].address);\n            }\n        }\n    }\n    public componentWillUpdate(nextProps: Props) {\n        if (!this.props.platformAddresses && nextProps.platformAddresses) {\n            if (nextProps.platformAddresses) {\n                if (nextProps.platformAddresses.length > 0) {\n                    this.selectFeePayer(nextProps.platformAddresses[0].address);\n                }\n            }\n        }\n    }\n    public render() {\n        const {\n            receivers,\n            addressValidations,\n            quantityValidations,\n            fee,\n            feePayer,\n            isFeeValid,\n            feeError,\n            memo,\n            memoError,\n            isMemoValid\n        } = this.state;\n        const {\n            t,\n            platformAddresses,\n            gatewayURL,\n            availableQuarkList,\n            isSendingTx\n        } = this.props;\n        if (!platformAddresses) {\n            return <span>Loading...</span>;\n        }\n        return (\n            <div className=\"Receiver-container\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"receivers\">\n                        {_.map(receivers, (receiver, index) => (\n                            <ReceiverItem\n                                hideCancel={receivers.length === 1}\n                                key={`receiver-${index}`}\n                                receiver={receiver}\n                                onAddressChange={this.handleAddressChange}\n                                onQuantityChange={this.handleQuantityChange}\n                                remainingAsset={this.calculateRemainingAsset(\n                                    index\n                                )}\n                                index={index}\n                                onAddressValidationCheck={\n                                    this.handleAddressValidationCheck\n                                }\n                                onQuantityValidationCheck={\n                                    this.handleQuantityValidationCheck\n                                }\n                                isAddressValid={\n                                    addressValidations[index] &&\n                                    addressValidations[index]!.isAddressValid\n                                }\n                                isQuantityValid={\n                                    quantityValidations[index] &&\n                                    quantityValidations[index]!.isQuantityValid\n                                }\n                                addressError={\n                                    addressValidations[index] &&\n                                    addressValidations[index]!.addressError\n                                }\n                                quantityError={\n                                    quantityValidations[index] &&\n                                    quantityValidations[index]!.quantityError\n                                }\n                                onRemove={this.handleRemoveReceiver}\n                            />\n                        ))}\n                    </div>\n                    {receivers.length < 10 && (\n                        <div>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-primary add-receiver-btn\"\n                                onClick={this.handleAddReceiver}\n                            >\n                                <Trans i18nKey=\"send:asset.add\" />\n                            </button>\n                        </div>\n                    )}\n                    <div className=\"memo-container\">\n                        <ValidationInput\n                            labelText={t(\"send:asset.memo.label\")}\n                            value={memo}\n                            isValid={isMemoValid}\n                            error={memoError}\n                            showValidation={true}\n                            placeholder={t(\"send:asset.memo.placeholder\")}\n                            onBlur={this.checkMemo}\n                            onChange={this.handleChangeMemo}\n                        />\n                    </div>\n                    {gatewayURL == null && (\n                        <div className=\"d-flex fee-container\">\n                            <div className=\"fee-input-container\">\n                                <ValidationInput\n                                    value={fee}\n                                    onChange={this.handleChangeFee}\n                                    showValidation={true}\n                                    labelText={t(\"send:asset.fee.label\")}\n                                    type=\"number\"\n                                    decimalScale={0}\n                                    placeholder={\n                                        !feePayer\n                                            ? \"select payer\"\n                                            : !availableQuarkList[feePayer]\n                                            ? \"loading...\"\n                                            : \"100 (CCC)\"\n                                    }\n                                    tooltip=\"send:asset.fee.tooltip\"\n                                    disable={\n                                        feePayer == null ||\n                                        (feePayer != null &&\n                                            availableQuarkList[feePayer] ==\n                                                null)\n                                    }\n                                    onBlur={this.checkFeeValidation}\n                                    isValid={isFeeValid}\n                                    error={feeError}\n                                />\n                            </div>\n                            <div className=\"fee-payer-container\">\n                                <div className=\"payer-label\">\n                                    <Trans i18nKey=\"send:asset.payer.label\" />\n                                    <TooltipLabel tooltip=\"send:asset.payer.tooltip\" />\n                                </div>\n                                {platformAddresses.length === 0 ? (\n                                    <select\n                                        className=\"form-control\"\n                                        disabled={true}\n                                    >\n                                        <option>\n                                            {t(\"send:asset.payer.empty\")}\n                                        </option>\n                                    </select>\n                                ) : (\n                                    <div>\n                                        <select\n                                            className=\"form-control\"\n                                            value={feePayer}\n                                            defaultValue={\"default\"}\n                                            onChange={this.handleChangeFeePayer}\n                                        >\n                                            <option\n                                                value=\"default\"\n                                                disabled={true}\n                                            >\n                                                {t(\"send:asset.payer.select\")}\n                                            </option>\n                                            {_.map(platformAddresses, pa => (\n                                                <option\n                                                    value={pa.address}\n                                                    key={pa.address}\n                                                >\n                                                    CCC{\" \"}\n                                                    {t(\"main:address\", {\n                                                        index: pa.index + 1\n                                                    })}\n                                                </option>\n                                            ))}\n                                        </select>\n                                        {feePayer &&\n                                            availableQuarkList[feePayer] && (\n                                                <span className=\"available-ccc-text number pl-2 pr-2\">\n                                                    {availableQuarkList[\n                                                        feePayer\n                                                    ]!.toLocaleString()}\n                                                    CCC\n                                                </span>\n                                            )}\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"submit-btn-container\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary square w-100 send-btn\"\n                            disabled={isSendingTx}\n                        >\n                            <Trans i18nKey=\"send:asset.button\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n\n    private handleChangeFeePayer = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.selectFeePayer(event.target.value);\n    };\n\n    private selectFeePayer = (address: string) => {\n        this.setState({\n            feePayer: address,\n            fee: `${MinimumFee}`,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n        this.props.fetchAvailableQuark(address);\n    };\n\n    private handleChangeMemo = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            memo: event.target.value\n        });\n    };\n\n    private checkMemo = () => {\n        const { t } = this.props;\n        const { memo } = this.state;\n        if (memo.length > 25) {\n            this.setState({\n                isMemoValid: false,\n                memoError: t(\"send:asset.error.memo.maximum\")\n            });\n            return false;\n        }\n        this.setState({\n            isMemoValid: true,\n            memoError: undefined\n        });\n        return true;\n    };\n\n    private checkFeeValidation = () => {\n        const { fee, feePayer } = this.state;\n        const { t, availableQuarkList } = this.props;\n\n        if (!feePayer) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.not_selected\")\n            });\n            return false;\n        }\n        const availableQuark = availableQuarkList[feePayer];\n        if (!availableQuark) {\n            throw Error(t(\"send:asset.error.fee.invalid_balance\"));\n        }\n        if (fee === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.minimum\", {\n                    minimum: MinimumFee\n                })\n            });\n            return false;\n        }\n\n        if (availableQuark.value.lt(amountFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: t(\"send:asset.error.fee.not_enough\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleChangeFee = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            fee: event.target.value\n        });\n    };\n\n    private handleRemoveReceiver = (myIndex: number) => {\n        const { receivers } = this.state;\n        const receiversExceptIndex = _.clone(receivers);\n        _.pullAt(receiversExceptIndex, myIndex);\n        this.setState({\n            receivers: receiversExceptIndex\n        });\n    };\n\n    private handleAddReceiver = () => {\n        this.setState({\n            receivers: [...this.state.receivers, { address: \"\", quantity: \"\" }]\n        });\n    };\n\n    private calculateRemainingAsset = (myIndex: number) => {\n        const { receivers } = this.state;\n        const { totalQuantity } = this.props;\n        const receiversExceptIndex = _.clone(receivers);\n        _.pullAt(receiversExceptIndex, myIndex);\n        const currentTotal = _.reduce(\n            receiversExceptIndex,\n            (memo, receiver) =>\n                U64.plus(\n                    memo,\n                    receiver.quantity === \"\" ? 0 : receiver.quantity\n                ),\n            new U64(0)\n        );\n\n        const remainingAsset = U64.minus(totalQuantity, currentTotal);\n        if (remainingAsset.gt(0)) {\n            return remainingAsset;\n        }\n        return new U64(0);\n    };\n\n    private handleAddressValidationCheck = (index: number) => {\n        const { receivers } = this.state;\n        const { t, address: myAddress } = this.props;\n        const address = receivers[index].address;\n        if (address === \"\") {\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: false,\n                        addressError: t(\"send:asset.error.receiver.required\")\n                    }\n                }\n            });\n            return false;\n        }\n        if (address === myAddress) {\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: false,\n                        addressError: t(\n                            \"send:asset.error.receiver.not_available\"\n                        )\n                    }\n                }\n            });\n            return false;\n        }\n        try {\n            AssetTransferAddress.fromString(address);\n            this.setState({\n                addressValidations: {\n                    ...this.state.addressValidations,\n                    [index]: {\n                        ...this.state.addressValidations[index],\n                        isAddressValid: true,\n                        addressError: undefined\n                    }\n                }\n            });\n            return true;\n        } catch (e) {\n            // nothing\n        }\n        this.setState({\n            addressValidations: {\n                ...this.state.addressValidations,\n                [index]: {\n                    ...this.state.addressValidations[index],\n                    isAddressValid: false,\n                    addressError: t(\"send:asset.error.receiver.invalid\")\n                }\n            }\n        });\n        return false;\n    };\n\n    private handleQuantityValidationCheck = (index: number) => {\n        const { receivers } = this.state;\n        const { t, totalQuantity } = this.props;\n        const quantityString = this.state.receivers[index].quantity;\n        if (quantityString === \"\") {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.required\")\n                    }\n                }\n            });\n            return false;\n        }\n        const quantity = new BigNumber(quantityString);\n        if (quantity.isNaN()) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.invalid\")\n                    }\n                }\n            });\n            return false;\n        }\n        if (quantity.lte(0)) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.minimum\")\n                    }\n                }\n            });\n            return false;\n        }\n        const currentTotal = _.reduce(\n            receivers,\n            (memo, receiver) =>\n                U64.plus(\n                    memo,\n                    receiver.quantity === \"\" ? 0 : receiver.quantity\n                ),\n            new U64(0)\n        );\n        if (currentTotal.gt(totalQuantity)) {\n            this.setState({\n                quantityValidations: {\n                    ...this.state.quantityValidations,\n                    [index]: {\n                        ...this.state.quantityValidations[index],\n                        isQuantityValid: false,\n                        quantityError: t(\"send:asset.error.quantity.not_enough\")\n                    }\n                }\n            });\n            return false;\n        }\n        this.setState({\n            quantityValidations: {\n                ...this.state.quantityValidations,\n                [index]: {\n                    ...this.state.quantityValidations[index],\n                    isQuantityValid: true,\n                    quantityError: undefined\n                }\n            }\n        });\n        return true;\n    };\n\n    private handleAddressChange = (newIndex: number, address: string) => {\n        const { receivers } = this.state;\n        const newReceivers = _.map(receivers, (receiver, index) => {\n            if (index === newIndex) {\n                return {\n                    address,\n                    quantity: receiver.quantity\n                };\n            }\n            return receiver;\n        });\n        this.setState({\n            receivers: newReceivers,\n            addressValidations: {\n                ...this.state.addressValidations,\n                [newIndex]: {\n                    ...this.state.addressValidations[newIndex],\n                    isAddressValid: undefined,\n                    addressError: undefined\n                }\n            }\n        });\n    };\n\n    private handleQuantityChange = (newIndex: number, quantity: string) => {\n        const { receivers } = this.state;\n        const newReceivers = _.map(receivers, (receiver, index) => {\n            if (index === newIndex) {\n                return {\n                    address: receiver.address,\n                    quantity\n                };\n            }\n            return receiver;\n        });\n        this.setState({\n            receivers: newReceivers,\n            quantityValidations: {\n                ...this.state.quantityValidations,\n                [newIndex]: {\n                    ...this.state.quantityValidations[newIndex],\n                    isQuantityValid: undefined,\n                    quantityError: undefined\n                }\n            }\n        });\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { gatewayURL } = this.props;\n        const { receivers, fee, feePayer, memo } = this.state;\n\n        for (let i = 0; i < receivers.length; i++) {\n            if (!this.handleAddressValidationCheck(i)) {\n                return;\n            }\n            if (!this.handleQuantityValidationCheck(i)) {\n                return;\n            }\n        }\n\n        if (!this.checkMemo()) {\n            return;\n        }\n\n        const returnValue = receivers.map(r => ({\n            address: r.address,\n            quantity: new U64(r.quantity)\n        }));\n        if (gatewayURL == null) {\n            if (!this.checkFeeValidation()) {\n                return;\n            }\n            this.props.onSubmit(returnValue, memo, {\n                payer: feePayer!,\n                quantity: new U64(fee)\n            });\n        } else {\n            this.props.onSubmit(returnValue, memo);\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => {\n    const platformAddresses = state.walletReducer.platformAddresses;\n    const availableQuarkList = state.accountReducer.availableQuark;\n    return {\n        platformAddresses,\n        availableQuarkList\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    },\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(ReceiverContainer));\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { AssetSchemeDoc, UTXODoc } from \"codechain-indexer-types\";\nimport { SDK } from \"codechain-sdk\";\nimport {\n    Asset,\n    AssetTransferAddress,\n    AssetTransferOutput,\n    H160,\n    SignedTransaction,\n    Transaction,\n    U64\n} from \"codechain-sdk/lib/core/classes\";\nimport { LocalKeyStore } from \"codechain-sdk/lib/key/LocalKeyStore\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../../model/address\";\nimport {\n    getAssetAddressPath,\n    getCCKey,\n    getFirstSeedHash,\n    getPlatformAddressPath\n} from \"../../../model/keystore\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport assetActions from \"../../../redux/asset/assetActions\";\nimport { getIdForCacheUTXO } from \"../../../redux/asset/assetReducer\";\nimport chainActions from \"../../../redux/chain/chainActions\";\nimport walletActions from \"../../../redux/wallet/walletActions\";\nimport { ImageLoader } from \"../../../utils/ImageLoader/ImageLoader\";\nimport * as Metadata from \"../../../utils/metadata\";\nimport { getCodeChainHost } from \"../../../utils/network\";\nimport { getAssetKeys, getPlatformKeys } from \"../../../utils/storage\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport ReceiverContainer from \"./ReceiverContainer/ReceiverContainer\";\nimport \"./SendAsset.css\";\n\ninterface OwnProps {\n    address: string;\n    selectedAssetType: string;\n    onClose: () => void;\n}\n\ninterface StateProps {\n    assetScheme?: AssetSchemeDoc | null;\n    UTXOList?: UTXODoc[] | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n    passphrase: string;\n    assetAddresses?: WalletAddress[] | null;\n    platformAddresses?: WalletAddress[] | null;\n}\n\ninterface State {\n    isSendingTx: boolean;\n    isSentTx: boolean;\n}\n\ninterface DispatchProps {\n    fetchAssetSchemeIfNeed: (assetType: H160) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchUTXOListIfNeed: (address: string, assetType: H160) => void;\n    sendTransactionByGateway: (\n        address: string,\n        transferTx: Transaction,\n        gatewayURL: string\n    ) => Promise<unknown>;\n    fetchWalletFromStorageIfNeed: () => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => Promise<unknown>;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass SendAsset extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isSendingTx: false,\n            isSentTx: false\n        };\n    }\n    public render() {\n        const { onClose } = this.props;\n        const { isSendingTx, isSentTx } = this.state;\n        const {\n            assetScheme,\n            selectedAssetType: assetType,\n            networkId,\n            address\n        } = this.props;\n        const {\n            availableAssets,\n            UTXOList,\n            platformAddresses,\n            assetAddresses\n        } = this.props;\n        if (\n            !assetScheme ||\n            !UTXOList ||\n            !availableAssets ||\n            !platformAddresses ||\n            !assetAddresses\n        ) {\n            return (\n                <div>\n                    <div className=\"Send-asset\">\n                        <div className=\"loading-container\" />\n                    </div>\n                </div>\n            );\n        }\n        const availableAsset = _.find(\n            availableAssets,\n            a => a.assetType === assetType\n        );\n        const metadata = Metadata.parseMetadata(assetScheme.metadata);\n        return (\n            <div className=\"Send-asset animated fadeIn\">\n                <div className=\"cancel-icon-container\" onClick={onClose}>\n                    <FontAwesomeIcon className=\"cancel-icon\" icon=\"times\" />\n                </div>\n                <h2 className=\"title\">\n                    <Trans i18nKey=\"send:asset.title\" />\n                </h2>\n                {isSentTx ? (\n                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                        <div className=\"text-center\">\n                            <div>\n                                <img src={CheckIcon} alt={\"check\"} />\n                            </div>\n                            <div className=\"mt-3\">\n                                <span>\n                                    <Trans i18nKey=\"send:asset.complete\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        <div className=\"d-flex align-items-center asset-info-item mb-5\">\n                            <ImageLoader\n                                className=\"asset-info-icon\"\n                                data={assetType}\n                                isAssetImage={true}\n                                networkId={networkId}\n                                size={50}\n                            />\n                            <span className=\"name ml-3 mr-auto\">\n                                {metadata.name ||\n                                    `...${assetType.slice(\n                                        assetType.length - 6,\n                                        assetType.length\n                                    )}`}\n                            </span>\n                            <span className=\"quantity number\">\n                                {availableAsset\n                                    ? availableAsset.quantities.toLocaleString()\n                                    : 0}\n                            </span>\n                        </div>\n                        <ReceiverContainer\n                            address={address}\n                            onSubmit={this.handleSubmit}\n                            totalQuantity={\n                                availableAsset\n                                    ? availableAsset.quantities\n                                    : new U64(0)\n                            }\n                            isSendingTx={isSendingTx}\n                            gatewayURL={\n                                metadata.gateway && metadata.gateway.url\n                            }\n                        />\n                    </div>\n                )}\n                {isSendingTx && (\n                    <div className=\"sending-panel d-flex align-items-center justify-content-center\">\n                        <Spinner name=\"line-scale\" color=\"white\" />\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    public updateWindowDimensions = () => {\n        if (window.innerWidth <= 872) {\n            this.addModalOpenClass();\n        } else {\n            this.removeModalOpenClass();\n        }\n    };\n\n    public async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.removeModalOpenClass();\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    private addModalOpenClass = () => {\n        document.body.className = \"modal-open\";\n    };\n\n    private removeModalOpenClass = () => {\n        document.body.className = \"\";\n    };\n\n    private init = () => {\n        const { selectedAssetType, address } = this.props;\n        this.props.fetchAssetSchemeIfNeed(new H160(selectedAssetType));\n        this.props.fetchUTXOListIfNeed(address, new H160(selectedAssetType));\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n\n    private handleSubmit = async (\n        receivers: { address: string; quantity: U64 }[],\n        memo: string,\n        fee?: {\n            payer: string;\n            quantity: U64;\n        } | null\n    ) => {\n        const { UTXOList } = this.props;\n        const {\n            t,\n            selectedAssetType: assetType,\n            address,\n            networkId,\n            passphrase,\n            assetAddresses,\n            platformAddresses,\n            assetScheme\n        } = this.props;\n\n        if (!assetAddresses || !platformAddresses || !assetScheme) {\n            return;\n        }\n\n        const sumOfSendingAsset = _.reduce(\n            receivers,\n            (m, receiver) => U64.plus(m, receiver.quantity),\n            new U64(0)\n        );\n\n        const inputUTXO = [];\n        let inputUTXOSum = new U64(0);\n        for (const utxo of UTXOList!) {\n            inputUTXO.push(utxo);\n            inputUTXOSum = U64.plus(inputUTXOSum, utxo.quantity);\n            if (inputUTXOSum.gte(sumOfSendingAsset)) {\n                break;\n            }\n        }\n\n        const sdk = new SDK({\n            server: getCodeChainHost(networkId),\n            networkId\n        });\n        const ccKey = await getCCKey();\n\n        const storedPlatformKeys = getPlatformKeys(networkId);\n        const storedAssetKeys = getAssetKeys(networkId);\n        const seedHash = await getFirstSeedHash();\n\n        const platformKeyMapping = _.reduce(\n            storedPlatformKeys,\n            (m, storedPlatformKey) => {\n                return {\n                    ...m,\n                    [storedPlatformKey.key]: {\n                        seedHash,\n                        path: getPlatformAddressPath(\n                            storedPlatformKey.pathIndex\n                        )\n                    }\n                };\n            },\n            {}\n        );\n\n        const assetKeyMapping = _.reduce(\n            storedAssetKeys,\n            (m, storedAssetKey) => {\n                return {\n                    ...m,\n                    [storedAssetKey.key]: {\n                        seedHash,\n                        path: getAssetAddressPath(storedAssetKey.pathIndex)\n                    }\n                };\n            },\n            {}\n        );\n\n        const keyStore = new LocalKeyStore(ccKey, {\n            platform: platformKeyMapping,\n            asset: assetKeyMapping\n        });\n\n        const inputAssets = _.map(inputUTXO, utxo => {\n            return Asset.fromJSON({\n                assetType: utxo.assetType,\n                lockScriptHash: utxo.lockScriptHash,\n                parameters: utxo.parameters,\n                quantity: utxo.quantity,\n                tracker: utxo.transactionTracker,\n                transactionOutputIndex: utxo.transactionOutputIndex,\n                orderHash: utxo.orderHash,\n                shardId: utxo.shardId\n            }).createTransferInput();\n        });\n        const outputData = _.map(receivers, receiver => {\n            return {\n                recipient: receiver.address,\n                quantity: receiver.quantity,\n                shardId: 0, // FIXME: Add a valid data\n                assetType\n            };\n        });\n\n        const refundAmount = U64.minus(inputUTXOSum, sumOfSendingAsset);\n        if (refundAmount.gt(0)) {\n            outputData.push({\n                recipient: address,\n                quantity: refundAmount,\n                assetType,\n                shardId: 0\n            });\n        }\n        const outputs = _.map(\n            outputData,\n            o =>\n                new AssetTransferOutput({\n                    recipient: AssetTransferAddress.fromString(o.recipient),\n                    quantity: o.quantity,\n                    shardId: 0, // FIXME: Add a valid data\n                    assetType: new H160(o.assetType)\n                })\n        );\n        const transferTx = sdk.core.createTransferAssetTransaction({\n            inputs: inputAssets,\n            outputs,\n            metadata: memo\n        });\n        try {\n            await Promise.all(\n                _.map(inputAssets, (_A, index) => {\n                    return sdk.key.signTransactionInput(transferTx, index, {\n                        keyStore,\n                        passphrase\n                    });\n                })\n            );\n        } catch (e) {\n            if (e.message === \"DecryptionFailed\") {\n                toast.error(t(\"send:asset.error.password.wrong\"), {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    autoClose: 5000,\n                    closeButton: false,\n                    hideProgressBar: true\n                });\n            }\n            console.log(e);\n            return;\n        }\n        const metadata = Metadata.parseMetadata(assetScheme.metadata);\n\n        this.setState({ isSendingTx: true });\n        if (metadata.gateway && metadata.gateway.url) {\n            try {\n                await this.props.sendTransactionByGateway(\n                    address,\n                    transferTx,\n                    metadata.gateway.url\n                );\n                this.setState({ isSentTx: true });\n            } catch (e) {\n                toast.error(t(\"send:asset.error.gateway.unauthorized\"), {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    closeButton: false,\n                    hideProgressBar: true,\n                    autoClose: false\n                });\n                console.error(e);\n            }\n        } else {\n            const feePayer = fee!.payer;\n            const seq = await sdk.rpc.chain.getSeq(feePayer);\n            const {\n                transactions\n            } = await sdk.rpc.chain.getPendingTransactions();\n            const newSeq =\n                seq +\n                transactions.filter(\n                    tx =>\n                        tx.getSignerAddress({ networkId }).toString() ===\n                        feePayer\n                ).length;\n            const signedTransaction = await sdk.key.signTransaction(\n                transferTx,\n                {\n                    account: feePayer,\n                    keyStore,\n                    fee: fee!.quantity,\n                    seq: newSeq,\n                    passphrase\n                }\n            );\n            try {\n                await this.props.sendSignedTransaction(\n                    address,\n                    signedTransaction,\n                    feePayer\n                );\n                this.setState({ isSentTx: true });\n            } catch (e) {\n                toast.error(\"Server is not responding.\", {\n                    position: toast.POSITION.BOTTOM_CENTER,\n                    autoClose: 5000,\n                    closeButton: false,\n                    hideProgressBar: true\n                });\n                console.error(e);\n            }\n        }\n        this.setState({ isSendingTx: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, ownProps: OwnProps) => {\n    const { selectedAssetType, address } = ownProps;\n    const assetScheme =\n        state.assetReducer.assetScheme[new H160(selectedAssetType).value];\n    const id = getIdForCacheUTXO(address, new H160(selectedAssetType));\n    const UTXOList = state.assetReducer.UTXOList[id];\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const networkId = state.globalReducer.networkId;\n    const passphrase = state.globalReducer.passphrase!;\n    const assetAddresses = state.walletReducer.assetAddresses;\n    const platformAddresses = state.walletReducer.platformAddresses;\n    return {\n        assetScheme: assetScheme && assetScheme.data,\n        UTXOList: UTXOList && UTXOList.data,\n        availableAssets,\n        networkId,\n        passphrase,\n        platformAddresses,\n        assetAddresses\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAssetSchemeIfNeed: (assetType: H160) => {\n        dispatch(assetActions.fetchAssetSchemeIfNeed(assetType));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    sendTransactionByGateway: (\n        address: string,\n        transferTx: Transaction,\n        gatewayURL: string\n    ) => {\n        return dispatch(\n            chainActions.sendTransactionByGateway(\n                address,\n                transferTx,\n                gatewayURL\n            )\n        );\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(\n                address,\n                signedTransaction,\n                feePayer\n            )\n        );\n    },\n    fetchUTXOListIfNeed: (address: string, assetType: H160) => {\n        dispatch(assetActions.fetchUTXOListIfNeed(address, assetType));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(SendAsset));\n","import { AggsUTXODoc, TransactionDoc } from \"codechain-indexer-types\";\nimport { U64 } from \"codechain-sdk/lib/core/classes\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { match } from \"react-router\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport assetActions from \"../../redux/asset/assetActions\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport AddressContainer from \"../AddressContainer/AddressContainer\";\nimport AssetTxHistory from \"../AssetTxHistory/AssetTxHistory\";\nimport AssetItem from \"./AssetItem/AssetItem\";\nimport \"./AssetList.css\";\nimport Empty from \"./img/cautiondisabled.svg\";\nimport SendAsset from \"./SendAsset/SendAsset\";\n\ninterface OwnProps {\n    match: match<{ address: string }>;\n}\n\ninterface StateProps {\n    addressUTXOList?: AggsUTXODoc[] | null;\n    pendingTxList?: TransactionDoc[] | null;\n    availableAssets?:\n        | {\n              assetType: string;\n              quantities: U64;\n          }[]\n        | null;\n    networkId: NetworkId;\n    addressIndex?: number | null;\n}\n\ninterface DispatchProps {\n    fetchAggsUTXOListIfNeed: (address: string) => void;\n    fetchPendingTxListIfNeed: (address: string) => void;\n    fetchAvailableAssets: (address: string) => void;\n    fetchWalletFromStorageIfNeed: () => void;\n}\n\ninterface State {\n    selectedAssetType?: string | null;\n}\n\ntype Props = WithTranslation & OwnProps & StateProps & DispatchProps;\n\nclass AssetList extends React.Component<Props, State> {\n    private refresher: any;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            selectedAssetType: undefined\n        };\n    }\n    public componentWillReceiveProps(props: Props) {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            match: {\n                params: { address: nextAddress }\n            }\n        } = props;\n        if (nextAddress !== address) {\n            this.setState({ selectedAssetType: undefined });\n            this.init();\n        }\n    }\n\n    public componentDidMount() {\n        this.init();\n    }\n\n    public componentWillUnmount() {\n        this.clearInterval();\n    }\n\n    public render() {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        const {\n            addressUTXOList,\n            pendingTxList,\n            availableAssets,\n            networkId,\n            addressIndex\n        } = this.props;\n        const { selectedAssetType } = this.state;\n        if (!addressUTXOList || !pendingTxList || !availableAssets) {\n            return null;\n        }\n        return (\n            <div className=\"Asset-list animated fadeIn\">\n                <div className=\"d-flex\">\n                    <div className=\"left-panel mx-auto\">\n                        <AddressContainer\n                            address={address}\n                            backButtonPath=\"/\"\n                            addressIndex={addressIndex}\n                        />\n                        <div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:asset.list.title\" />\n                                </h4>\n                                <div className=\"asset-item-container\">\n                                    {availableAssets.length > 0 ? (\n                                        _.map(\n                                            availableAssets,\n                                            availableAsset => (\n                                                <AssetItem\n                                                    key={\n                                                        availableAsset.assetType\n                                                    }\n                                                    assetType={\n                                                        availableAsset.assetType\n                                                    }\n                                                    quantities={\n                                                        availableAsset.quantities\n                                                    }\n                                                    networkId={networkId}\n                                                    address={address}\n                                                    onSelect={\n                                                        this.handleSelectAsset\n                                                    }\n                                                    isSelected={\n                                                        selectedAssetType !==\n                                                            undefined &&\n                                                        selectedAssetType ===\n                                                            availableAsset.assetType\n                                                    }\n                                                />\n                                            )\n                                        )\n                                    ) : (\n                                        <div className=\"d-flex align-items-center justify-content-center\">\n                                            <div>\n                                                <div className=\"text-center mt-3\">\n                                                    <img\n                                                        src={Empty}\n                                                        alt={\"empty\"}\n                                                    />\n                                                </div>\n                                                <div className=\"mt-3 empty\">\n                                                    <Trans i18nKey=\"send:asset.list.empty\" />\n                                                </div>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"element-container mb-3\">\n                                <h4 className=\"mb-3\">\n                                    <Trans i18nKey=\"send:asset.recent.title\" />\n                                </h4>\n                                <AssetTxHistory address={address} />\n                            </div>\n                        </div>\n                    </div>\n                    {selectedAssetType && (\n                        <div className=\"right-container\">\n                            <div className=\"right-panel\">\n                                <SendAsset\n                                    address={address}\n                                    selectedAssetType={selectedAssetType}\n                                    onClose={this.handleSendAssetClose}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n    private handleSendAssetClose = () => {\n        this.setState({ selectedAssetType: undefined });\n    };\n    private handleSelectAsset = (assetType: string) => {\n        window.scrollTo(0, 0);\n\n        const selectedAssetType = this.state.selectedAssetType;\n        if (!selectedAssetType) {\n            this.setState({\n                selectedAssetType: assetType\n            });\n        } else if (selectedAssetType === assetType) {\n            this.setState({\n                selectedAssetType: undefined\n            });\n        } else {\n            this.setState({\n                selectedAssetType: undefined\n            });\n            setTimeout(() => {\n                this.setState({ selectedAssetType: assetType });\n            }, 100);\n        }\n    };\n    private init = async () => {\n        this.clearInterval();\n        this.refresher = setInterval(() => {\n            this.fetchAll();\n        }, 10000);\n        this.fetchAll();\n    };\n    private clearInterval = () => {\n        if (this.refresher) {\n            clearInterval(this.refresher);\n        }\n    };\n    private fetchAll = async () => {\n        const {\n            match: {\n                params: { address }\n            }\n        } = this.props;\n        this.props.fetchPendingTxListIfNeed(address);\n        this.props.fetchAggsUTXOListIfNeed(address);\n        this.props.fetchAvailableAssets(address);\n        this.props.fetchWalletFromStorageIfNeed();\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure, props: OwnProps) => {\n    const {\n        match: {\n            params: { address }\n        }\n    } = props;\n    const aggsUTXOList = state.assetReducer.aggsUTXOList[address];\n    const pendingTxList = state.chainReducer.pendingTxList[address];\n    const availableAssets = state.assetReducer.availableAssets[address];\n    const networkId = state.globalReducer.networkId;\n    const assetAddress = _.find(\n        state.walletReducer.assetAddresses,\n        aa => aa.address === address\n    );\n    return {\n        addressUTXOList: aggsUTXOList && aggsUTXOList.data,\n        pendingTxList: pendingTxList && pendingTxList.data,\n        availableAssets,\n        networkId,\n        addressIndex: assetAddress && assetAddress.index\n    };\n};\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchAggsUTXOListIfNeed: (address: string) => {\n        dispatch(assetActions.fetchAggsUTXOListIfNeed(address));\n    },\n    fetchPendingTxListIfNeed: (address: string) => {\n        dispatch(chainActions.fetchPendingTxListIfNeed(address));\n    },\n    fetchAvailableAssets: (address: string) => {\n        dispatch(assetActions.fetchAvailableAssets(address));\n    },\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(AssetList));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {\n    clearKeystore,\n    createSeed,\n    exportMnemonic\n} from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions from \"../../redux/global/globalActions\";\nimport actions from \"../../redux/wallet/walletActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport ConfirmBackupPhrase from \"./ConfirmBackupPhrase/ConfirmBackupPhrase\";\nimport \"./CreateWallet.css\";\nimport InputPassphrase from \"./InputPassphrase/InputPassphrase\";\nimport ShowBackupPhrase from \"./ShowBackupPhrase/ShowBackupPhrase\";\n\nenum PageState {\n    inputPassPhrase = 1,\n    showSecretPhrase,\n    confirmSecretPhrase\n}\n\ninterface State {\n    currentPage: PageState;\n    passphrase?: string | null;\n    mnemonic?: string[];\n    username?: string;\n}\n\ninterface DispatchProps {\n    login: (passpharase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n    createWalletAssetAddress: () => Promise<void>;\n    createWalletPlatformAddress: () => Promise<void>;\n}\n\ntype Props = RouteComponentProps & DispatchProps;\nclass CreateWallet extends React.Component<Props, State> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            currentPage: PageState.inputPassPhrase,\n            passphrase: undefined,\n            username: undefined\n        };\n    }\n    public async componentDidMount() {\n        const { clearData } = this.props;\n        clearPassphrase();\n        clearData();\n        clearWalletKeys();\n        await clearKeystore();\n    }\n    public render() {\n        const { currentPage, mnemonic } = this.state;\n        return (\n            <Container className=\"Create-wallet animated fadeIn\">\n                <div className=\"close-btn\">\n                    <Link to=\"/selectKeyfile\">\n                        <FontAwesomeIcon icon=\"times\" className=\"icon\" />\n                    </Link>\n                </div>\n                <div className=\"create-wallet-form-group\">\n                    {currentPage === PageState.inputPassPhrase && (\n                        <InputPassphrase\n                            onSubmit={this.handleSubmitPassphraseInput}\n                        />\n                    )}\n                    {currentPage === PageState.showSecretPhrase && (\n                        <ShowBackupPhrase\n                            onSubmit={this.handleSubmitShowPhrase}\n                            mnemonic={mnemonic!}\n                        />\n                    )}\n                    {currentPage === PageState.confirmSecretPhrase && (\n                        <ConfirmBackupPhrase\n                            phrases={mnemonic!}\n                            onConfirm={this.handleConfirmPhrase}\n                        />\n                    )}\n                </div>\n                <div className=\"dot-indicator-container\">\n                    {_.map(_.range(3), index => {\n                        return (\n                            <FontAwesomeIcon\n                                key={`dot-${index}`}\n                                icon=\"circle\"\n                                className={`indicator-icon ${\n                                    index < currentPage ? \"active\" : \"inactive\"\n                                }`}\n                            />\n                        );\n                    })}\n                </div>\n            </Container>\n        );\n    }\n\n    private handleSubmitPassphraseInput = async (\n        username: string,\n        passphrase: string\n    ) => {\n        await createSeed(passphrase);\n        const mnemonicString = await exportMnemonic(passphrase);\n        const mnemonic = mnemonicString.split(\" \");\n        this.setState({\n            currentPage: PageState.showSecretPhrase,\n            passphrase,\n            mnemonic,\n            username\n        });\n    };\n\n    private handleSubmitShowPhrase = () => {\n        this.setState({ currentPage: PageState.confirmSecretPhrase });\n    };\n\n    private handleConfirmPhrase = async () => {\n        const { login, history } = this.props;\n        const { passphrase, username } = this.state;\n        localStorage.setItem(\"USERNAME\", username!);\n        await login(passphrase!);\n        await this.props.createWalletAssetAddress();\n        await this.props.createWalletPlatformAddress();\n        history.push(`/`);\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(globalActions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(globalActions.clearData());\n    },\n    createWalletPlatformAddress: () => {\n        return dispatch(actions.createWalletPlatformAddress());\n    },\n    createWalletAssetAddress: () => {\n        return dispatch(actions.createWalletAssetAddress());\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withRouter(CreateWallet));\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport \"./ConfirmBackupPhrase.css\";\n\ninterface OwnProps {\n    phrases: string[];\n    onConfirm: () => void;\n}\n\ninterface State {\n    selectedPhrasesIndex?: number[] | null;\n    suffledPhrases: string[];\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass ConfirmBackupPhrase extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            selectedPhrasesIndex: undefined,\n            suffledPhrases: _.shuffle(this.props.phrases)\n        };\n    }\n    public componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n    public render() {\n        const { phrases, onConfirm } = this.props;\n        const { selectedPhrasesIndex, suffledPhrases } = this.state;\n        return (\n            <div className=\"Confirm-backup-phrase animated fadeIn\">\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:confirm.title\" />\n                    </h4>\n                </div>\n                <div className=\"description\">\n                    <Trans i18nKey=\"create:confirm.detail\" />\n                </div>\n                <div>\n                    <div className=\"backup-phrase-input d-flex align-items-center justify-content-center\">\n                        {selectedPhrasesIndex &&\n                            this.indexToString(selectedPhrasesIndex).join(\" \")}\n                    </div>\n                    <div className=\"backup-phrase-button-container text-center\">\n                        <div>\n                            {_.map(suffledPhrases, (text, index) => {\n                                return (\n                                    <button\n                                        key={`phrase-${text}`}\n                                        className={`btn btn-primary backup-phrase-btn ${selectedPhrasesIndex &&\n                                            _.includes(\n                                                selectedPhrasesIndex,\n                                                index\n                                            ) &&\n                                            \"reverse\"}`}\n                                        onClick={_.partial(\n                                            this.toggleSelectPhrase,\n                                            index\n                                        )}\n                                    >\n                                        {text}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        disabled={\n                            selectedPhrasesIndex == null ||\n                            !_.isEqual(\n                                phrases,\n                                this.indexToString(selectedPhrasesIndex)\n                            )\n                        }\n                        onClick={onConfirm}\n                    >\n                        <Trans i18nKey=\"create:confirm.button\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n    private indexToString = (selectedPhraseIndex: number[]) => {\n        const { suffledPhrases } = this.state;\n        return _.map(selectedPhraseIndex, i => suffledPhrases[i]);\n    };\n    private toggleSelectPhrase = (index: number) => {\n        const { selectedPhrasesIndex } = this.state;\n        if (!selectedPhrasesIndex) {\n            this.setState({ selectedPhrasesIndex: [index] });\n            return;\n        }\n        if (_.includes(selectedPhrasesIndex, index)) {\n            this.setState({\n                selectedPhrasesIndex: _.filter(\n                    selectedPhrasesIndex,\n                    sp => sp !== index\n                )\n            });\n        } else {\n            this.setState({\n                selectedPhrasesIndex: [...selectedPhrasesIndex, index]\n            });\n        }\n    };\n}\nexport default withTranslation()(ConfirmBackupPhrase);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\n\nimport { Form } from \"reactstrap\";\nimport ValidationInput from \"../../ValidationInput/ValidationInput\";\nimport \"./InputPassphrase.css\";\n\ninterface State {\n    passphrase: string;\n    passphraseConfirm: string;\n    isPassphraseValid?: boolean;\n    passphraseError?: string;\n    isPassphraseConfirmValid?: boolean;\n    passphraseConfirmError?: string;\n    isSubmitted: boolean;\n    username: string;\n    isUsernameValid?: boolean;\n    usernameError?: string;\n    hasAgreeTOC: boolean;\n    hasAgreePP: boolean;\n}\n\nconst TermsOfConditionLink =\n    \"https://docs.google.com/document/d/1-HJep6vXMaiX4p62ijIfAc9yyX_rKAFkFLPsMod8tl0/edit?usp=sharing\";\nconst PPLink =\n    \"https://docs.google.com/document/d/13Bonpgp2Va4dDlAIzvH2JSKFyOBlSSUrvFQ_PE2YqWI/edit?usp=sharing\";\n\ninterface OwnProps {\n    onSubmit: (username: string, passphrase: string) => void;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass InputPassphrase extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            passphraseConfirm: \"\",\n            isPassphraseValid: undefined,\n            passphraseError: undefined,\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined,\n            isSubmitted: false,\n            username: \"\",\n            isUsernameValid: undefined,\n            usernameError: undefined,\n            hasAgreeTOC: false,\n            hasAgreePP: false\n        };\n    }\n    public render() {\n        const { t } = this.props;\n        const {\n            passphrase,\n            passphraseConfirm,\n            isPassphraseConfirmValid,\n            isPassphraseValid,\n            passphraseConfirmError,\n            passphraseError,\n            isSubmitted,\n            username,\n            isUsernameValid,\n            usernameError,\n            hasAgreeTOC,\n            hasAgreePP\n        } = this.state;\n        return (\n            <Form\n                className=\"Input-passphrase animated fadeIn\"\n                onSubmit={this.handleOnFormSubmit}\n            >\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:seed.title\" />\n                    </h4>\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.name\")}\n                        onChange={this.handleUsernameInput}\n                        value={username}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.name\")}\n                        type=\"text\"\n                        isValid={isUsernameValid}\n                        error={usernameError}\n                        onBlur={this.checkUsernameValid}\n                    />\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.password\")}\n                        onChange={this.handlePassphraseInput}\n                        value={passphrase}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.password\")}\n                        type=\"password\"\n                        isValid={isPassphraseValid}\n                        error={passphraseError}\n                        onBlur={this.checkPassphraseValid}\n                    />\n                </div>\n                <div>\n                    <ValidationInput\n                        labelText={t(\"create:seed.password_confirm\")}\n                        onChange={this.handlePassphraseConfirmInput}\n                        value={passphraseConfirm}\n                        showValidation={true}\n                        placeholder={t(\"create:seed.password_confirm\")}\n                        type=\"password\"\n                        isValid={isPassphraseConfirmValid}\n                        error={passphraseConfirmError}\n                        onBlur={this.checkPassphraseConfirm}\n                    />\n                </div>\n                <div className=\"form-container\">\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"tocCheck\"\n                            checked={hasAgreeTOC}\n                            onChange={this.handleTOCClick}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"tocCheck\">\n                            <Trans i18nKey=\"create:seed.terms\">\n                                {/* eslint-disable-next-line */}\n                                <a\n                                    href={`${TermsOfConditionLink}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                />\n                            </Trans>\n                        </label>\n                    </div>\n                    <div className=\"form-check\">\n                        <input\n                            type=\"checkbox\"\n                            className=\"form-check-input\"\n                            id=\"ppCheck\"\n                            checked={hasAgreePP}\n                            onChange={this.handlePPClick}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"ppCheck\">\n                            <Trans i18nKey=\"create:seed.privacy\">\n                                {/* eslint-disable-next-line */}\n                                <a\n                                    href={`${PPLink}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                />\n                            </Trans>\n                        </label>\n                    </div>\n                </div>\n                <div className=\"mt-5\">\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        disabled={isSubmitted || !hasAgreePP || !hasAgreeTOC}\n                        type=\"submit\"\n                    >\n                        {isSubmitted\n                            ? t(\"create:seed.creating\")\n                            : t(\"create:seed.ok\")}\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleTOCClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasAgreeTOC: event.target.checked\n        });\n    };\n\n    private handlePPClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasAgreePP: event.target.checked\n        });\n    };\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleSubmit();\n    };\n\n    private handleSubmit = () => {\n        const { onSubmit } = this.props;\n        const { passphrase, username } = this.state;\n        if (!this.checkUsernameValid()) {\n            return;\n        }\n        if (!this.checkPassphraseValid()) {\n            return;\n        }\n        if (!this.checkPassphraseConfirm()) {\n            return;\n        }\n\n        this.setState({ isSubmitted: true });\n\n        setTimeout(() => {\n            onSubmit(username, passphrase);\n        }, 500);\n    };\n\n    private checkPassphraseValid = () => {\n        const { passphrase } = this.state;\n        if (passphrase.length < 8) {\n            this.setState({\n                passphraseError: this.props.t(\"create:seed.error.pass_minimum\"),\n                isPassphraseValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: true\n        });\n        return true;\n    };\n\n    private checkPassphraseConfirm = () => {\n        const { passphrase, passphraseConfirm } = this.state;\n        if (passphrase !== passphraseConfirm) {\n            this.setState({\n                passphraseConfirmError: this.props.t(\n                    \"create:seed.error.pass_mismatch\"\n                ),\n                isPassphraseConfirmValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: true\n        });\n        return true;\n    };\n\n    private checkUsernameValid = () => {\n        const { username } = this.state;\n        if (username === \"\") {\n            this.setState({\n                isUsernameValid: false,\n                usernameError: this.props.t(\"create:seed.error.name_required\")\n            });\n            return false;\n        }\n        if (username.length > 20) {\n            this.setState({\n                usernameError: this.props.t(\"create:seed.error.name_maximum\"),\n                isUsernameValid: false\n            });\n            return false;\n        }\n        this.setState({\n            isUsernameValid: true,\n            usernameError: undefined\n        });\n        return true;\n    };\n\n    private handlePassphraseInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: undefined\n        });\n        this.setState({\n            passphrase: event.target.value,\n            passphraseConfirm: \"\",\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n    };\n\n    private handlePassphraseConfirmInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n        this.setState({ passphraseConfirm: event.target.value });\n    };\n\n    private handleUsernameInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            username: event.target.value,\n            usernameError: undefined,\n            isUsernameValid: undefined\n        });\n    };\n}\n\nexport default withTranslation()(InputPassphrase);\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport \"./ShowBackupPhrase.css\";\n\ninterface OwnProps {\n    onSubmit: () => void;\n    mnemonic: string[];\n}\ntype Props = WithTranslation & OwnProps;\n\nclass ShowBackupPhrase extends React.Component<Props> {\n    public componentDidMount() {\n        window.scrollTo(0, 0);\n    }\n    public render() {\n        const { mnemonic } = this.props;\n        return (\n            <div className=\"Show-backup-phrase animated fadeIn\">\n                <div className=\"title-container\">\n                    <h4 className=\"title\">\n                        <Trans i18nKey=\"create:mnemonic.title\" />\n                    </h4>\n                </div>\n                <div className=\"text-1\">\n                    <Trans i18nKey=\"create:mnemonic.detail\" />\n                </div>\n                <div className=\"warning-text\">\n                    <Trans i18nKey=\"create:mnemonic.warning\" />\n                </div>\n                <div className=\"tips-container\">\n                    <p className=\"tips-text mb-0\">\n                        <Trans i18nKey=\"create:mnemonic.tip\" />\n                    </p>\n                    <span className=\"text-2\">\n                        <Trans i18nKey=\"create:mnemonic.tip_detail\" />\n                    </span>\n                </div>\n                <div className=\"backup-phrase-container\">\n                    <div className=\"backup-phrase-panel d-flex align-items-center justify-content-center\">\n                        <span>{mnemonic.join(\" \")}</span>\n                        <CopyToClipboard\n                            text={mnemonic.join(\" \")}\n                            onCopy={this.handleCopyPhrase}\n                        >\n                            <div className=\"copy-btn\">\n                                <span>\n                                    <Trans i18nKey=\"create:mnemonic.copy\" />\n                                </span>\n                            </div>\n                        </CopyToClipboard>\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary reverse square main-btn\"\n                        type=\"submit\"\n                        onClick={this.props.onSubmit}\n                    >\n                        <Trans i18nKey=\"create:mnemonic.button\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleCopyPhrase = () => {\n        toast.info(this.props.t(\"create:mnemonic.copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(ShowBackupPhrase);\n","import React from \"react\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport facebook from \"./img/facebook.svg\";\nimport github from \"./img/github.svg\";\nimport gitter from \"./img/gitter.svg\";\nimport medium from \"./img/medium.svg\";\nimport telegram from \"./img/telegram.svg\";\nimport twitter from \"./img/twitter.svg\";\nimport \"./index.css\";\n\ntype Props = WithTranslation;\n\nclass Footer extends React.Component<Props> {\n    public render() {\n        return (\n            <div className=\"Footer\">\n                <Container>\n                    <Row>\n                        <Col lg={6} className=\"left-panel\">\n                            <ul className=\"left-menu-list list-inline list-unstyled\">\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://codechain.io\"\n                                    >\n                                        About Us\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://codechain.io/#contact\"\n                                    >\n                                        Contact\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://docs.google.com/document/d/13Bonpgp2Va4dDlAIzvH2JSKFyOBlSSUrvFQ_PE2YqWI/edit?usp=sharing\"\n                                    >\n                                        Privacy Policy\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://docs.google.com/document/d/1-HJep6vXMaiX4p62ijIfAc9yyX_rKAFkFLPsMod8tl0/edit?usp=sharing\"\n                                    >\n                                        Terms and Conditions\n                                    </a>\n                                </li>\n                            </ul>\n                        </Col>\n                        <Col lg={6} className=\"right-panel\">\n                            <ul className=\"right-menu-list list-unstyled list-unstyled\">\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://www.facebook.com/codechain/\"\n                                    >\n                                        <img src={facebook} alt={\"facebook\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://github.com/CodeChain-io/codechain-web-wallet\"\n                                    >\n                                        <img src={github} alt={\"github\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://gitter.im/CodeChain-io/codechain\"\n                                    >\n                                        <img src={gitter} alt={\"gitter\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://twitter.com/codechain_io\"\n                                    >\n                                        <img src={twitter} alt={\"twitter\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"https://medium.com/codechain\"\n                                    >\n                                        <img src={medium} alt={\"medium\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item\">\n                                    <a\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                        href=\"http://t.me/codechain_protocol\"\n                                    >\n                                        <img src={telegram} alt={\"telegram\"} />\n                                    </a>\n                                </li>\n                                <li className=\"list-inline-item language-selector-container\">\n                                    <select\n                                        onChange={this.onLanguageChange}\n                                        className=\"language-selector\"\n                                        value={this.props.i18n.language}\n                                        defaultValue=\"en\"\n                                    >\n                                        <option value=\"en\">English</option>\n                                        <option value=\"ko\">한국어</option>\n                                    </select>\n                                </li>\n                            </ul>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n\n    public onLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const lang = event.target.value;\n        this.props.i18n.changeLanguage(lang);\n    };\n}\n\nexport default withTranslation()(Footer);\n","import React from \"react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { Trans, withTranslation, WithTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport Form from \"reactstrap/lib/Form\";\nimport { checkPassphrase, exportMnemonic } from \"../../model/keystore\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport \"./ExportBackupPopup.css\";\n\ninterface Props {\n    isOpen: boolean;\n    toggle: () => void;\n    className?: string;\n}\n\ninterface State {\n    passphrase: string;\n    isValidPassphrase?: boolean;\n    passphraseError?: string;\n    revealBackupPhrase: boolean;\n    backupPhraseString?: string | null;\n}\n\nclass ExportBackupPopup extends React.Component<\n    Props & WithTranslation,\n    State\n> {\n    constructor(props: Props & WithTranslation) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            isValidPassphrase: undefined,\n            passphraseError: undefined,\n            revealBackupPhrase: false,\n            backupPhraseString: undefined\n        };\n    }\n    public render() {\n        const { className, toggle, isOpen, t } = this.props;\n        const {\n            passphrase,\n            isValidPassphrase,\n            passphraseError,\n            revealBackupPhrase,\n            backupPhraseString\n        } = this.state;\n        return (\n            <Modal\n                isOpen={isOpen}\n                toggle={toggle}\n                className={`Export-backup-popup ${className}`}\n                size=\"sm\"\n                centered={true}\n            >\n                <ModalHeader toggle={toggle}>\n                    <Trans i18nKey=\"backup:title\" />\n                </ModalHeader>\n                <ModalBody>\n                    <Form onSubmit={this.handleOnFormSubmit}>\n                        <div className=\"passphrase-container\">\n                            <div className=\"d-flex align-items-center justify-content-center passphrase-panel\">\n                                {backupPhraseString && [\n                                    <span key=\"backup-phrase\">\n                                        {backupPhraseString}\n                                    </span>,\n                                    <CopyToClipboard\n                                        key=\"copy\"\n                                        text={backupPhraseString}\n                                        onCopy={this.handleCopyPhrase}\n                                    >\n                                        <div className=\"copy-btn\">\n                                            <span>COPY</span>\n                                        </div>\n                                    </CopyToClipboard>\n                                ]}\n                            </div>\n                            {!revealBackupPhrase && (\n                                <div className=\"d-flex align-items-center justify-content-center disable-panel\">\n                                    <span>\n                                        <Trans i18nKey=\"backup:reveal\" />\n                                    </span>\n                                </div>\n                            )}\n                        </div>\n                        <div className=\"mt-3\">\n                            <ValidationInput\n                                onChange={this.handlePassphrase}\n                                value={passphrase}\n                                showValidation={true}\n                                labelText={t(\"backup:password.label\")}\n                                placeholder={t(\"backup:password.placeholder\")}\n                                type=\"password\"\n                                isValid={isValidPassphrase}\n                                error={passphraseError}\n                                onBlur={this.checkPhrase}\n                                disable={revealBackupPhrase}\n                            />\n                        </div>\n                        <div className=\"mb-3\">\n                            <Button\n                                color=\"primary square reverse w-100\"\n                                disabled={\n                                    !passphrase ||\n                                    isValidPassphrase === false ||\n                                    revealBackupPhrase\n                                }\n                            >\n                                <Trans i18nKey=\"backup:see_btn\" />\n                            </Button>\n                        </div>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        );\n    }\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleButtonClick();\n    };\n    private handlePassphrase = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            passphrase: event.target.value,\n            isValidPassphrase: undefined,\n            passphraseError: undefined\n        });\n    };\n    private checkPhrase = async () => {\n        const { passphrase } = this.state;\n        const isValid = await checkPassphrase(passphrase);\n        if (isValid) {\n            this.setState({\n                isValidPassphrase: true,\n                passphraseError: undefined\n            });\n        } else {\n            this.setState({\n                isValidPassphrase: false,\n                passphraseError: this.props.t(\"backup:password_error\")\n            });\n        }\n    };\n    private handleButtonClick = async () => {\n        const { passphrase } = this.state;\n        if (!this.checkPhrase()) {\n            return;\n        }\n\n        const backupPhraseString = await exportMnemonic(passphrase);\n        this.setState({\n            revealBackupPhrase: true,\n            backupPhraseString\n        });\n    };\n    private handleCopyPhrase = () => {\n        toast.info(this.props.t(\"main:copied\"), {\n            position: toast.POSITION.BOTTOM_CENTER,\n            autoClose: 1000,\n            closeButton: false,\n            hideProgressBar: true\n        });\n    };\n}\n\nexport default withTranslation()(ExportBackupPopup);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Popover, PopoverBody } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { WithTranslation, withTranslation } from \"react-i18next\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport globalActions from \"../../../redux/global/globalActions\";\nimport ExportBackupPopup from \"../../ExportBackupPopup/ExportBackupPopup\";\nimport \"./MenuButton.css\";\n\ninterface OwnProps {\n    className?: string;\n}\n\ninterface StateProps {\n    networkId: NetworkId;\n}\n\ninterface State {\n    popoverOpen: boolean;\n    exportPopupOpen: boolean;\n}\n\ninterface DispatchProps {\n    logout: () => void;\n}\n\ntype Props = WithTranslation & DispatchProps & StateProps & OwnProps;\nclass MenuButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            popoverOpen: false,\n            exportPopupOpen: false\n        };\n    }\n    public render() {\n        const { className, t } = this.props;\n        const { exportPopupOpen, popoverOpen } = this.state;\n        return (\n            <div\n                className={`Menu-button ${className}`}\n                onClick={this.toggle}\n                id=\"menu-button\"\n            >\n                {exportPopupOpen && (\n                    <ExportBackupPopup\n                        toggle={this.toggleExportPopup}\n                        isOpen={exportPopupOpen}\n                    />\n                )}\n                <div className=\"d-flex align-items-center network-btn\">\n                    <FontAwesomeIcon icon=\"ellipsis-h\" />\n                </div>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={popoverOpen}\n                    target=\"menu-button\"\n                    toggle={this.toggle}\n                >\n                    <PopoverBody className=\"popover-select-list\">\n                        <ul className=\"list-unstyled mb-0\">\n                            <li onClick={this.handleSignout}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-2\">\n                                        {t(\"main:menu.lock\")}\n                                    </span>\n                                    <FontAwesomeIcon icon=\"lock\" />\n                                </div>\n                            </li>\n                            <li onClick={this.openExportPopup}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-2\">\n                                        {t(\"main:menu.backup_phrase\")}\n                                    </span>\n                                    <FontAwesomeIcon icon=\"arrow-circle-down\" />\n                                </div>\n                            </li>\n                        </ul>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n    public handleSignout = () => {\n        const { logout } = this.props;\n        logout();\n    };\n    private openExportPopup = () => {\n        this.setState({\n            exportPopupOpen: !this.state.exportPopupOpen,\n            popoverOpen: false\n        });\n    };\n    private toggle = () => {\n        this.setState({ popoverOpen: !this.state.popoverOpen });\n    };\n    private toggleExportPopup = () => {\n        this.setState({ exportPopupOpen: !this.state.exportPopupOpen });\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    networkId: state.globalReducer.networkId,\n    passphrase: state.globalReducer.passphrase\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    logout: () => {\n        dispatch(globalActions.logout());\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(MenuButton));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Popover, PopoverBody } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { NetworkId } from \"../../../model/address\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport { getNetworkNameById } from \"../../../utils/network\";\nimport MainNet from \"./img/mainnet.svg\";\nimport TestNet from \"./img/testnet.svg\";\n\nimport _ from \"lodash\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport globalActions from \"../../../redux/global/globalActions\";\nimport \"./NetworkButton.css\";\n\ninterface OwnProps {\n    className?: string;\n}\n\ninterface StateProps {\n    networkId: NetworkId;\n}\n\ninterface State {\n    popoverOpen: boolean;\n}\n\ninterface DispatchProps {\n    updateNetworkId: (networkId: NetworkId) => void;\n}\n\ntype Props = RouteComponentProps & StateProps & OwnProps & DispatchProps;\nclass NetworkButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            popoverOpen: false\n        };\n    }\n    public render() {\n        const { networkId, className } = this.props;\n        return (\n            <div\n                className={`Network-button ${className}`}\n                onClick={this.toggle}\n                id=\"network-button\"\n            >\n                <div className=\"d-flex align-items-center network-btn\">\n                    <div className=\"mr-1\">{getNetworkNameById(networkId)}</div>\n                    <img\n                        src={networkId === \"cc\" ? MainNet : TestNet}\n                        alt={\"network\"}\n                    />\n                </div>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={this.state.popoverOpen}\n                    target=\"network-button\"\n                    toggle={this.toggle}\n                >\n                    <PopoverBody className=\"popover-select-list\">\n                        <ul className=\"list-unstyled mb-0\">\n                            <li onClick={_.partial(this.chagneNetworkId, \"cc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">MAINNET</span>\n                                    <img src={MainNet} alt={\"mainnet\"} />\n                                </div>\n                            </li>\n                            {/*\n                            <li onClick={_.partial(this.chagneNetworkId, \"tc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">HUSKY</span>\n                                    <img src={TestNet} />\n                                </div>\n                            </li>\n                            <li onClick={_.partial(this.chagneNetworkId, \"sc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">SALUKI</span>\n                                    <img src={TestNet} />\n                                </div>\n                            </li>\n                            */}\n                            <li onClick={_.partial(this.chagneNetworkId, \"wc\")}>\n                                <div className=\"d-flex align-items-center justify-content-end\">\n                                    <span className=\"mr-1\">TESTNET</span>\n                                    <img src={TestNet} alt={\"testnet\"} />\n                                </div>\n                            </li>\n                        </ul>\n                    </PopoverBody>\n                </Popover>\n            </div>\n        );\n    }\n    private toggle = () => {\n        this.setState({ popoverOpen: !this.state.popoverOpen });\n    };\n    private chagneNetworkId = (networkId: NetworkId) => {\n        const { updateNetworkId, networkId: currentNetworkId } = this.props;\n        const { history } = this.props;\n        this.toggle();\n        if (networkId === currentNetworkId) {\n            return;\n        }\n        updateNetworkId(networkId);\n        history.replace(\"/\");\n    };\n}\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    networkId: state.globalReducer.networkId,\n    passphrase: state.globalReducer.passphrase\n});\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    updateNetworkId: (networkId: NetworkId) => {\n        dispatch(globalActions.updateNetworkId(networkId));\n    }\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NetworkButton));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { ReducerConfigure } from \"../../../redux\";\nimport globalActions from \"../../../redux/global/globalActions\";\n\nclass WalletSaver extends React.Component<any, any> {\n    public timer: NodeJS.Timeout | null = null;\n\n    public componentDidMount() {\n        this.startTimer();\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n        document.addEventListener(\"touchend\", this.handleTouchOutside);\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    public componentWillUnmount() {\n        this.clearTimer();\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\n        document.removeEventListener(\"touchend\", this.handleTouchOutside);\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    public render() {\n        return null;\n    }\n\n    private handleClickOutside = () => {\n        this.resetTimer();\n    };\n\n    private handleTouchOutside = () => {\n        this.resetTimer();\n    };\n\n    private handleKeyDown = () => {\n        this.resetTimer();\n    };\n\n    private startTimer = () => {\n        const { logout } = this.props;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            logout();\n        }, 60 * 10 * 1000);\n    };\n\n    private clearTimer = () => {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    };\n\n    private resetTimer = () => {\n        this.startTimer();\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    logout: () => {\n        dispatch(globalActions.logout());\n    }\n});\nexport default connect(\n    undefined,\n    mapDispatchToProps\n)(WalletSaver);\n","import React from \"react\";\nimport LoadingBar from \"react-redux-loading-bar\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\nimport Logo from \"./img/logo.svg\";\nimport MenuButton from \"./MenuButton/MenuButton\";\nimport NetworkButton from \"./NetworkButton/NetworkButton\";\nimport WalletSaver from \"./WalletSaver\";\n\nexport default class Header extends React.Component {\n    public render() {\n        return (\n            <div className=\"Header\" key=\"header\">\n                <div className=\"header-container d-flex align-items-center h-100\">\n                    <Link to=\"/\">\n                        <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    </Link>\n                    <WalletSaver />\n                    <NetworkButton className=\"ml-auto\" />\n                    <MenuButton className=\"\" />\n                </div>\n                <LoadingBar className=\"loading-bar\" />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { Form } from \"reactstrap\";\nimport ValidationInput from \"../../ValidationInput/ValidationInput\";\nimport \"./LoginForm.css\";\n\ninterface OwnProps {\n    onChange: (passphrase: string) => void;\n    onSignIn: () => void;\n    passphrase: string;\n    isValid?: boolean;\n    username?: string | null;\n}\n\ntype Props = WithTranslation & OwnProps;\n\nclass LoginForm extends React.Component<Props> {\n    public render() {\n        const { t, passphrase, isValid, username } = this.props;\n        return (\n            <Form className=\"login-form\" onSubmit={this.handleOnFormSubmit}>\n                <h4 className=\"welcome-text\">\n                    <Trans\n                        i18nKey=\"welcome:title\"\n                        values={{ name: username ? username : \"\" }}\n                    />\n                </h4>\n                <div className=\"passphrase-input-container\">\n                    <ValidationInput\n                        onChange={this.handleOnChagne}\n                        value={passphrase}\n                        showValidation={true}\n                        labelText={t(\"welcome:password\")}\n                        placeholder={t(\"welcome:password_placeholder\")}\n                        type=\"password\"\n                        isValid={isValid}\n                        error={\n                            isValid === false\n                                ? (t(\"welcome:password_invalid\") as string)\n                                : undefined\n                        }\n                    />\n                </div>\n                <div>\n                    <button\n                        className=\"btn btn-primary square sign-in-btn\"\n                        type=\"submit\"\n                    >\n                        <Trans i18nKey=\"welcome:signin\" />\n                    </button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.props.onSignIn();\n    };\n\n    private handleOnChagne = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { onChange } = this.props;\n        onChange(event.target.value);\n    };\n}\n\nexport default withTranslation()(LoginForm);\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport actions from \"../../redux/global/globalActions\";\nimport \"./Login.css\";\n\nimport {\n    Link,\n    Redirect,\n    RouteComponentProps,\n    withRouter\n} from \"react-router-dom\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId } from \"../../model/address\";\nimport { checkPassphrase } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport { getNetworkId, getPassphrase } from \"../../utils/storage\";\nimport Logo from \"./img/logo-vertical.svg\";\nimport LoginForm from \"./LoginForm/LoginForm\";\n\ninterface DispatchProps {\n    login: (passphrase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n    updateNetworkId: (networkId: NetworkId) => Promise<void>;\n}\n\ninterface OwnProps {\n    location: {\n        state: {\n            from: string;\n        };\n    };\n}\n\ninterface State {\n    passphrase: string;\n    isValid?: boolean;\n    redirectToReferrer: boolean;\n    username?: string | null;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps & OwnProps;\nclass Login extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            passphrase: \"\",\n            isValid: undefined,\n            redirectToReferrer: false,\n            username: undefined\n        };\n    }\n    public componentDidMount() {\n        const { login, updateNetworkId } = this.props;\n        this.props.clearData();\n\n        const savedNetworkId = getNetworkId();\n        if (savedNetworkId) {\n            updateNetworkId(savedNetworkId);\n        }\n\n        const savedPassphrase = getPassphrase();\n        if (savedPassphrase) {\n            login(savedPassphrase);\n            this.setState({ redirectToReferrer: true });\n        }\n\n        const username = localStorage.getItem(\"USERNAME\");\n        this.setState({ username });\n    }\n    public render() {\n        const {\n            passphrase,\n            isValid,\n            redirectToReferrer,\n            username\n        } = this.state;\n        const { from } = this.props.location.state || {\n            from: { pathname: \"/\" }\n        };\n        if (redirectToReferrer) {\n            return <Redirect to={from} />;\n        }\n        return (\n            <Container className=\"Login animated fadeIn\">\n                <div className=\"title-container text-center\">\n                    <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    <h1 className=\"mt-4 logo-title\">Wallet</h1>\n                </div>\n                <div className=\"login-form-container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <LoginForm\n                            onChange={this.handleOnChangePassphrase}\n                            passphrase={passphrase}\n                            onSignIn={this.handleSignIn}\n                            isValid={isValid}\n                            username={username}\n                        />\n                    </div>\n                </div>\n                <div className=\"text-center open-different-btn-container\">\n                    <Link className=\"open-different-btn\" to=\"/selectKeyfile\">\n                        <Trans i18nKey=\"welcome:different\" />\n                    </Link>\n                </div>\n            </Container>\n        );\n    }\n\n    public handleOnChangePassphrase = (passphrase: string) => {\n        this.setState({ passphrase, isValid: undefined });\n    };\n\n    public handleSignIn = async () => {\n        const { login, history } = this.props;\n        const { passphrase } = this.state;\n\n        const isValid = await checkPassphrase(passphrase);\n        if (!isValid) {\n            this.setState({ isValid: false, passphrase: \"\" });\n            return;\n        }\n\n        await login(passphrase);\n        history.push(`/`);\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(actions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(actions.clearData());\n    },\n    updateNetworkId: (netowrkId: NetworkId) => {\n        return dispatch(actions.updateNetworkId(netowrkId));\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withTranslation()(withRouter(Login)));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport BigNumber from \"bignumber.js\";\nimport { SignedTransaction, U64 } from \"codechain-sdk/lib/core/classes\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport Spinner from \"react-spinkit\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { NetworkId, WalletAddress } from \"../../model/address\";\nimport { ReducerConfigure } from \"../../redux\";\nimport accountActions from \"../../redux/account/accountActions\";\nimport chainActions from \"../../redux/chain/chainActions\";\nimport walletActions from \"../../redux/wallet/walletActions\";\nimport { TxUtil } from \"../../utils/transaction\";\nimport TooltipLabel from \"../TooltipLabel\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport CheckIcon from \"./img/check_icon.svg\";\nimport \"./index.css\";\n\ninterface State {\n    name: string;\n    iconURL: string;\n    supply: string;\n    description: string;\n    feePayer?: string;\n    fee: string;\n    nameError?: string;\n    isNameValid?: boolean;\n    supplyError?: string;\n    isSupplyValid?: boolean;\n    isFeeValid?: boolean;\n    feeError?: string;\n    isSendingTx: boolean;\n    isSentTx: boolean;\n    selectedAddress?: string;\n}\n\ninterface StateProps {\n    assetAddresses?: WalletAddress[] | null;\n    platformAddresses?: WalletAddress[] | null;\n    availableQuarkList: { [address: string]: U64 | null | undefined };\n    networkId: NetworkId;\n    passphrase: string;\n}\n\ninterface DispatchProps {\n    fetchWalletFromStorageIfNeed: () => void;\n    fetchAvailableQuark: (address: string) => void;\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => Promise<unknown>;\n}\n\nconst MinimumFee = 100000;\n\ntype Props = WithTranslation & RouteComponentProps & StateProps & DispatchProps;\nclass MintAsset extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            iconURL: \"\",\n            supply: \"\",\n            description: \"\",\n            feePayer: undefined,\n            fee: \"\",\n            isSendingTx: false,\n            isSentTx: false\n        };\n    }\n    public componentDidMount() {\n        this.props.fetchWalletFromStorageIfNeed();\n        if (this.props.assetAddresses) {\n            if (this.props.assetAddresses.length > 0) {\n                this.setState({\n                    selectedAddress: this.props.assetAddresses[0].address\n                });\n            }\n        }\n        if (this.props.platformAddresses) {\n            if (this.props.platformAddresses.length > 0) {\n                this.selectFeePayer(this.props.platformAddresses[0].address);\n            }\n        }\n    }\n    public componentWillUpdate(nextProps: Props) {\n        if (!this.props.assetAddresses && nextProps.assetAddresses) {\n            if (nextProps.assetAddresses.length > 0) {\n                this.setState({\n                    selectedAddress: nextProps.assetAddresses[0].address\n                });\n            }\n        }\n        if (!this.props.platformAddresses && nextProps.platformAddresses) {\n            if (nextProps.platformAddresses) {\n                if (nextProps.platformAddresses.length > 0) {\n                    this.selectFeePayer(nextProps.platformAddresses[0].address);\n                }\n            }\n        }\n    }\n    public render() {\n        const {\n            t,\n            platformAddresses,\n            availableQuarkList,\n            assetAddresses\n        } = this.props;\n        const {\n            name,\n            iconURL,\n            supply,\n            description,\n            feePayer,\n            fee,\n            nameError,\n            isNameValid,\n            supplyError,\n            isSupplyValid,\n            isFeeValid,\n            feeError,\n            isSendingTx,\n            isSentTx,\n            selectedAddress\n        } = this.state;\n        return (\n            <div className=\"Mint-asset\">\n                <Container>\n                    <div className=\"page-container d-flex mb-4 back-icon-container\">\n                        <Link to=\"/\" className=\"ml-auto\">\n                            <FontAwesomeIcon\n                                className=\"back-icon\"\n                                icon=\"arrow-left\"\n                            />\n                        </Link>\n                    </div>\n                    <div className=\"page-container mint-container\">\n                        <h2 className=\"title\">\n                            <Trans i18nKey=\"mint:title\" />\n                        </h2>\n                        <span className=\"mint-description\">\n                            <Trans i18nKey=\"mint:detail\" />\n                        </span>\n                        {!assetAddresses ? (\n                            <span className=\"loading-text\">\n                                <Trans i18nKey=\"mint:loading\" />\n                            </span>\n                        ) : selectedAddress ? (\n                            <div>\n                                {isSentTx ? (\n                                    <div className=\"d-flex align-items-center justify-content-center text-center complete-container\">\n                                        <div className=\"text-center\">\n                                            <div>\n                                                <img\n                                                    src={CheckIcon}\n                                                    alt={\"check\"}\n                                                />\n                                            </div>\n                                            <div className=\"mt-3\">\n                                                <span>\n                                                    <Trans i18nKey=\"mint:complete\" />\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <div>\n                                        <div className=\"asset-info-container\">\n                                            <ValidationInput\n                                                labelText={t(\"mint:name.label\")}\n                                                placeholder={t(\n                                                    \"mint:name.placeholder\"\n                                                )}\n                                                value={name}\n                                                onChange={this.handleNameChange}\n                                                showValidation={false}\n                                                isValid={isNameValid}\n                                                error={nameError}\n                                                onBlur={\n                                                    this.checkNameValidation\n                                                }\n                                            />\n                                            <ValidationInput\n                                                labelText={t(\n                                                    \"mint:supply.label\"\n                                                )}\n                                                decimalScale={0}\n                                                placeholder={t(\n                                                    \"mint:supply.placeholder\"\n                                                )}\n                                                value={supply}\n                                                type=\"number\"\n                                                onChange={\n                                                    this.handleSupplyChange\n                                                }\n                                                showValidation={false}\n                                                isValid={isSupplyValid}\n                                                error={supplyError}\n                                                tooltip={t(\n                                                    \"mint:supply.tooltip\"\n                                                )}\n                                                onBlur={\n                                                    this.checkSupplyValidation\n                                                }\n                                            />\n                                            <div className=\"d-flex\">\n                                                <div className=\"icon-url-input-container\">\n                                                    <ValidationInput\n                                                        labelText={t(\n                                                            \"mint:url.label\"\n                                                        )}\n                                                        placeholder={t(\n                                                            \"mint:url.placeholder\"\n                                                        )}\n                                                        value={iconURL}\n                                                        onChange={\n                                                            this\n                                                                .handleIconURLChange\n                                                        }\n                                                        tooltip={t(\n                                                            \"mint:url.tooltip\"\n                                                        )}\n                                                        showValidation={false}\n                                                    />\n                                                </div>\n                                                {iconURL !== \"\" && (\n                                                    <div\n                                                        className=\"preview-container\"\n                                                        style={{\n                                                            backgroundImage: `URL(${iconURL})`\n                                                        }}\n                                                    />\n                                                )}\n                                            </div>\n                                            <div className=\"mb-4\">\n                                                <span className=\"input-label d-block mb-2\">\n                                                    <Trans i18nKey=\"mint:description.title\" />\n                                                    <TooltipLabel tooltip=\"mint:description.tooltip\" />\n                                                </span>\n                                                <textarea\n                                                    className=\"form-control description-area\"\n                                                    value={description}\n                                                    onChange={\n                                                        this\n                                                            .handleDescriptionChange\n                                                    }\n                                                />\n                                            </div>\n                                            <div className=\"select-address-container\">\n                                                <span className=\"select-address-label\">\n                                                    <Trans i18nKey=\"mint:address.title\" />\n                                                    <TooltipLabel tooltip=\"mint:address.tooltip\" />\n                                                </span>\n                                                <select\n                                                    onChange={\n                                                        this\n                                                            .handleChangeSelectAddress\n                                                    }\n                                                    className=\"form-control\"\n                                                >\n                                                    {assetAddresses.map(a => (\n                                                        <option\n                                                            key={a.address}\n                                                            value={a.address}\n                                                        >\n                                                            {t(\n                                                                \"mint:address.address_type\"\n                                                            )}{\" \"}\n                                                            {t(\"main:address\", {\n                                                                index:\n                                                                    a.index + 1\n                                                            })}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            </div>\n                                            {platformAddresses && (\n                                                // FIXME: This code is duplicated.\n                                                <div className=\"d-flex fee-container\">\n                                                    <div className=\"fee-input-container\">\n                                                        <ValidationInput\n                                                            value={fee}\n                                                            decimalScale={0}\n                                                            onChange={\n                                                                this\n                                                                    .handleChangeFee\n                                                            }\n                                                            type=\"number\"\n                                                            showValidation={\n                                                                true\n                                                            }\n                                                            labelText={t(\n                                                                \"mint:fee.title\"\n                                                            )}\n                                                            tooltip={t(\n                                                                \"mint:fee.tooltip\"\n                                                            )}\n                                                            placeholder={\n                                                                !feePayer\n                                                                    ? t(\n                                                                          \"mint:fee.placeholder_select_fee_payer\"\n                                                                      )\n                                                                    : !availableQuarkList[\n                                                                          feePayer\n                                                                      ]\n                                                                    ? t(\n                                                                          \"mint:fee.placeholder_loading\"\n                                                                      )\n                                                                    : \"100,000 (CCC)\"\n                                                            }\n                                                            disable={\n                                                                feePayer ==\n                                                                    null ||\n                                                                (feePayer !=\n                                                                    null &&\n                                                                    availableQuarkList[\n                                                                        feePayer\n                                                                    ] == null)\n                                                            }\n                                                            onBlur={\n                                                                this\n                                                                    .checkFeeValidation\n                                                            }\n                                                            isValid={isFeeValid}\n                                                            error={feeError}\n                                                        />\n                                                    </div>\n                                                    <div className=\"fee-payer-container\">\n                                                        <div className=\"input-label\">\n                                                            <Trans i18nKey=\"mint:payer.title\" />\n                                                            <TooltipLabel tooltip=\"mint:payer.tooltip\" />\n                                                        </div>\n                                                        {platformAddresses.length ===\n                                                        0 ? (\n                                                            <select\n                                                                className=\"form-control\"\n                                                                disabled={true}\n                                                            >\n                                                                <option>\n                                                                    {t(\n                                                                        \"mint:payer.no_address\"\n                                                                    )}\n                                                                </option>\n                                                            </select>\n                                                        ) : (\n                                                            <div>\n                                                                <select\n                                                                    className=\"form-control\"\n                                                                    value={\n                                                                        feePayer\n                                                                    }\n                                                                    defaultValue={\n                                                                        \"default\"\n                                                                    }\n                                                                    onChange={\n                                                                        this\n                                                                            .handleChangeFeePayer\n                                                                    }\n                                                                >\n                                                                    <option\n                                                                        value=\"default\"\n                                                                        disabled={\n                                                                            true\n                                                                        }\n                                                                    >\n                                                                        {t(\n                                                                            \"mint:payer.select_address\"\n                                                                        )}\n                                                                    </option>\n                                                                    {platformAddresses.map(\n                                                                        pa => (\n                                                                            <option\n                                                                                value={\n                                                                                    pa.address\n                                                                                }\n                                                                                key={\n                                                                                    pa.address\n                                                                                }\n                                                                            >\n                                                                                CCC{\" \"}\n                                                                                {t(\n                                                                                    \"main:address\",\n                                                                                    {\n                                                                                        index:\n                                                                                            pa.index +\n                                                                                            1\n                                                                                    }\n                                                                                )}\n                                                                            </option>\n                                                                        )\n                                                                    )}\n                                                                </select>\n                                                                {feePayer &&\n                                                                    availableQuarkList[\n                                                                        feePayer\n                                                                    ] && (\n                                                                        <span className=\"available-ccc-text number pl-2 pr-2\">\n                                                                            {availableQuarkList[\n                                                                                feePayer\n                                                                            ]!.toLocaleString()}{\" \"}\n                                                                            CCC\n                                                                        </span>\n                                                                    )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div className=\"submit-btn-container\">\n                                            <button\n                                                disabled={isSendingTx}\n                                                type=\"submit\"\n                                                className=\"btn btn-primary square w-100 send-btn\"\n                                                onClick={this.mintAsset}\n                                            >\n                                                <Trans\n                                                    i18nKey={\"mint:mint_btn\"}\n                                                />\n                                            </button>\n                                        </div>\n                                    </div>\n                                )}\n                                {isSendingTx && (\n                                    <div className=\"minting-panel d-flex align-items-center justify-content-center\">\n                                        <Spinner\n                                            name=\"line-scale\"\n                                            color=\"white\"\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        ) : (\n                            <span className=\"no-address-label\">\n                                <Trans i18nKey=\"mint:error.asset.required\" />\n                            </span>\n                        )}\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n\n    private handleChangeSelectAddress = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.setState({ selectedAddress: event.target.value });\n    };\n\n    private checkNameValidation = () => {\n        const { name } = this.state;\n        if (name.trim() === \"\") {\n            this.setState({\n                isNameValid: false,\n                nameError: this.props.t(\"mint:error.name.required\")\n            });\n            return false;\n        }\n        this.setState({\n            isNameValid: true,\n            nameError: undefined\n        });\n        return true;\n    };\n\n    private checkSupplyValidation = () => {\n        const { supply } = this.state;\n        if (supply.trim() === \"\") {\n            this.setState({\n                isSupplyValid: false,\n                supplyError: this.props.t(\"mint:error.supply.required\")\n            });\n            return false;\n        }\n\n        const amountSupply = new BigNumber(supply);\n        if (amountSupply.isNaN() || amountSupply.lt(0)) {\n            this.setState({\n                isSupplyValid: false,\n                supplyError: this.props.t(\"mint:error.supply.invalid\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isSupplyValid: true,\n            supplyError: undefined\n        });\n        return true;\n    };\n\n    private checkFeeValidation = () => {\n        const { fee, feePayer } = this.state;\n        const { availableQuarkList } = this.props;\n\n        if (!feePayer) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.not_selected\")\n            });\n            return false;\n        }\n        const availableQuark = availableQuarkList[feePayer];\n        if (!availableQuark) {\n            throw Error(this.props.t(\"mint:error.fee.invalid_balance\"));\n        }\n        if (fee.trim() === \"\") {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.required\")\n            });\n            return false;\n        }\n        const amountFee = new BigNumber(fee);\n        if (amountFee.isNaN()) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.invalid\")\n            });\n            return false;\n        }\n        if (amountFee.lt(MinimumFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.minimum\", {\n                    fee: MinimumFee\n                })\n            });\n            return false;\n        }\n\n        if (availableQuark.value.lt(amountFee)) {\n            this.setState({\n                isFeeValid: false,\n                feeError: this.props.t(\"mint:error.fee.minimum_balance\")\n            });\n            return false;\n        }\n\n        this.setState({\n            isFeeValid: true,\n            feeError: undefined\n        });\n        return true;\n    };\n\n    private handleChangeFee = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            fee: event.target.value\n        });\n    };\n\n    private handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            name: event.target.value\n        });\n    };\n\n    private handleDescriptionChange = (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        this.setState({\n            description: event.target.value\n        });\n    };\n\n    private handleIconURLChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            iconURL: event.target.value\n        });\n    };\n\n    private handleSupplyChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            supply: event.target.value\n        });\n    };\n\n    private handleChangeFeePayer = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ) => {\n        this.selectFeePayer(event.target.value);\n    };\n\n    private selectFeePayer = (address: string) => {\n        this.setState({\n            feePayer: address,\n            fee: `${MinimumFee}`,\n            feeError: undefined,\n            isFeeValid: undefined\n        });\n        this.props.fetchAvailableQuark(address);\n    };\n\n    private mintAsset = async () => {\n        const { networkId, passphrase } = this.props;\n        const { selectedAddress: address } = this.state;\n        const {\n            name,\n            description,\n            supply,\n            iconURL,\n            fee,\n            feePayer\n        } = this.state;\n        if (!this.checkNameValidation()) {\n            return;\n        }\n        if (!this.checkSupplyValidation()) {\n            return;\n        }\n        if (!this.checkFeeValidation()) {\n            return;\n        }\n        this.setState({ isSendingTx: true });\n        const signedTx = await TxUtil.createMintAssetTx({\n            name,\n            supply: new U64(supply),\n            iconURL,\n            description,\n            recipient: address!,\n            networkId,\n            fee: new U64(fee),\n            feePayer: feePayer!,\n            passphrase\n        });\n        try {\n            await this.props.sendSignedTransaction(\n                address!,\n                signedTx,\n                feePayer!\n            );\n            this.setState({ isSentTx: true });\n        } catch (e) {\n            toast.error(\"Server is not responding.\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            console.error(e);\n        }\n        this.setState({ isSendingTx: false });\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => {\n    const platformAddresses = state.walletReducer.platformAddresses;\n    const availableQuarkList = state.accountReducer.availableQuark;\n    const passphrase = state.globalReducer.passphrase!;\n    const networkId = state.globalReducer.networkId;\n    const assetAddresses = state.walletReducer.assetAddresses;\n    return {\n        assetAddresses,\n        platformAddresses,\n        availableQuarkList,\n        passphrase,\n        networkId\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    fetchWalletFromStorageIfNeed: () => {\n        dispatch(walletActions.fetchWalletFromStorageIfNeed());\n    },\n    fetchAvailableQuark: (address: string) => {\n        dispatch(accountActions.fetchAvailableQuark(address));\n    },\n    sendSignedTransaction: (\n        address: string,\n        signedTransaction: SignedTransaction,\n        feePayer: string\n    ) => {\n        return dispatch(\n            chainActions.sendSignedTransaction(\n                address,\n                signedTransaction,\n                feePayer\n            )\n        );\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(MintAsset));\n","import React from \"react\";\nimport \"./NotFound.css\";\n\nexport default class NotFound extends React.Component<any, any> {\n    public render() {\n        return (\n            <div id=\"Not-found\">\n                <div className=\"not-found\">\n                    <div className=\"not-found-404\">\n                        <h3>Oops! Page not found</h3>\n                        <h1>\n                            <span>4</span>\n                            <span>0</span>\n                            <span>4</span>\n                        </h1>\n                    </div>\n                    <h2>\n                        we are sorry, but the page you requested was not found\n                    </h2>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { isKeystoreExisted } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\n\ninterface State {\n    isKeyExisted?: boolean | null;\n}\n\ninterface OwnProps {\n    component: any;\n    exact?: boolean;\n    path: string;\n}\n\ninterface StateProps {\n    passphrase?: string | null;\n}\n\ntype Props = StateProps & OwnProps;\nclass PrivateRoute extends React.Component<Props, State> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            isKeyExisted: undefined\n        };\n    }\n\n    public componentDidUpdate() {\n        const { passphrase } = this.props;\n        const { isKeyExisted } = this.state;\n        if (!passphrase && isKeyExisted == null) {\n            this.checkLogin();\n        }\n    }\n\n    public componentDidMount() {\n        const { passphrase } = this.props;\n        const { isKeyExisted } = this.state;\n        if (!passphrase && isKeyExisted == null) {\n            this.checkLogin();\n        }\n    }\n\n    public render() {\n        const { passphrase, component: Component, ...rest } = this.props;\n        const { isKeyExisted } = this.state;\n        return (\n            <Route\n                {...rest}\n                // tslint:disable-next-line:jsx-no-lambda\n                render={props =>\n                    passphrase ? (\n                        <Component {...props} />\n                    ) : isKeyExisted == null ? (\n                        <div>Loading...</div>\n                    ) : isKeyExisted ? (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: props.location }\n                            }}\n                        />\n                    ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/selectKeyfile\"\n                            }}\n                        />\n                    )\n                }\n            />\n        );\n    }\n\n    private checkLogin = async () => {\n        const keyExisted = await isKeystoreExisted();\n        if (keyExisted) {\n            this.setState({ isKeyExisted: true });\n        } else {\n            this.setState({ isKeyExisted: false });\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    passphrase: state.globalReducer.passphrase\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { Container } from \"reactstrap\";\nimport Form from \"reactstrap/lib/Form\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { clearKeystore, importMnemonic } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions, { Action } from \"../../redux/global/globalActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport ValidationInput from \"../ValidationInput/ValidationInput\";\nimport \"./RestoreWallet.css\";\n\ninterface State {\n    secretPhrase: string;\n    passphrase: string;\n    passphraseConfirm: string;\n    isPassphraseValid?: boolean;\n    passphraseError?: string;\n    isPassphraseConfirmValid?: boolean;\n    passphraseConfirmError?: string;\n    username: string;\n    isUsernameValid?: boolean;\n    usernameError?: string;\n}\n\ninterface DispatchProps {\n    login: (passpharase: string) => Promise<void>;\n    clearData: () => Promise<void>;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps;\nclass RestoreWallet extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            secretPhrase: \"\",\n            passphrase: \"\",\n            passphraseConfirm: \"\",\n            isPassphraseValid: undefined,\n            passphraseError: undefined,\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined,\n            username: \"\",\n            isUsernameValid: undefined,\n            usernameError: undefined\n        };\n    }\n    public async componentDidMount() {\n        const { clearData } = this.props;\n        clearPassphrase();\n        clearData();\n        clearWalletKeys();\n        await clearKeystore();\n    }\n    public render() {\n        const { t } = this.props;\n        const {\n            passphrase,\n            passphraseConfirm,\n            isPassphraseConfirmValid,\n            isPassphraseValid,\n            passphraseConfirmError,\n            passphraseError,\n            secretPhrase,\n            username,\n            isUsernameValid,\n            usernameError\n        } = this.state;\n        return (\n            <Container className=\"Restore-wallet animated fadeIn\">\n                <div className=\"close-btn\">\n                    <Link to=\"/selectKeyfile\">\n                        <FontAwesomeIcon icon=\"times\" className=\"icon\" />\n                    </Link>\n                </div>\n                <Form\n                    className=\"restore-content\"\n                    onSubmit={this.handleOnFormSubmit}\n                >\n                    <div className=\"title-container\">\n                        <h4 className=\"title\">\n                            <Trans i18nKey=\"restore:title\" />\n                        </h4>\n                    </div>\n                    <div className=\"description\">\n                        <Trans i18nKey=\"restore:description\" />\n                    </div>\n                    <div className=\"phrase-container\">\n                        <textarea\n                            className=\"phrase-input\"\n                            value={secretPhrase}\n                            onChange={this.handleChangeSecretPhraseInput}\n                        />\n                    </div>\n                    <div className=\"username-input-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:name.label\")}\n                            onChange={this.handleUsernameInput}\n                            value={username}\n                            showValidation={true}\n                            placeholder={t(\"restore:name.placeholder\")}\n                            type=\"text\"\n                            isValid={isUsernameValid}\n                            error={usernameError}\n                            onBlur={this.checkUsernameValid}\n                        />\n                    </div>\n                    <div className=\"passphrase-input-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:password.label\")}\n                            onChange={this.handlePassphraseInput}\n                            value={passphrase}\n                            showValidation={true}\n                            placeholder={t(\"restore:password.placeholder\")}\n                            type=\"password\"\n                            isValid={isPassphraseValid}\n                            error={passphraseError}\n                            onBlur={this.checkPassphraseValid}\n                        />\n                    </div>\n                    <div className=\"passphrase-confirm-container\">\n                        <ValidationInput\n                            labelText={t(\"restore:confirm.label\")}\n                            onChange={this.handlePassphraseConfirmInput}\n                            value={passphraseConfirm}\n                            showValidation={true}\n                            placeholder={t(\"restore:confirm.placeholder\")}\n                            type=\"password\"\n                            isValid={isPassphraseConfirmValid}\n                            error={passphraseConfirmError}\n                            onBlur={this.checkPassphraseConfirm}\n                        />\n                    </div>\n                    <div className=\"password-description\">\n                        <span>\n                            <Trans i18nKey=\"restore:mnemonic.detail\" />\n                        </span>\n                    </div>\n                    <div className=\"main-btn-container\">\n                        <button\n                            className=\"btn btn-primary reverse square main-btn\"\n                            type=\"submit\"\n                        >\n                            {t(\"restore:ok\")}\n                        </button>\n                    </div>\n                </Form>\n            </Container>\n        );\n    }\n\n    private handleOnFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        this.handleSubmit();\n    };\n\n    private handleSubmit = async () => {\n        const { passphrase, username, secretPhrase } = this.state;\n        const { t, login, history } = this.props;\n\n        if (!this.checkUsernameValid()) {\n            return;\n        }\n\n        if (!this.checkPassphraseValid()) {\n            return;\n        }\n\n        if (!this.checkPassphraseConfirm()) {\n            return;\n        }\n        const splitPassphrases = secretPhrase.match(/\\S+/g);\n\n        if (!splitPassphrases || splitPassphrases.length !== 12) {\n            toast.error(t(\"restore:error.mnemonic.invalid\"), {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n            return;\n        }\n        try {\n            localStorage.setItem(\"USERNAME\", username!);\n            await importMnemonic(splitPassphrases.join(\" \"), passphrase);\n            await login(passphrase!);\n            history.push(`/`);\n        } catch (e) {\n            toast.error(t(\"restore:error.mnemonic.invalid\"), {\n                position: toast.POSITION.BOTTOM_CENTER,\n                autoClose: 5000,\n                closeButton: false,\n                hideProgressBar: true\n            });\n        }\n    };\n\n    private handleChangeSecretPhraseInput = (\n        event: React.ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        this.setState({ secretPhrase: event.target.value });\n    };\n\n    private checkPassphraseValid = () => {\n        const { t } = this.props;\n        const { passphrase } = this.state;\n        if (passphrase.length < 8) {\n            this.setState({\n                passphraseError: t(\"restore:error.password.minimum\"),\n                isPassphraseValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: true\n        });\n        return true;\n    };\n\n    private checkUsernameValid = () => {\n        const { t } = this.props;\n        const { username } = this.state;\n        if (username === \"\") {\n            this.setState({\n                isUsernameValid: false,\n                usernameError: t(\"restore:error.name.required\")\n            });\n            return false;\n        }\n        if (username.length > 20) {\n            this.setState({\n                usernameError: t(\"restore:error.name.maximum\"),\n                isUsernameValid: false\n            });\n            return false;\n        }\n        this.setState({\n            isUsernameValid: true,\n            usernameError: undefined\n        });\n        return true;\n    };\n\n    private handleUsernameInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            username: event.target.value,\n            usernameError: undefined,\n            isUsernameValid: undefined\n        });\n    };\n\n    private checkPassphraseConfirm = () => {\n        const { t } = this.props;\n        const { passphrase, passphraseConfirm } = this.state;\n        if (passphrase !== passphraseConfirm) {\n            this.setState({\n                passphraseConfirmError: t(\"restore:error.confirm.mismatch\"),\n                isPassphraseConfirmValid: false\n            });\n            return false;\n        }\n\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: true\n        });\n        return true;\n    };\n\n    private handlePassphraseInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseError: undefined,\n            isPassphraseValid: undefined,\n            passphraseConfirm: \"\",\n            isPassphraseConfirmValid: undefined,\n            passphraseConfirmError: undefined\n        });\n        this.setState({ passphrase: event.target.value });\n    };\n\n    private handlePassphraseConfirmInput = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        this.setState({\n            passphraseConfirmError: undefined,\n            isPassphraseConfirmValid: undefined\n        });\n        this.setState({ passphraseConfirm: event.target.value });\n    };\n}\n\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    login: (passphrase: string) => {\n        return dispatch(globalActions.login(passphrase));\n    },\n    clearData: () => {\n        return dispatch(globalActions.clearData());\n    }\n});\nexport default connect(\n    undefined,\n    mapDispatchToProps\n)(withTranslation()(withRouter(RestoreWallet)));\n","import React from \"react\";\nimport { Trans, WithTranslation, withTranslation } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Container } from \"reactstrap\";\nimport { Action } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { WalletAddress } from \"../../model/address\";\nimport { clearKeystore } from \"../../model/keystore\";\nimport { ReducerConfigure } from \"../../redux\";\nimport globalActions from \"../../redux/global/globalActions\";\nimport { clearPassphrase, clearWalletKeys } from \"../../utils/storage\";\nimport Logo from \"./img/logo-vertical.svg\";\nimport CreateNewWalletIconHover from \"./img/plus-hover.svg\";\nimport CreateNewWalletIcon from \"./img/plus-standard.svg\";\nimport ImportKeyIconHover from \"./img/restore-hover.svg\";\nimport ImportKeyIcon from \"./img/restore-standard.svg\";\nimport \"./SelectKeyFile.css\";\n\ninterface StateProps {\n    creatingAddresses?: WalletAddress[] | null;\n    walletName?: string | null;\n}\n\ninterface DispatchProps {\n    clearData: () => void;\n}\n\ninterface State {\n    isImportBtnHover: boolean;\n    isCreateBtnHover: boolean;\n}\n\ntype Props = WithTranslation & RouteComponentProps & DispatchProps & StateProps;\nclass SelectKeyFile extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            isCreateBtnHover: false,\n            isImportBtnHover: false\n        };\n    }\n    public async componentDidMount() {\n        await clearKeystore();\n        clearWalletKeys();\n        clearPassphrase();\n        this.props.clearData();\n    }\n    public render() {\n        const { isImportBtnHover, isCreateBtnHover } = this.state;\n        return (\n            <Container className=\"Select-key-file animated fadeIn\">\n                <div className=\"text-center title-container\">\n                    <img src={Logo} alt={\"logo\"} className=\"logo\" />\n                    <h1 className=\"mt-4 logo-title\">Wallet</h1>\n                </div>\n                <div className=\"welcome-text-container\">\n                    <h4 className=\"welcome-text\">\n                        Welcome to CodeChain wallet\n                    </h4>\n                    <div>\n                        <span className=\"description-text\">\n                            <Trans i18nKey=\"create:select.title\" />\n                        </span>\n                    </div>\n                </div>\n                <div className=\"button-container d-flex justify-content-center\">\n                    <div\n                        className=\"button-item d-flex align-items-center justify-content-center\"\n                        onClick={this.onClickCreateWallet}\n                        onMouseEnter={this.handleCreateButtonHover}\n                        onMouseLeave={this.handleCreateButtonOut}\n                    >\n                        <div>\n                            <div>\n                                {isCreateBtnHover ? (\n                                    <img\n                                        src={CreateNewWalletIconHover}\n                                        alt={\"create\"}\n                                        className=\"icon\"\n                                    />\n                                ) : (\n                                    <img\n                                        src={CreateNewWalletIcon}\n                                        alt={\"create\"}\n                                        className=\"icon\"\n                                    />\n                                )}\n                            </div>\n                            <div className=\"text\">\n                                <Trans i18nKey=\"create:select.create.title\" />\n                            </div>\n                            <div className=\"button-description\">\n                                <span>\n                                    <Trans i18nKey=\"create:select.create.detail\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        className=\"button-item d-flex justify-content-center\"\n                        onClick={this.onClickRestore}\n                        onMouseEnter={this.handleImportButtonHover}\n                        onMouseLeave={this.handleImportButtopOut}\n                    >\n                        <div>\n                            <div>\n                                {isImportBtnHover ? (\n                                    <img\n                                        src={ImportKeyIconHover}\n                                        alt={\"import\"}\n                                        className=\"icon\"\n                                    />\n                                ) : (\n                                    <img\n                                        src={ImportKeyIcon}\n                                        alt={\"import\"}\n                                        className=\"icon\"\n                                    />\n                                )}\n                            </div>\n                            <div className=\"text\">\n                                <Trans i18nKey=\"create:select.restore.title\" />\n                            </div>\n                            <div className=\"button-description\">\n                                <span>\n                                    <Trans i18nKey=\"create:select.restore.detail\" />\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n    private handleImportButtonHover = () => {\n        this.setState({ isImportBtnHover: true });\n    };\n    private handleImportButtopOut = () => {\n        this.setState({ isImportBtnHover: false });\n    };\n    private handleCreateButtonHover = () => {\n        this.setState({ isCreateBtnHover: true });\n    };\n    private handleCreateButtonOut = () => {\n        this.setState({ isCreateBtnHover: false });\n    };\n    private onClickRestore = () => {\n        const { history } = this.props;\n        history.push(`/restoreWallet`);\n    };\n    private onClickCreateWallet = () => {\n        const { history } = this.props;\n        history.push(`/createWallet`);\n    };\n}\nconst mapDispatchToProps = (\n    dispatch: ThunkDispatch<ReducerConfigure, void, Action>\n) => ({\n    clearData: () => {\n        dispatch(globalActions.clearData());\n    }\n});\n\nexport default connect(\n    () => ({}),\n    mapDispatchToProps\n)(withTranslation(\"select\")(withRouter(SelectKeyFile)));\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n    faAngleDoubleLeft,\n    faAngleDoubleRight,\n    faAngleLeft,\n    faAngleRight,\n    faArrowAltCircleDown,\n    faArrowCircleDown,\n    faArrowCircleRight,\n    faArrowLeft,\n    faArrowRight,\n    faBars,\n    faChevronLeft,\n    faCircle,\n    faCopy,\n    faEllipsisH,\n    faExchangeAlt,\n    faExclamationCircle,\n    faFileDownload,\n    faInfoCircle,\n    faLock,\n    faPlus,\n    faPlusCircle,\n    faQuestionCircle,\n    faRedoAlt,\n    faTimes,\n    faTrashAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport i18n from \"../../i18next\";\nimport { ReducerConfigure } from \"../../redux\";\nimport Account from \"../Account/Account\";\nimport AddressList from \"../AddressList/AddressList\";\nimport AssetDetail from \"../AssetDetail/AssetDetail\";\nimport AssetList from \"../AssetList/AssetList\";\nimport CreateWallet from \"../CreateWallet/CreateWallet\";\nimport Footer from \"../Footer\";\nimport Header from \"../Header/Header\";\nimport Login from \"../Login/Login\";\nimport MintAsset from \"../MintAsset\";\nimport NotFound from \"../NotFound/NotFound\";\nimport PrivateRoute from \"../PrivateRoute/PrivateRoute\";\nimport RestoreWallet from \"../RestoreWallet/RestoreWallet\";\nimport SelectKeyFile from \"../SelectKeyFile/SelectKeyFile\";\nimport \"./App.css\";\n\nlibrary.add(\n    faPlus,\n    faTrashAlt,\n    faFileDownload,\n    faBars,\n    faChevronLeft,\n    faArrowAltCircleDown,\n    faPlusCircle,\n    faTimes,\n    faInfoCircle,\n    faArrowLeft,\n    faCircle,\n    faEllipsisH,\n    faArrowCircleRight,\n    faArrowCircleDown,\n    faExchangeAlt,\n    faCopy,\n    faArrowRight,\n    faRedoAlt,\n    faExclamationCircle,\n    faQuestionCircle,\n    faChevronLeft,\n    faAngleRight,\n    faAngleDoubleRight,\n    faAngleLeft,\n    faAngleDoubleLeft,\n    faLock\n);\n\ninterface StateProps {\n    passphrase?: string | null;\n}\ntype Props = StateProps;\nclass App extends React.Component<Props, any> {\n    private appRef: React.RefObject<any>;\n    public constructor(props: any) {\n        super(props);\n        this.appRef = React.createRef();\n    }\n    public render() {\n        const { passphrase } = this.props;\n        return (\n            <I18nextProvider i18n={i18n}>\n                <Router basename={process.env.PUBLIC_URL || \"/\"}>\n                    <div id=\"app\" className=\"app\" ref={this.appRef}>\n                        <ToastContainer className=\"custom-toast\" />\n                        {passphrase && <Header />}\n                        <div className=\"app-container\">\n                            <Switch>\n                                <Route path=\"/login\" component={Login} />\n                                <Route\n                                    path=\"/selectKeyfile\"\n                                    component={SelectKeyFile}\n                                />\n                                <Route\n                                    path=\"/createWallet\"\n                                    component={CreateWallet}\n                                />\n                                <Route\n                                    path=\"/restoreWallet\"\n                                    component={RestoreWallet}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/\"\n                                    component={AddressList}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/index.html\"\n                                    component={AddressList}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/mint\"\n                                    component={MintAsset}\n                                />\n                                <PrivateRoute\n                                    path=\"/:address/assets\"\n                                    component={AssetList}\n                                />\n                                <PrivateRoute\n                                    path=\"/:address/account\"\n                                    component={Account}\n                                />\n                                <PrivateRoute\n                                    exact={true}\n                                    path=\"/:address/:assetType\"\n                                    component={AssetDetail}\n                                />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </div>\n                        <Footer />\n                    </div>\n                </Router>\n            </I18nextProvider>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReducerConfigure) => ({\n    passphrase: state.globalReducer.passphrase\n});\nexport default connect(mapStateToProps)(App);\n","import { U64 } from \"codechain-sdk/lib/core/classes\";\nimport { PlatformAccount } from \"../../model/address\";\nimport { Action, ActionType } from \"./accountActions\";\n\nexport interface AccountState {\n    availableQuark: {\n        [address: string]: U64 | null | undefined;\n    };\n    accounts: {\n        [address: string]: {\n            data?: PlatformAccount | null;\n            updatedAt?: number | null;\n            isFetching: boolean;\n        } | null;\n    };\n}\n\nexport const accountInitState: AccountState = {\n    availableQuark: {},\n    accounts: {}\n};\n\nexport const accountReducer = (state = accountInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UpdateAvailableQuark: {\n            const address = action.data.address;\n            const availableQuark = {\n                ...state.availableQuark,\n                [address]: action.data.amount\n            };\n            return {\n                ...state,\n                availableQuark\n            };\n        }\n        case ActionType.SetFetchingAccount: {\n            const accounts = {\n                ...state.accounts,\n                [action.data.address]: {\n                    ...state.accounts[action.data.address],\n                    isFetching: true\n                }\n            };\n            return {\n                ...state,\n                accounts\n            };\n        }\n        case ActionType.UpdateAccount: {\n            const accounts = {\n                ...state.accounts,\n                [action.data.address]: {\n                    data: action.data.account,\n                    isFetching: false,\n                    updatedAt: +new Date()\n                }\n            };\n            return {\n                ...state,\n                accounts\n            };\n        }\n    }\n    return state;\n};\n","import { NetworkId } from \"../../model/address\";\nimport { Action, ActionType } from \"./globalActions\";\n\nexport interface GlobalState {\n    passphrase?: string | null;\n    networkId: NetworkId;\n}\n\nexport const globalInitState: GlobalState = {\n    passphrase: undefined,\n    networkId: \"cc\"\n};\n\nexport const globalReducer = (state = globalInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.Login: {\n            return {\n                ...state,\n                passphrase: action.data.passphrase\n            };\n        }\n        case ActionType.Logout: {\n            return {\n                ...state,\n                passphrase: undefined\n            };\n        }\n        case ActionType.UpdateNetwork: {\n            return {\n                ...state,\n                networkId: action.data.networkId\n            };\n        }\n    }\n    return state;\n};\n","import { WalletAddress } from \"../../model/address\";\nimport { Action, ActionType } from \"./walletActions\";\n\nexport interface WalletState {\n    platformAddresses?: WalletAddress[] | null;\n    assetAddresses?: WalletAddress[] | null;\n    isLoadingPlatformAddresses?: boolean | null;\n    isLoadingAssetAddresses?: boolean | null;\n}\n\nexport const walletInitState: WalletState = {\n    platformAddresses: undefined,\n    assetAddresses: undefined,\n    isLoadingPlatformAddresses: undefined,\n    isLoadingAssetAddresses: undefined\n};\n\nexport const walletReducer = (state = walletInitState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UpdateWalletAssetAddresses:\n            return {\n                ...state,\n                assetAddresses: action.data.assetAddresses\n            };\n        case ActionType.UpdateWalletPlatformAddresses:\n            return {\n                ...state,\n                platformAddresses: action.data.platformAddresses\n            };\n        case ActionType.ClearWalletAddresses: {\n            return {\n                ...state,\n                platformAddresses: undefined,\n                assetAddresses: undefined\n            };\n        }\n        case ActionType.SetLoadingAssetAddresses: {\n            return {\n                ...state,\n                isLoadingAssetAddresses: action.data.isLoading\n            };\n        }\n        case ActionType.SetLoadingPlatformAddresses: {\n            return {\n                ...state,\n                isLoadingPlatformAddresses: action.data.isLoading\n            };\n        }\n    }\n    return state;\n};\n","import { loadingBarReducer } from \"react-redux-loading-bar\";\nimport { combineReducers } from \"redux\";\nimport { accountReducer, AccountState } from \"./account/accountReducer\";\nimport { assetReducer, AssetState } from \"./asset/assetReducer\";\nimport { chainReducer, ChainState } from \"./chain/chainReducer\";\nimport { ActionType } from \"./global/globalActions\";\nimport { globalReducer, GlobalState } from \"./global/globalReducer\";\nimport { walletReducer, WalletState } from \"./wallet/walletReducer\";\n\nexport interface ReducerConfigure {\n    globalReducer: GlobalState;\n    walletReducer: WalletState;\n    assetReducer: AssetState;\n    chainReducer: ChainState;\n    accountReducer: AccountState;\n}\n\nconst appReducer = combineReducers({\n    globalReducer,\n    walletReducer,\n    assetReducer,\n    chainReducer,\n    accountReducer,\n    loadingBar: loadingBarReducer\n});\n\nconst rootReducer = (state: any, action: any) => {\n    if (action.type === ActionType.ClearData) {\n        state = undefined;\n    }\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === \"installed\") {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    \"New content is available; please refresh.\"\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    \"Content is cached for offline use.\"\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\")!.indexOf(\"javascript\") ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport {\n    applyMiddleware as applyMiddlewareChrome,\n    Store\n} from \"react-chrome-redux\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport App from \"./components/App/App\";\nimport rootReducer from \"./redux\";\nimport { unregister } from \"./registerServiceWorker\";\nimport \"./styles/index.css\";\n\nif (process.env.REACT_APP_BUILD_TARGET === \"chrome-extension\") {\n    const store = new Store({\n        portName: \"WALLET_APP\"\n    });\n\n    // Apply middleware to proxy store\n    const middleware = [thunk, logger];\n    const storeWithMiddleware = applyMiddlewareChrome(store, ...middleware);\n\n    store.ready().then(() => {\n        ReactDOM.render(\n            <Provider store={storeWithMiddleware}>\n                <App />\n            </Provider>,\n            document.getElementById(\"root\") as HTMLElement\n        );\n    });\n} else {\n    const composeEnhancers = composeWithDevTools({});\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(thunk))\n    );\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById(\"root\") as HTMLElement\n    );\n}\n\nunregister();\n","module.exports = __webpack_public_path__ + \"static/media/mainnet.ef91ce98.svg\";","module.exports = __webpack_public_path__ + \"static/media/testnet.afbd2264.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy-hover.790a3790.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.f3de9253.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons-check.ab7566d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons-error.84ba3bbf.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy-hover.790a3790.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.f3a44cac.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/cautiondisabled.5f741cde.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.31c9b562.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.11edc2fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/gitter.038f66f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/medium.e5a5b160.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.afaec1a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.a2682b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.31e76966.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.8fe1be51.svg\";","module.exports = __webpack_public_path__ + \"static/media/check_icon.b6365a20.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-vertical.8fe1be51.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-hover.37f5ad9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus-standard.e3e35367.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-hover.61f75205.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore-standard.5ed52c2c.svg\";"],"sourceRoot":""}